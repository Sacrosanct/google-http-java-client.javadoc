<?xml version="1.0" encoding="iso-8859-1" standalone="no"?>
<!-- Generated by the JDiff Javadoc doclet -->
<!-- (http://www.jdiff.org) -->
<!-- on Mon Mar 25 11:02:04 EDT 2013 -->

<api
  xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
  xsi:noNamespaceSchemaLocation='api.xsd'
  name="Google HTTP Client Library for Java 1.14.1-beta"
  jdversion="1.1.1">

<!--  Command line arguments =  -doclet jdiff.JDiff -docletpath /usr/local/google/home/ngmiceli/tools/jdiff-1.1.1/jdiff.jar:/usr/local/google/home/ngmiceli/tools/jdiff-1.1.1/xerces.jar -d /usr/local/google/home/ngmiceli/release-java-1.14.0-beta-projects-Qikp80/javadoc/google-http-java-client/1.14.1-beta/jdiff -classpath /usr/share/ant/lib/ant-launcher.jar:/usr/share/java/xmlParserAPIs.jar:/usr/share/java/xercesImpl.jar:/usr/share/ant/lib/ant-apache-log4j.jar:/usr/share/ant/lib/ant-jmf.jar:/usr/share/ant/lib/ant-apache-regexp.jar:/usr/share/ant/lib/ant.jar:/usr/share/ant/lib/ant-javamail.jar:/usr/share/ant/lib/ant-apache-oro.jar:/usr/share/ant/lib/ant-antlr.jar:/usr/share/ant/lib/ant-commons-net.jar:/usr/share/ant/lib/ant-commons-logging.jar:/usr/share/ant/lib/ant-testutil.jar:/usr/share/ant/lib/ant-junit.jar:/usr/share/ant/lib/ant-apache-bsf.jar:/usr/share/ant/lib/ant-jsch.jar:/usr/share/ant/lib/ant-apache-xalan2.jar:/usr/share/ant/lib/ant-swing.jar:/usr/share/ant/lib/ant-jdepend.jar:/usr/share/ant/lib/junit.jar:/usr/share/ant/lib/ant-junit4.jar:/usr/share/ant/lib/ant-apache-bcel.jar:/usr/share/ant/lib/ant-apache-resolver.jar:/usr/local/buildtools/java/jdk7-google-v5-32/lib/tools.jar -sourcepath /usr/local/google/home/ngmiceli/release-java-1.14.0-beta-projects-Qikp80/google-http-java-client/google-http-client/src/main/java:/usr/local/google/home/ngmiceli/release-java-1.14.0-beta-projects-Qikp80/google-http-java-client/google-http-client-android/src/main/java:/usr/local/google/home/ngmiceli/release-java-1.14.0-beta-projects-Qikp80/google-http-java-client/google-http-client-appengine/src/main/java:/usr/local/google/home/ngmiceli/release-java-1.14.0-beta-projects-Qikp80/google-http-java-client/google-http-client-gson/src/main/java:/usr/local/google/home/ngmiceli/release-java-1.14.0-beta-projects-Qikp80/google-http-java-client/google-http-client-jackson/src/main/java:/usr/local/google/home/ngmiceli/release-java-1.14.0-beta-projects-Qikp80/google-http-java-client/google-http-client-jackson2/src/main/java:/usr/local/google/home/ngmiceli/release-java-1.14.0-beta-projects-Qikp80/google-http-java-client/google-http-client-protobuf/src/main/java -apiname Google HTTP Client Library for Java 1.14.1-beta -baseURI http://www.w3.org -apidir /usr/local/google/home/ngmiceli/release-java-1.14.0-beta-projects-Qikp80/javadoc/google-http-java-client/1.14.1-beta/jdiff -source 1.5 -->
<package name="com.google.api.client.extensions.android">
  <!-- start class com.google.api.client.extensions.android.AndroidUtils -->
  <class name="AndroidUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="isMinimumSdkLevel" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="minimumSdkLevel" type="int"/>
      <doc>
      <![CDATA[Returns whether the SDK version is the given level or higher.

 @see android.os.Build.VERSION_CODES]]>
      </doc>
    </method>
    <method name="checkMinimumSdkLevel"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="minimumSdkLevel" type="int"/>
      <doc>
      <![CDATA[Throws an {@link IllegalArgumentException} if {@link #isMinimumSdkLevel(int)} is {@code false}
 on the given level.

 @see android.os.Build.VERSION_CODES]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Utilities for Android.

 @since 1.11
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.extensions.android.AndroidUtils -->
</package>
<package name="com.google.api.client.extensions.android.http">
  <!-- start class com.google.api.client.extensions.android.http.AndroidHttp -->
  <class name="AndroidHttp" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="newCompatibleTransport" return="com.google.api.client.http.HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new thread-safe HTTP transport instance that is compatible with Android SDKs prior to
 Gingerbread.

 <p>
 Don't use this for Android applications that anyway require Gingerbread. Instead just call
 {@code new NetHttpTransport()}.
 </p>

 <p>
 Prior to Gingerbread, the {@link HttpURLConnection} implementation was buggy, and the Apache
 HTTP Client was preferred. However, starting with Gingerbread, the {@link HttpURLConnection}
 implementation bugs were fixed, and is now better supported than the Apache HTTP Client. There
 is no guarantee that Apache HTTP transport will continue to work in future SDKs. Therefore,
 this method uses {@link NetHttpTransport} for Gingerbread or higher, and otherwise
 {@link ApacheHttpTransport}.
 </p>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Utilities for Android HTTP transport.

 @since 1.11
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.extensions.android.http.AndroidHttp -->
</package>
<package name="com.google.api.client.extensions.android.json">
  <!-- start class com.google.api.client.extensions.android.json.AndroidJsonFactory -->
  <class name="AndroidJsonFactory" extends="com.google.api.client.json.JsonFactory"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AndroidJsonFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
    </method>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <param name="charset" type="java.nio.charset.Charset"/>
    </method>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
    </method>
    <method name="createJsonGenerator" return="com.google.api.client.json.JsonGenerator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <param name="enc" type="java.nio.charset.Charset"/>
    </method>
    <method name="createJsonGenerator" return="com.google.api.client.json.JsonGenerator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="writer" type="java.io.Writer"/>
    </method>
    <doc>
    <![CDATA[Low-level JSON library implementation based on GSON.

 <p>
 Implementation is thread-safe, and sub-classes must be thread-safe. For maximum efficiency,
 applications should use a single globally-shared instance of the JSON factory.
 </p>

 <p>
 Required minimum Android SDK 3.0 (level 11).
 </p>

 @since 1.11
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.extensions.android.json.AndroidJsonFactory -->
</package>
<package name="com.google.api.client.extensions.appengine.http">
  <!-- start class com.google.api.client.extensions.appengine.http.UrlFetchTransport -->
  <class name="UrlFetchTransport" extends="com.google.api.client.http.HttpTransport"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="UrlFetchTransport"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor with the default fetch options.

 <p>
 Use {@link Builder} to modify fetch options.
 </p>]]>
      </doc>
    </constructor>
    <method name="supportsMethod" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="method" type="java.lang.String"/>
    </method>
    <method name="buildRequest" return="com.google.api.client.extensions.appengine.http.UrlFetchRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="method" type="java.lang.String"/>
      <param name="url" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Thread-safe HTTP transport for Google App Engine based on <a
 href="http://code.google.com/appengine/docs/java/urlfetch/">URL Fetch</a>.

 <p>
 Implementation is thread-safe. For maximum efficiency, applications should use a single
 globally-shared instance of the HTTP transport.
 </p>

 <p>
 URL Fetch is only available on Google App Engine (not on any other Java environment), and is the
 underlying HTTP transport used for App Engine. Their implementation of {@link HttpURLConnection}
 is simply an abstraction layer on top of URL Fetch. By implementing a transport that directly
 uses URL Fetch, we can optimize the behavior slightly, and can potentially take advantage of
 features in URL Fetch that are not available in {@link HttpURLConnection}. Furthermore, there is
 currently a serious bug in how HTTP headers are processed in the App Engine implementation of
 {@link HttpURLConnection}, which we are able to avoid using this implementation. Therefore, this
 is the recommended transport to use on App Engine.
 </p>

 @since 1.10
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.extensions.appengine.http.UrlFetchTransport -->
  <!-- start class com.google.api.client.extensions.appengine.http.UrlFetchTransport.Builder -->
  <class name="UrlFetchTransport.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="UrlFetchTransport.Builder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="doNotValidateCertificate" return="com.google.api.client.extensions.appengine.http.UrlFetchTransport.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets whether to use {@link FetchOptions#doNotValidateCertificate()} ({@code false} by
 default).

 <p>
 Be careful! Disabling certificate validation is dangerous and should be done in testing
 environments only.
 </p>]]>
      </doc>
    </method>
    <method name="validateCertificate" return="com.google.api.client.extensions.appengine.http.UrlFetchTransport.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets whether to use {@link FetchOptions#validateCertificate()} ({@code false} by default).]]>
      </doc>
    </method>
    <method name="getValidateCertificate" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether to use {@link FetchOptions#validateCertificate()}.]]>
      </doc>
    </method>
    <method name="getDoNotValidateCertificate" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether to use {@link FetchOptions#validateCertificate()}.]]>
      </doc>
    </method>
    <method name="build" return="com.google.api.client.extensions.appengine.http.UrlFetchTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new instance of {@link UrlFetchTransport} based on the options.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Builder for {@link UrlFetchTransport}.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.13]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.extensions.appengine.http.UrlFetchTransport.Builder -->
</package>
<package name="com.google.api.client.http">
  <!-- start class com.google.api.client.http.AbstractHttpContent -->
  <class name="AbstractHttpContent" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.http.HttpContent"/>
    <constructor name="AbstractHttpContent" type="java.lang.String"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param mediaType Media type string (for example "type/subtype") this content represents or
        {@code null} to leave out. Can also contain parameters like {@code "charset=utf-8"}
 @since 1.10]]>
      </doc>
    </constructor>
    <constructor name="AbstractHttpContent" type="com.google.api.client.http.HttpMediaType"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param mediaType Media type this content represents or {@code null} to leave out
 @since 1.10]]>
      </doc>
    </constructor>
    <method name="getEncoding" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Default implementation returns {@code null}, but subclasses may override.]]>
      </doc>
    </method>
    <method name="getLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Default implementation calls {@link #computeLength()} once and caches it for future
 invocations, but subclasses may override.]]>
      </doc>
    </method>
    <method name="getMediaType" return="com.google.api.client.http.HttpMediaType"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the media type to use for the Content-Type header, or {@code null} if unspecified.

 @since 1.10]]>
      </doc>
    </method>
    <method name="setMediaType" return="com.google.api.client.http.AbstractHttpContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mediaType" type="com.google.api.client.http.HttpMediaType"/>
      <doc>
      <![CDATA[Sets the media type to use for the Content-Type header, or {@code null} if unspecified.

 <p>
 This will also overwrite any previously set parameter of the media type (for example
 {@code "charset"}), and therefore might change other properties as well.
 </p>

 @since 1.10]]>
      </doc>
    </method>
    <method name="getCharset" return="java.nio.charset.Charset"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the charset specified in the media type or {@code Charsets#UTF_8} if not specified.

 @since 1.10]]>
      </doc>
    </method>
    <method name="getType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="computeLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Computes and returns the content length or less than zero if not known.

 <p>
 Subclasses may override, but by default this computes the length by calling
 {@link #computeLength(HttpContent)}.
 </p>]]>
      </doc>
    </method>
    <method name="retrySupported" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Default implementation returns {@code true}, but subclasses may override.]]>
      </doc>
    </method>
    <method name="computeLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="content" type="com.google.api.client.http.HttpContent"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the computed content length based using {@link IOUtils#computeLength(StreamingContent)}
 or instead {@code -1} if {@link HttpContent#retrySupported()} is {@code false} because the
 stream must not be read twice.

 @param content HTTP content
 @return computed content length or {@code -1} if retry is not supported

 @since 1.14]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Abstract implementation of an HTTP content with typical options.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.5
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.AbstractHttpContent -->
  <!-- start class com.google.api.client.http.AbstractInputStreamContent -->
  <class name="AbstractInputStreamContent" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.http.HttpContent"/>
    <constructor name="AbstractInputStreamContent" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param type Content type or {@code null} for none
 @since 1.5]]>
      </doc>
    </constructor>
    <method name="getInputStream" return="java.io.InputStream"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Return an input stream for the specific implementation type of
 {@link AbstractInputStreamContent}. If the specific implementation will return {@code true} for
 {@link #retrySupported()} this should be a factory function which will create a new
 {@link InputStream} from the source data whenever invoked.

 @since 1.7]]>
      </doc>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getEncoding" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCloseInputStream" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether the input stream should be closed at the end of {@link #writeTo}. Default is
 {@code true}.

 @since 1.7]]>
      </doc>
    </method>
    <method name="setEncoding" return="com.google.api.client.http.AbstractInputStreamContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="(scheduled to be removed in 1.15) Use {@link HttpEncoding} instead.">
      <param name="encoding" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the content encoding (for example {@code "gzip"}) or {@code null} for none. Subclasses
 should override by calling super.

 @since 1.5
 @deprecated (scheduled to be removed in 1.15) Use {@link HttpEncoding} instead.]]>
      </doc>
    </method>
    <method name="setType" return="com.google.api.client.http.AbstractInputStreamContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the content type or {@code null} for none. Subclasses should override by calling super.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setCloseInputStream" return="com.google.api.client.http.AbstractInputStreamContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="closeInputStream" type="boolean"/>
      <doc>
      <![CDATA[Sets whether the input stream should be closed at the end of {@link #writeTo}. Default is
 {@code true}. Subclasses should override by calling super.

 @since 1.7]]>
      </doc>
    </method>
    <method name="copy"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="(scheduled to be removed in 1.15) Use
             {@link IOUtils#copy(InputStream, OutputStream)} instead">
      <param name="inputStream" type="java.io.InputStream"/>
      <param name="outputStream" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes the content provided by the given source input stream into the given destination output
 stream.

 <p>
 The input stream is guaranteed to be closed at the end of this method.
 </p>

 <p>
 Sample use:
 </p>

 <pre>
  static void downloadMedia(HttpResponse response, File file)
      throws IOException {
    FileOutputStream out = new FileOutputStream(file);
    try {
      AbstractInputStreamContent.copy(response.getContent(), out);
    } finally {
      out.close();
    }
  }
 </pre>

 @param inputStream source input stream
 @param outputStream destination output stream
 @deprecated (scheduled to be removed in 1.15) Use
             {@link IOUtils#copy(InputStream, OutputStream)} instead]]>
      </doc>
    </method>
    <method name="copy"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="(scheduled to be removed in 1.15) Use
             {@link IOUtils#copy(InputStream, OutputStream, boolean)} instead">
      <param name="inputStream" type="java.io.InputStream"/>
      <param name="outputStream" type="java.io.OutputStream"/>
      <param name="closeInputStream" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes the content provided by the given source input stream into the given destination output
 stream.

 <p>
 Sample use:
 </p>

 <pre>
  static void downloadMedia(HttpResponse response, File file)
      throws IOException {
    FileOutputStream out = new FileOutputStream(file);
    try {
      AbstractInputStreamContent.copy(response.getContent(), out, true);
    } finally {
      out.close();
    }
  }
 </pre>

 @param inputStream source input stream
 @param outputStream destination output stream
 @param closeInputStream whether the input stream should be closed at the end of this method
 @since 1.7
 @deprecated (scheduled to be removed in 1.15) Use
             {@link IOUtils#copy(InputStream, OutputStream, boolean)} instead]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Serializes HTTP request content from an input stream into an output stream.

 <p>
 The {@link #type} field is required. Subclasses should implement the {@link #getLength()},
 {@link #getInputStream()}, and {@link #retrySupported()} for their specific type of input stream.
 By default, all content is read from the input stream. If instead you want to limit the maximum
 amount of content read from the input stream, you may use
 {@link ByteStreams#limit(InputStream, long)}.
 <p>

 <p>
 Implementations don't need to be thread-safe.
 </p>

 @since 1.4
 @author moshenko@google.com (Jacob Moshenko)]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.AbstractInputStreamContent -->
  <!-- start interface com.google.api.client.http.BackOffPolicy -->
  <interface name="BackOffPolicy"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="isBackOffRequired" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusCode" type="int"/>
      <doc>
      <![CDATA[Determines if back off is required based on the specified status code.

 <p>
 Implementations may want to back off on server or product-specific errors.
 </p>

 @param statusCode HTTP status code]]>
      </doc>
    </method>
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Reset Back off counters (if any) in an implementation-specific fashion.]]>
      </doc>
    </method>
    <method name="getNextBackOffMillis" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Gets the number of milliseconds to wait before retrying an HTTP request. If {@link #STOP} is
 returned, no retries should be made.

 This method should be used as follows:

 <pre>
   long backoffTime = backoffPolicy.getNextBackoffMs();
   if (backoffTime == BackoffPolicy.STOP) {
     // Stop retrying.
   } else {
     // Retry after backoffTime.
   }
 </pre>

 @return the number of milliseconds to wait when backing off requests, or {@link #STOP} if no
         more retries should be made]]>
      </doc>
    </method>
    <field name="STOP" type="long"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Value indicating that no more retries should be made, see {@link #getNextBackOffMillis()}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Strategy interface to control back off between retry attempts.

 @since 1.7
 @author Ravi Mistry]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.http.BackOffPolicy -->
  <!-- start class com.google.api.client.http.BasicAuthentication -->
  <class name="BasicAuthentication" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.http.HttpRequestInitializer"/>
    <implements name="com.google.api.client.http.HttpExecuteInterceptor"/>
    <constructor name="BasicAuthentication" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="com.google.api.client.http.HttpRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="intercept"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="com.google.api.client.http.HttpRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getUsername" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the username.]]>
      </doc>
    </method>
    <method name="getPassword" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the password.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Basic authentication HTTP request initializer as specified in <a
 href="http://tools.ietf.org/html/rfc2617#section-2">Basic Authentication Scheme</a>

 <p>
 Implementation is immutable and thread-safe. It can be used as either an HTTP request initializer
 or an HTTP request execute interceptor. {@link #initialize(HttpRequest)} only sets itself as the
 interceptor. Authentication is actually done in {@link #intercept(HttpRequest)}, which is
 implemented using {@link HttpHeaders#setBasicAuthentication(String, String)}.
 </p>

 @since 1.7
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.BasicAuthentication -->
  <!-- start class com.google.api.client.http.ByteArrayContent -->
  <class name="ByteArrayContent" extends="com.google.api.client.http.AbstractInputStreamContent"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ByteArrayContent" type="java.lang.String, byte[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor from byte array content that has already been encoded.

 @param type content type or {@code null} for none
 @param array byte array content
 @since 1.5]]>
      </doc>
    </constructor>
    <constructor name="ByteArrayContent" type="java.lang.String, byte[], int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor from byte array content that has already been encoded, specifying a range of bytes
 to read from the input byte array.

 @param type content type or {@code null} for none
 @param array byte array content
 @param offset starting offset into the byte array
 @param length of bytes to read from byte array
 @since 1.7]]>
      </doc>
    </constructor>
    <method name="fromString" return="com.google.api.client.http.ByteArrayContent"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.String"/>
      <param name="contentString" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns a new instance with the UTF-8 encoding (using {@link StringUtils#getBytesUtf8(String)})
 of the given content string.
 <p>
 Sample use:
 </p>

 <pre>
 <code>
  static void setJsonContent(HttpRequest request, String json) {
    request.setContent(ByteArrayContent.fromString("application/json", json));
  }
 </code>
 </pre>

 @param type content type or {@code null} for none
 @param contentString content string
 @since 1.5]]>
      </doc>
    </method>
    <method name="getLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="retrySupported" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getInputStream" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setEncoding" return="com.google.api.client.http.ByteArrayContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="encoding" type="java.lang.String"/>
    </method>
    <method name="setType" return="com.google.api.client.http.ByteArrayContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.String"/>
    </method>
    <method name="setCloseInputStream" return="com.google.api.client.http.ByteArrayContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="closeInputStream" type="boolean"/>
    </method>
    <doc>
    <![CDATA[Concrete implementation of {@link AbstractInputStreamContent} that generates repeatable input
 streams based on the contents of byte array.

 <p>
 Sample use:
 </p>

 <pre>
 <code>
  static void setJsonContent(HttpRequest request, byte[] json) {
    request.setContent(new ByteArrayContent("application/json", json));
  }
 </code>
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.4
 @author moshenko@google.com (Jacob Moshenko)]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.ByteArrayContent -->
  <!-- start class com.google.api.client.http.EmptyContent -->
  <class name="EmptyContent" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.http.HttpContent"/>
    <constructor name="EmptyContent"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getEncoding" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="retrySupported" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Empty HTTP content of length zero just to force {@link HttpRequest#execute()} to add the header
 {@code Content-Length: 0}.

 <p>
 Note that there is no {@code Content-Length} header if the HTTP request content is {@code null} .
 However, when making a request like PUT or POST without a {@code Content-Length} header, some
 servers may respond with a {@code 411 Length Required} error. Specifying the
 {@code Content-Length: 0} header may work around that problem.
 </p>

 @since 1.11
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.EmptyContent -->
  <!-- start class com.google.api.client.http.ExponentialBackOffPolicy -->
  <class name="ExponentialBackOffPolicy" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.http.BackOffPolicy"/>
    <constructor name="ExponentialBackOffPolicy"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an instance of ExponentialBackOffPolicy using default values. To override the defaults
 use {@link #builder}.
 <ul>
 <li>{@code initialIntervalMillis} is defaulted to {@link #DEFAULT_INITIAL_INTERVAL_MILLIS}</li>
 <li>{@code randomizationFactor} is defaulted to {@link #DEFAULT_RANDOMIZATION_FACTOR}</li>
 <li>{@code multiplier} is defaulted to {@link #DEFAULT_MULTIPLIER}</li>
 <li>{@code maxIntervalMillis} is defaulted to {@link #DEFAULT_MAX_INTERVAL_MILLIS}</li>
 <li>{@code maxElapsedTimeMillis} is defaulted in {@link #DEFAULT_MAX_ELAPSED_TIME_MILLIS}</li>
 </ul>]]>
      </doc>
    </constructor>
    <constructor name="ExponentialBackOffPolicy" type="com.google.api.client.http.ExponentialBackOffPolicy.Builder"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param builder builder

 @since 1.14]]>
      </doc>
    </constructor>
    <method name="isBackOffRequired" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusCode" type="int"/>
      <doc>
      <![CDATA[Determines if back off is required based on the specified status code.

 <p>
 The idea is that the servers are only temporarily unavailable, and they should not be
 overwhelmed when they are trying to get back up.
 </p>

 <p>
 The default implementation requires back off for 500 and 503 status codes. Subclasses may
 override if different status codes are required.
 </p>]]>
      </doc>
    </method>
    <method name="reset"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the interval back to the initial retry interval and restarts the timer.]]>
      </doc>
    </method>
    <method name="getNextBackOffMillis" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Gets the number of milliseconds to wait before retrying an HTTP request. If {@link #STOP} is
 returned, no retries should be made.

 <p>
 This method calculates the next back off interval using the formula: randomized_interval =
 retry_interval +/- (randomization_factor * retry_interval)
 </p>

 <p>
 Subclasses may override if a different algorithm is required.
 </p>

 @return the number of milliseconds to wait when backing off requests, or {@link #STOP} if no
         more retries should be made]]>
      </doc>
    </method>
    <method name="getInitialIntervalMillis" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the initial retry interval in milliseconds.]]>
      </doc>
    </method>
    <method name="getRandomizationFactor" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the randomization factor to use for creating a range around the retry interval.

 <p>
 A randomization factor of 0.5 results in a random period ranging between 50% below and 50%
 above the retry interval.
 </p>]]>
      </doc>
    </method>
    <method name="getCurrentIntervalMillis" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current retry interval in milliseconds.]]>
      </doc>
    </method>
    <method name="getMultiplier" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value to multiply the current interval with for each retry attempt.]]>
      </doc>
    </method>
    <method name="getMaxIntervalMillis" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the maximum value of the back off period in milliseconds. Once the current interval
 reaches this value it stops increasing.]]>
      </doc>
    </method>
    <method name="getMaxElapsedTimeMillis" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the maximum elapsed time in milliseconds.

 <p>
 If the time elapsed since an {@link ExponentialBackOffPolicy} instance is created goes past the
 max_elapsed_time then the method {@link #getNextBackOffMillis()} starts returning
 {@link BackOffPolicy#STOP}. The elapsed time can be reset by calling {@link #reset()}.
 </p>]]>
      </doc>
    </method>
    <method name="getElapsedTimeMillis" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the elapsed time in milliseconds since an {@link ExponentialBackOffPolicy} instance is
 created and is reset when {@link #reset()} is called.

 <p>
 The elapsed time is computed using {@link System#nanoTime()}.
 </p>]]>
      </doc>
    </method>
    <method name="builder" return="com.google.api.client.http.ExponentialBackOffPolicy.Builder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an instance of a new builder.]]>
      </doc>
    </method>
    <field name="DEFAULT_INITIAL_INTERVAL_MILLIS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The default initial interval value in milliseconds (0.5 seconds).]]>
      </doc>
    </field>
    <field name="DEFAULT_RANDOMIZATION_FACTOR" type="double"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The default randomization factor (0.5 which results in a random period ranging between 50%
 below and 50% above the retry interval).]]>
      </doc>
    </field>
    <field name="DEFAULT_MULTIPLIER" type="double"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The default multiplier value (1.5 which is 50% increase per back off).]]>
      </doc>
    </field>
    <field name="DEFAULT_MAX_INTERVAL_MILLIS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The default maximum back off time in milliseconds (1 minute).]]>
      </doc>
    </field>
    <field name="DEFAULT_MAX_ELAPSED_TIME_MILLIS" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The default maximum elapsed time in milliseconds (15 minutes).]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Implementation of {@link BackOffPolicy} that increases the back off period for each retry attempt
 using a randomization function that grows exponentially.

 <p>
 {@link #getNextBackOffMillis()} is calculated using the following formula:

 <pre>
 randomized_interval =
     retry_interval * (random value in range [1 - randomization_factor, 1 + randomization_factor])
 </pre>
 In other words {@link #getNextBackOffMillis()} will range between the randomization factor
 percentage below and above the retry interval. For example, using 2 seconds as the base retry
 interval and 0.5 as the randomization factor, the actual back off period used in the next retry
 attempt will be between 1 and 3 seconds.
 </p>

 <p>
 <b>Note:</b> max_interval caps the retry_interval and not the randomized_interval.
 </p>

 <p>
 If the time elapsed since an {@link ExponentialBackOffPolicy} instance is created goes past the
 max_elapsed_time then the method {@link #getNextBackOffMillis()} starts returning
 {@link BackOffPolicy#STOP}. The elapsed time can be reset by calling {@link #reset()}.
 </p>

 <p>
 Example: The default retry_interval is .5 seconds, default randomization_factor is 0.5, default
 multiplier is 1.5 and the default max_interval is 1 minute. For 10 requests the sequence will be
 (values in seconds) and assuming we go over the max_elapsed_time on the 10th request:

 <pre>
 request#     retry_interval     randomized_interval

 1             0.5                [0.25,   0.75]
 2             0.75               [0.375,  1.125]
 3             1.125              [0.562,  1.687]
 4             1.687              [0.8435, 2.53]
 5             2.53               [1.265,  3.795]
 6             3.795              [1.897,  5.692]
 7             5.692              [2.846,  8.538]
 8             8.538              [4.269, 12.807]
 9            12.807              [6.403, 19.210]
 10           19.210              {@link BackOffPolicy#STOP}
 </pre>
 </p>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.7
 @author Ravi Mistry]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.ExponentialBackOffPolicy -->
  <!-- start class com.google.api.client.http.ExponentialBackOffPolicy.Builder -->
  <class name="ExponentialBackOffPolicy.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ExponentialBackOffPolicy.Builder"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <method name="build" return="com.google.api.client.http.ExponentialBackOffPolicy"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Builds a new instance of {@link ExponentialBackOffPolicy}.]]>
      </doc>
    </method>
    <method name="getInitialIntervalMillis" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the initial retry interval in milliseconds. The default value is
 {@link #DEFAULT_INITIAL_INTERVAL_MILLIS}.]]>
      </doc>
    </method>
    <method name="setInitialIntervalMillis" return="com.google.api.client.http.ExponentialBackOffPolicy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="initialIntervalMillis" type="int"/>
      <doc>
      <![CDATA[Sets the initial retry interval in milliseconds. The default value is
 {@link #DEFAULT_INITIAL_INTERVAL_MILLIS}. Must be {@code > 0}.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getRandomizationFactor" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the randomization factor to use for creating a range around the retry interval. The
 default value is {@link #DEFAULT_RANDOMIZATION_FACTOR}.

 <p>
 A randomization factor of 0.5 results in a random period ranging between 50% below and 50%
 above the retry interval.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="setRandomizationFactor" return="com.google.api.client.http.ExponentialBackOffPolicy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="randomizationFactor" type="double"/>
      <doc>
      <![CDATA[Sets the randomization factor to use for creating a range around the retry interval. The
 default value is {@link #DEFAULT_RANDOMIZATION_FACTOR}. Must fall in the range
 {@code 0 <= randomizationFactor < 1}.

 <p>
 A randomization factor of 0.5 results in a random period ranging between 50% below and 50%
 above the retry interval.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getMultiplier" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the value to multiply the current interval with for each retry attempt. The default
 value is {@link #DEFAULT_MULTIPLIER}.]]>
      </doc>
    </method>
    <method name="setMultiplier" return="com.google.api.client.http.ExponentialBackOffPolicy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="multiplier" type="double"/>
      <doc>
      <![CDATA[Sets the value to multiply the current interval with for each retry attempt. The default
 value is {@link #DEFAULT_MULTIPLIER}. Must be {@code >= 1}.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getMaxIntervalMillis" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the maximum value of the back off period in milliseconds. Once the current interval
 reaches this value it stops increasing. The default value is
 {@link #DEFAULT_MAX_INTERVAL_MILLIS}. Must be {@code >= initialInterval}.]]>
      </doc>
    </method>
    <method name="setMaxIntervalMillis" return="com.google.api.client.http.ExponentialBackOffPolicy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="maxIntervalMillis" type="int"/>
      <doc>
      <![CDATA[Sets the maximum value of the back off period in milliseconds. Once the current interval
 reaches this value it stops increasing. The default value is
 {@link #DEFAULT_MAX_INTERVAL_MILLIS}.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getMaxElapsedTimeMillis" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the maximum elapsed time in milliseconds. The default value is
 {@link #DEFAULT_MAX_ELAPSED_TIME_MILLIS}.

 <p>
 If the time elapsed since an {@link ExponentialBackOffPolicy} instance is created goes past
 the max_elapsed_time then the method {@link #getNextBackOffMillis()} starts returning
 {@link BackOffPolicy#STOP}. The elapsed time can be reset by calling {@link #reset()}.
 </p>]]>
      </doc>
    </method>
    <method name="setMaxElapsedTimeMillis" return="com.google.api.client.http.ExponentialBackOffPolicy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="maxElapsedTimeMillis" type="int"/>
      <doc>
      <![CDATA[Sets the maximum elapsed time in milliseconds. The default value is
 {@link #DEFAULT_MAX_ELAPSED_TIME_MILLIS}. Must be {@code > 0}.

 <p>
 If the time elapsed since an {@link ExponentialBackOffPolicy} instance is created goes past
 the max_elapsed_time then the method {@link #getNextBackOffMillis()} starts returning
 {@link BackOffPolicy#STOP}. The elapsed time can be reset by calling {@link #reset()}.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getNanoClock" return="com.google.api.client.util.NanoClock"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the nano clock.

 @since 1.14]]>
      </doc>
    </method>
    <method name="setNanoClock" return="com.google.api.client.http.ExponentialBackOffPolicy.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="nanoClock" type="com.google.api.client.util.NanoClock"/>
      <doc>
      <![CDATA[Sets the nano clock ({@link NanoClock#SYSTEM} by default).

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.14]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Builder for {@link ExponentialBackOffPolicy}.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.7]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.ExponentialBackOffPolicy.Builder -->
  <!-- start class com.google.api.client.http.FileContent -->
  <class name="FileContent" extends="com.google.api.client.http.AbstractInputStreamContent"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="FileContent" type="java.lang.String, java.io.File"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param type Content type or {@code null} for none
 @param file file
 @since 1.5]]>
      </doc>
    </constructor>
    <method name="getLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="retrySupported" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getInputStream" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="FileNotFoundException" type="java.io.FileNotFoundException"/>
    </method>
    <method name="getFile" return="java.io.File"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the file.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setEncoding" return="com.google.api.client.http.FileContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="encoding" type="java.lang.String"/>
    </method>
    <method name="setType" return="com.google.api.client.http.FileContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.String"/>
    </method>
    <method name="setCloseInputStream" return="com.google.api.client.http.FileContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="closeInputStream" type="boolean"/>
    </method>
    <doc>
    <![CDATA[Concrete implementation of {@link AbstractInputStreamContent} that generates repeatable input
 streams based on the contents of a file.

 <p>
 Sample use:
 </p>

 <pre>
 <code>
  private static void setRequestJpegContent(HttpRequest request, File jpegFile) {
    request.setContent(new FileContent("image/jpeg", jpegFile));
  }
 </code>
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.4
 @author moshenko@google.com (Jacob Moshenko)]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.FileContent -->
  <!-- start class com.google.api.client.http.GenericUrl -->
  <class name="GenericUrl" extends="com.google.api.client.util.GenericData"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GenericUrl"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="GenericUrl" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs from an encoded URL.

 <p>
 Any known query parameters with pre-defined fields as data keys will be parsed based on their
 data type. Any unrecognized query parameter will always be parsed as a string.
 </p>

 <p>
 Any {@link URISyntaxException} is wrapped in an {@link IllegalArgumentException}.
 </p>

 @param encodedUrl encoded URL, including any existing query parameters that should be parsed
 @throws IllegalArgumentException if URL has a syntax error]]>
      </doc>
    </constructor>
    <constructor name="GenericUrl" type="java.net.URI"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs from a URI.

 @param uri URI

 @since 1.14]]>
      </doc>
    </constructor>
    <constructor name="GenericUrl" type="java.net.URL"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs from a URL.

 @param url URL

 @since 1.14]]>
      </doc>
    </constructor>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="com.google.api.client.http.GenericUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="set" return="com.google.api.client.http.GenericUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="getScheme" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the scheme (lowercase), for example {@code "https"}.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setScheme"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="scheme" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the scheme (lowercase), for example {@code "https"}.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getHost" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the host, for example {@code "www.google.com"}.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setHost"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="host" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the host, for example {@code "www.google.com"}.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getPort" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the port number or {@code -1} if undefined, for example {@code 443}.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setPort"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="port" type="int"/>
      <doc>
      <![CDATA[Returns the port number or {@code -1} if undefined, for example {@code 443}.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getPathParts" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the decoded path component by parts with each part separated by a {@code '/'} or
 {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setPathParts"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pathParts" type="java.util.List&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Sets the decoded path component by parts with each part separated by a {@code '/'} or
 {@code null} for none.

 <p>
 For example {@code "/m8/feeds/contacts/default/full"} is represented by {@code "", "m8",
"feeds", "contacts", "default", "full"}.
 </p>

 <p>
 Use {@link #appendRawPath(String)} to append to the path, which ensures that no extra slash is
 added.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getFragment" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the fragment component or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setFragment"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="fragment" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the fragment component or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="build" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs the string representation of the URL, including the path specified by
 {@link #pathParts} and the query parameters specified by this generic URL.]]>
      </doc>
    </method>
    <method name="buildAuthority" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs the portion of the URL containing the scheme, host and port.

 <p>
 For the URL {@code "http://example.com/something?action=add"} this method would return
 {@code "http://example.com"}.
 </p>

 @return scheme://host[:port]
 @since 1.9]]>
      </doc>
    </method>
    <method name="buildRelativeUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs the portion of the URL beginning at the rooted path.

 <p>
 For the URL {@code "http://example.com/something?action=add"} this method would return
 {@code "/something?action=add"}.
 </p>

 @return path with with leading '/' if the path is non-empty, query parameters and fragment
 @since 1.9]]>
      </doc>
    </method>
    <method name="toURI" return="java.net.URI"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs the URI based on the string representation of the URL from {@link #build()}.

 <p>
 Any {@link URISyntaxException} is wrapped in an {@link IllegalArgumentException}.
 </p>

 @return new URI instance

 @since 1.14]]>
      </doc>
    </method>
    <method name="toURL" return="java.net.URL"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs the URL based on the string representation of the URL from {@link #build()}.

 <p>
 Any {@link MalformedURLException} is wrapped in an {@link IllegalArgumentException}.
 </p>

 @return new URL instance

 @since 1.14]]>
      </doc>
    </method>
    <method name="toURL" return="java.net.URL"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="relativeUrl" type="java.lang.String"/>
      <doc>
      <![CDATA[Constructs the URL based on {@link URL#URL(URL, String)} with this URL representation from
 {@link #toURL()} and a relative url.

 <p>
 Any {@link MalformedURLException} is wrapped in an {@link IllegalArgumentException}.
 </p>

 @return new URL instance

 @since 1.14]]>
      </doc>
    </method>
    <method name="getFirst" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the first query parameter value for the given query parameter name.

 @param name query parameter name
 @return first query parameter value]]>
      </doc>
    </method>
    <method name="getAll" return="java.util.Collection&lt;java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns all query parameter values for the given query parameter name.

 @param name query parameter name
 @return unmodifiable collection of query parameter values (possibly empty)]]>
      </doc>
    </method>
    <method name="getRawPath" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the raw encoded path computed from the {@link #pathParts}.

 @return raw encoded path computed from the {@link #pathParts} or {@code null} if
         {@link #pathParts} is {@code null}]]>
      </doc>
    </method>
    <method name="setRawPath"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="encodedPath" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@link #pathParts} from the given raw encoded path.

 @param encodedPath raw encoded path or {@code null} to set {@link #pathParts} to {@code null}]]>
      </doc>
    </method>
    <method name="appendRawPath"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="encodedPath" type="java.lang.String"/>
      <doc>
      <![CDATA[Appends the given raw encoded path to the current {@link #pathParts}, setting field only if it
 is {@code null} or empty.
 <p>
 The last part of the {@link #pathParts} is merged with the first part of the path parts
 computed from the given encoded path. Thus, if the current raw encoded path is {@code "a"}, and
 the given encoded path is {@code "b"}, then the resulting raw encoded path is {@code "ab"}.
 </p>

 @param encodedPath raw encoded path or {@code null} to ignore]]>
      </doc>
    </method>
    <method name="toPathParts" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="encodedPath" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the decoded path parts for the given encoded path.

 @param encodedPath slash-prefixed encoded path, for example
        {@code "/m8/feeds/contacts/default/full"}
 @return decoded path parts, with each part assumed to be preceded by a {@code '/'}, for example
         {@code "", "m8", "feeds", "contacts", "default", "full"}, or {@code null} for
         {@code null} or {@code ""} input]]>
      </doc>
    </method>
    <doc>
    <![CDATA[URL builder in which the query parameters are specified as generic data key/value pairs, based on
 the specification <a href="http://tools.ietf.org/html/rfc3986">RFC 3986: Uniform Resource
 Identifier (URI)</a>.

 <p>
 The query parameters are specified with the data key name as the parameter name, and the data
 value as the parameter value. Subclasses can declare fields for known query parameters using the
 {@link Key} annotation. {@code null} parameter names are not allowed, but {@code null} query
 values are allowed.
 </p>

 <p>
 Query parameter values are parsed using {@link UrlEncodedParser#parse(String, Object)}.
 </p>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.GenericUrl -->
  <!-- start class com.google.api.client.http.GZipEncoding -->
  <class name="GZipEncoding" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.http.HttpEncoding"/>
    <constructor name="GZipEncoding"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="encode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="content" type="com.google.api.client.util.StreamingContent"/>
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[GZip HTTP content encoding.

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.GZipEncoding -->
  <!-- start interface com.google.api.client.http.HttpContent -->
  <interface name="HttpContent"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.util.StreamingContent"/>
    <method name="getLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the content length or less than zero if not known.]]>
      </doc>
    </method>
    <method name="getEncoding" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="(scheduled to be removed in 1.15) Use {@link HttpEncoding} instead">
      <doc>
      <![CDATA[Returns the content encoding (for example {@code "gzip"}) or {@code null} for none.

 @deprecated (scheduled to be removed in 1.15) Use {@link HttpEncoding} instead]]>
      </doc>
    </method>
    <method name="getType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the content type or {@code null} for none.]]>
      </doc>
    </method>
    <method name="retrySupported" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether or not retry is supported on this content type.

 @since 1.4]]>
      </doc>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[{@inheritDoc}

 <p>
 Upgrade warning: in prior version 1.13 the implementation of this method was allowed to close
 the stream, but starting with 1.14 closing the stream is no longer allowed.
 </p>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Serializes HTTP request content into an output stream.

 <p>
 Implementations don't need to be thread-safe.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.http.HttpContent -->
  <!-- start interface com.google.api.client.http.HttpEncoding -->
  <interface name="HttpEncoding"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the content encoding name (for example {@code "gzip"}) or {@code null} for none.]]>
      </doc>
    </method>
    <method name="encode"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="content" type="com.google.api.client.util.StreamingContent"/>
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Encodes the streaming content into the output stream.

 <p>
 Implementations must not close the output stream, and instead should flush the output stream.
 Some callers may assume that the the output stream has not been closed, and will fail to work
 if it has been closed.
 </p>

 @param content streaming content
 @param out output stream]]>
      </doc>
    </method>
    <doc>
    <![CDATA[HTTP content encoding.

 <p>
 Implementations don't need to be thread-safe.
 </p>

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.http.HttpEncoding -->
  <!-- start class com.google.api.client.http.HttpEncodingStreamingContent -->
  <class name="HttpEncodingStreamingContent" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.util.StreamingContent"/>
    <constructor name="HttpEncodingStreamingContent" type="com.google.api.client.util.StreamingContent, com.google.api.client.http.HttpEncoding"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param content streaming content
 @param encoding HTTP encoding]]>
      </doc>
    </constructor>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getContent" return="com.google.api.client.util.StreamingContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the streaming content.]]>
      </doc>
    </method>
    <method name="getEncoding" return="com.google.api.client.http.HttpEncoding"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP encoding.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Streaming content based on an HTTP encoding.

 <p>
 Implementation is thread-safe only if the streaming content and HTTP encoding are thread-safe.
 </p>

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.HttpEncodingStreamingContent -->
  <!-- start interface com.google.api.client.http.HttpExecuteInterceptor -->
  <interface name="HttpExecuteInterceptor"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="intercept"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="com.google.api.client.http.HttpRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Invoked at the start of {@link HttpRequest#execute()} before executing the HTTP request.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[HTTP request execute interceptor to intercept the start of {@link HttpRequest#execute()} before
 executing the HTTP request.

 <p>
 For example, this might be used to sign a request for OAuth:
 </p>

 <pre>
  public class OAuthSigner implements HttpExecuteInterceptor {
    public void intercept(HttpRequest request) throws IOException {
      // sign request...
    }
  }
 </pre>

 <p>
 Sample usage with a request factory:
 </p>

 <pre>
  public static HttpRequestFactory createRequestFactory(HttpTransport transport) {
    final OAuthSigner signer = new OAuthSigner(...);
    return transport.createRequestFactory(new HttpRequestInitializer() {
      public void initialize(HttpRequest request) {
        request.setInterceptor(signer);
      }
    });
  }
 </pre>

 <p>
 More complex usage example:
 </p>

 <pre>
  public static HttpRequestFactory createRequestFactory2(HttpTransport transport) {
    final OAuthSigner signer = new OAuthSigner(...);
    return transport.createRequestFactory(new HttpRequestInitializer() {
      public void initialize(HttpRequest request) {
        request.setInterceptor(new HttpExecuteInterceptor() {
          public void intercept(HttpRequest request) throws IOException {
            signer.intercept(request);
          }
        });
      }
    });
  }
 </pre>

 <p>
 Implementations should normally be thread-safe.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.http.HttpExecuteInterceptor -->
  <!-- start class com.google.api.client.http.HttpHeaders -->
  <class name="HttpHeaders" extends="com.google.api.client.util.GenericData"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="HttpHeaders"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="clone" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="set" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="getAccept" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "Accept"} header or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setAccept" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="accept" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "Accept"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getAcceptEncoding" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "Accept-Encoding"} header or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setAcceptEncoding" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="acceptEncoding" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "Accept-Encoding"} header or {@code null} for none.

 <p>
 By default, this is {@code "gzip"}.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getAuthorization" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "Authorization"} header or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getAuthorizationAsList" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns all {@code "Authorization"} headers or {@code null} for none.

 @since 1.13]]>
      </doc>
    </method>
    <method name="setAuthorization" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authorization" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "Authorization"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="setAuthorization" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authorization" type="java.util.List&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Sets the {@code "Authorization"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.13]]>
      </doc>
    </method>
    <method name="getCacheControl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "Cache-Control"} header or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setCacheControl" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cacheControl" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "Cache-Control"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getContentEncoding" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "Content-Encoding"} header or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setContentEncoding" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contentEncoding" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "Content-Encoding"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getContentLength" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "Content-Length"} header or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setContentLength" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contentLength" type="java.lang.Long"/>
      <doc>
      <![CDATA[Sets the {@code "Content-Length"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getContentMD5" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "Content-MD5"} header or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setContentMD5" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contentMD5" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "Content-MD5"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getContentRange" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "Content-Range"} header or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setContentRange" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contentRange" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "Content-Range"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getContentType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "Content-Type"} header or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setContentType" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contentType" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "Content-Type"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getCookie" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "Cookie"} header or {@code null} for none.

 <p>
 See <a href='http://tools.ietf.org/html/rfc6265'>Cookie Specification.</a>
 </p>

 @since 1.6]]>
      </doc>
    </method>
    <method name="setCookie" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="cookie" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "Cookie"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.6]]>
      </doc>
    </method>
    <method name="getDate" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "Date"} header or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setDate" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="date" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "Date"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getETag" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "ETag"} header or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setETag" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="etag" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "ETag"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getExpires" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "Expires"} header or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setExpires" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="expires" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "Expires"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getIfModifiedSince" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "If-Modified-Since"} header or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setIfModifiedSince" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ifModifiedSince" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "If-Modified-Since"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getIfMatch" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "If-Match"} header or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setIfMatch" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ifMatch" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "If-Match"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getIfNoneMatch" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "If-None-Match"} header or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setIfNoneMatch" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ifNoneMatch" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "If-None-Match"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getIfUnmodifiedSince" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "If-Unmodified-Since"} header or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setIfUnmodifiedSince" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ifUnmodifiedSince" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "If-Unmodified-Since"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getIfRange" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "If-Range"} header or {@code null} for none.

 @since 1.14]]>
      </doc>
    </method>
    <method name="setIfRange" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="ifRange" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "If-Range"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.14]]>
      </doc>
    </method>
    <method name="getLastModified" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "Last-Modified"} header or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setLastModified" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="lastModified" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "Last-Modified"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getLocation" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "Location"} header or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setLocation" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="location" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "Location"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getMimeVersion" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "MIME-Version"} header or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setMimeVersion" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mimeVersion" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "MIME-Version"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getRange" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "Range"} header or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setRange" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="range" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "Range"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getRetryAfter" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "Retry-After"} header or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setRetryAfter" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="retryAfter" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "Retry-After"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getUserAgent" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "User-Agent"} header or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setUserAgent" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="userAgent" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "User-Agent"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getAuthenticate" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "WWW-Authenticate"} header or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setAuthenticate" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="authenticate" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "WWW-Authenticate"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getAge" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the first {@code "Age"} header or {@code null} for none.

 @since 1.14]]>
      </doc>
    </method>
    <method name="setAge" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="age" type="java.lang.Long"/>
      <doc>
      <![CDATA[Sets the {@code "Age"} header or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.14]]>
      </doc>
    </method>
    <method name="setBasicAuthentication" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="username" type="java.lang.String"/>
      <param name="password" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@link #authorization} header as specified in <a
 href="http://tools.ietf.org/html/rfc2617#section-2">Basic Authentication Scheme</a>.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.2]]>
      </doc>
    </method>
    <method name="serializeHeadersForMultipartRequests"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="headers" type="com.google.api.client.http.HttpHeaders"/>
      <param name="logbuf" type="java.lang.StringBuilder"/>
      <param name="logger" type="java.util.logging.Logger"/>
      <param name="writer" type="java.io.Writer"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Serializes headers to an {@link Writer} for Multi-part requests.

 @param headers HTTP headers
 @param logbuf log buffer or {@code null} for none
 @param logger logger or {@code null} for none. Logger must be specified if log buffer is
        specified
 @param writer Writer where HTTP headers will be serialized to or {@code null} for none

 @since 1.9]]>
      </doc>
    </method>
    <method name="fromHttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="response" type="com.google.api.client.http.LowLevelHttpResponse"/>
      <param name="logger" type="java.lang.StringBuilder"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Puts all headers of the {@link LowLevelHttpResponse} into this {@link HttpHeaders} object.

 <p>
 Upgrade warning: in prior version 1.13 it did not clear the headers before parsing the
 response, but starting in version 1.14 it does clear the headers first.
 </p>

 @param response Response from which the headers are copied
 @param logger {@link StringBuilder} to which logging output is added or {@code null} to disable
        logging
 @since 1.10]]>
      </doc>
    </method>
    <method name="getFirstHeaderStringValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the first header string value for the given header name.

 @param name header name (may be any case)
 @return first header string value or {@code null} if not found
 @since 1.13]]>
      </doc>
    </method>
    <method name="getHeaderStringValues" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns an unmodifiable list of the header string values for the given header name.

 @param name header name (may be any case)
 @return header string values or empty if not found
 @since 1.13]]>
      </doc>
    </method>
    <method name="fromHttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="headers" type="com.google.api.client.http.HttpHeaders"/>
      <doc>
      <![CDATA[Puts all headers of the {@link HttpHeaders} object into this {@link HttpHeaders} object.

 @param headers {@link HttpHeaders} from where the headers are taken
 @since 1.10]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Stores HTTP headers used in an HTTP request or response, as defined in <a
 href="http://tools.ietf.org/html/rfc2616#section-14">Header Field Definitions</a>.

 <p>
 {@code null} is not allowed as a name or value of a header. Names are case-insensitive.
 </p>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.HttpHeaders -->
  <!-- start class com.google.api.client.http.HttpMediaType -->
  <class name="HttpMediaType" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="HttpMediaType" type="java.lang.String, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Initializes the {@link HttpMediaType} by setting the specified media type.
 @param type main media type, for example {@code "text"}
 @param subType sub media type, for example {@code "plain"}]]>
      </doc>
    </constructor>
    <constructor name="HttpMediaType" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a {@link HttpMediaType} by parsing the specified media type string.

 @param mediaType full media type string, for example {@code "text/plain; charset=utf-8"}]]>
      </doc>
    </constructor>
    <method name="setType" return="com.google.api.client.http.HttpMediaType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the (main) media type, for example {@code "text"}.

 @param type main/major media type]]>
      </doc>
    </method>
    <method name="getType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the main media type, for example {@code "text"}, or {@code null} for '*'.]]>
      </doc>
    </method>
    <method name="setSubType" return="com.google.api.client.http.HttpMediaType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="subType" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the sub media type, for example {@code "plain"} when using {@code "text"}.

 @param subType sub media type]]>
      </doc>
    </method>
    <method name="getSubType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the sub media type, for example {@code "plain"} when using {@code "text"}.]]>
      </doc>
    </method>
    <method name="setParameter" return="com.google.api.client.http.HttpMediaType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the media parameter to the specified value.

 @param name case-insensitive name of the parameter
 @param value value of the parameter or {@code null} to remove]]>
      </doc>
    </method>
    <method name="getParameter" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the value of the specified parameter or {@code null} if not found.

 @param name name of the parameter]]>
      </doc>
    </method>
    <method name="removeParameter" return="com.google.api.client.http.HttpMediaType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Removes the specified media parameter.

 @param name parameter to remove]]>
      </doc>
    </method>
    <method name="clearParameters"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Removes all set parameters from this media type.]]>
      </doc>
    </method>
    <method name="getParameters" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an unmodifiable map of all specified parameters. Parameter names will be stored in
 lower-case in this map.]]>
      </doc>
    </method>
    <method name="build" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Builds the full media type string which can be passed in the Content-Type header.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equalsIgnoreParameters" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mediaType" type="com.google.api.client.http.HttpMediaType"/>
      <doc>
      <![CDATA[Returns {@code true} if the specified media type has both the same type and subtype, or
 {@code false} if they don't match or the media type is {@code null}.]]>
      </doc>
    </method>
    <method name="equalsIgnoreParameters" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mediaTypeA" type="java.lang.String"/>
      <param name="mediaTypeB" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns {@code true} if the two specified media types have the same type and subtype, or if
 both types are {@code null}.]]>
      </doc>
    </method>
    <method name="setCharsetParameter" return="com.google.api.client.http.HttpMediaType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="charset" type="java.nio.charset.Charset"/>
      <doc>
      <![CDATA[Sets the charset parameter of the media type.

 @param charset new value for the charset parameter or {@code null} to remove]]>
      </doc>
    </method>
    <method name="getCharsetParameter" return="java.nio.charset.Charset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the specified charset or {@code null} if unset.]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[HTTP Media-type as specified in the HTTP RFC (
 {@link "http://tools.ietf.org/html/rfc2616#section-3.7"}).

 <p>
 Implementation is not thread-safe.
 </p>

 @author Matthias Linder (mlinder)
 @since 1.10]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.HttpMediaType -->
  <!-- start class com.google.api.client.http.HttpMethods -->
  <class name="HttpMethods" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="CONNECT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP CONNECT method.]]>
      </doc>
    </field>
    <field name="DELETE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP DELETE method.]]>
      </doc>
    </field>
    <field name="GET" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP GET method.]]>
      </doc>
    </field>
    <field name="HEAD" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP HEAD method.]]>
      </doc>
    </field>
    <field name="OPTIONS" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP OPTIONS method.]]>
      </doc>
    </field>
    <field name="PATCH" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP PATCH method.

 @since 1.14]]>
      </doc>
    </field>
    <field name="POST" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP POST method.]]>
      </doc>
    </field>
    <field name="PUT" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP PUT method.]]>
      </doc>
    </field>
    <field name="TRACE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP TRACE method.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[HTTP request method constants specified in <a
 href="http://tools.ietf.org/html/rfc2616#section-5.1.1">RFC 2616 Section 5.1.1</a>.

 @since 1.12
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.HttpMethods -->
  <!-- start class com.google.api.client.http.HttpRequest -->
  <class name="HttpRequest" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getTransport" return="com.google.api.client.http.HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP transport.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getRequestMethod" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP request method or {@code null} for none.

 @since 1.12]]>
      </doc>
    </method>
    <method name="setRequestMethod" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestMethod" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the HTTP request method or {@code null} for none.

 @since 1.12]]>
      </doc>
    </method>
    <method name="getUrl" return="com.google.api.client.http.GenericUrl"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP request URL.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setUrl" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="com.google.api.client.http.GenericUrl"/>
      <doc>
      <![CDATA[Sets the HTTP request URL.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getContent" return="com.google.api.client.http.HttpContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP request content or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setContent" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="content" type="com.google.api.client.http.HttpContent"/>
      <doc>
      <![CDATA[Sets the HTTP request content or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getEncoding" return="com.google.api.client.http.HttpEncoding"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP content encoding or {@code null} for none.

 @since 1.14]]>
      </doc>
    </method>
    <method name="setEncoding" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="encoding" type="com.google.api.client.http.HttpEncoding"/>
      <doc>
      <![CDATA[Sets the HTTP content encoding or {@code null} for none.

 @since 1.14]]>
      </doc>
    </method>
    <method name="getEnableGZipContent" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="(scheduled to be removed in 1.15) Use {@link #getEncoding()} instead.">
      <doc>
      <![CDATA[Returns whether to enable gzip compression of HTTP content.

 @since 1.5
 @deprecated (scheduled to be removed in 1.15) Use {@link #getEncoding()} instead.]]>
      </doc>
    </method>
    <method name="setEnableGZipContent" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="(scheduled to be removed in 1.15) Use {@link #setEncoding(HttpEncoding)} with
             {@link GZipEncoding} instead.">
      <param name="enableGZipContent" type="boolean"/>
      <doc>
      <![CDATA[Returns whether to enable gzip compression of HTTP content.

 <p>
 By default it is {@code false}.
 </p>

 <p>
 To avoid the overhead of GZip compression for small content, one may want to set this to
 {@code true} only for {@link HttpContent#getLength()} above a certain limit. For example:
 </p>

 <pre>
  public static class MyInterceptor implements HttpExecuteInterceptor {
    public void intercept(HttpRequest request) throws IOException {
      if (request.getContent() != null && request.getContent().getLength() >= 256) {
        request.setEnableGZipContent(true);
      }
    }
  }
 </pre>

 <p>
 Warning: this will override any encoding for the request set in
 {@link #setEncoding(HttpEncoding)}
 </p>

 @since 1.5
 @deprecated (scheduled to be removed in 1.15) Use {@link #setEncoding(HttpEncoding)} with
             {@link GZipEncoding} instead.]]>
      </doc>
    </method>
    <method name="getBackOffPolicy" return="com.google.api.client.http.BackOffPolicy"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@link BackOffPolicy} to use between retry attempts or {@code null} for none.

 @since 1.7]]>
      </doc>
    </method>
    <method name="setBackOffPolicy" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="backOffPolicy" type="com.google.api.client.http.BackOffPolicy"/>
      <doc>
      <![CDATA[Sets the {@link BackOffPolicy} to use between retry attempts or {@code null} for none.

 @since 1.7]]>
      </doc>
    </method>
    <method name="getContentLoggingLimit" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the limit to the content size that will be logged during {@link #execute()}.

 <p>
 If the content size is greater than this limit then it will not be logged.
 </p>

 <p>
 Content will only be logged if {@link #isLoggingEnabled} is {@code true}.
 </p>

 <p>
 Can be set to {@code 0} to disable content logging. This is useful for example if content has
 sensitive data such as authentication information.
 </p>

 <p>
 Defaults to 16KB.
 </p>

 @since 1.7]]>
      </doc>
    </method>
    <method name="setContentLoggingLimit" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contentLoggingLimit" type="int"/>
      <doc>
      <![CDATA[Set the limit to the content size that will be logged during {@link #execute()}.

 <p>
 If the content size is greater than this limit then it will not be logged.
 </p>

 <p>
 Content will only be logged if {@link #isLoggingEnabled} is {@code true}.
 </p>

 <p>
 Can be set to {@code 0} to disable content logging. This is useful for example if content has
 sensitive data such as authentication information.
 </p>

 <p>
 Defaults to 16KB.
 </p>

 @since 1.7]]>
      </doc>
    </method>
    <method name="isLoggingEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether logging should be enabled for this request.

 <p>
 Defaults to {@code true}.
 </p>

 @since 1.9]]>
      </doc>
    </method>
    <method name="setLoggingEnabled" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loggingEnabled" type="boolean"/>
      <doc>
      <![CDATA[Sets whether logging should be enabled for this request.

 <p>
 Defaults to {@code true}.
 </p>

 @since 1.9]]>
      </doc>
    </method>
    <method name="isCurlLoggingEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether logging in form of curl commands is enabled for this request.

 @since 1.11]]>
      </doc>
    </method>
    <method name="setCurlLoggingEnabled" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="curlLoggingEnabled" type="boolean"/>
      <doc>
      <![CDATA[Sets whether logging in form of curl commands should be enabled for this request.

 <p>
 Defaults to {@code true}.
 </p>

 @since 1.11]]>
      </doc>
    </method>
    <method name="getConnectTimeout" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the timeout in milliseconds to establish a connection or {@code 0} for an infinite
 timeout.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setConnectTimeout" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="connectTimeout" type="int"/>
      <doc>
      <![CDATA[Sets the timeout in milliseconds to establish a connection or {@code 0} for an infinite
 timeout.

 <p>
 By default it is 20000 (20 seconds).
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getReadTimeout" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the timeout in milliseconds to read data from an established connection or {@code 0}
 for an infinite timeout.

 <p>
 By default it is 20000 (20 seconds).
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="setReadTimeout" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="readTimeout" type="int"/>
      <doc>
      <![CDATA[Sets the timeout in milliseconds to read data from an established connection or {@code 0} for
 an infinite timeout.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getHeaders" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP request headers.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setHeaders" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="headers" type="com.google.api.client.http.HttpHeaders"/>
      <doc>
      <![CDATA[Sets the HTTP request headers.

 <p>
 By default, this is a new unmodified instance of {@link HttpHeaders}.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getResponseHeaders" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP response headers.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setResponseHeaders" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="responseHeaders" type="com.google.api.client.http.HttpHeaders"/>
      <doc>
      <![CDATA[Sets the HTTP response headers.

 <p>
 By default, this is a new unmodified instance of {@link HttpHeaders}.
 </p>

 <p>
 For example, this can be used if you want to use a subclass of {@link HttpHeaders} called
 MyHeaders to process the response:
 </p>

 <pre>
  static String executeAndGetValueOfSomeCustomHeader(HttpRequest request) {
    MyHeaders responseHeaders = new MyHeaders();
    request.responseHeaders = responseHeaders;
    HttpResponse response = request.execute();
    return responseHeaders.someCustomHeader;
  }
 </pre>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getInterceptor" return="com.google.api.client.http.HttpExecuteInterceptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP request execute interceptor to intercept the start of {@link #execute()}
 (before executing the HTTP request) or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setInterceptor" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="interceptor" type="com.google.api.client.http.HttpExecuteInterceptor"/>
      <doc>
      <![CDATA[Sets the HTTP request execute interceptor to intercept the start of {@link #execute()} (before
 executing the HTTP request) or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getUnsuccessfulResponseHandler" return="com.google.api.client.http.HttpUnsuccessfulResponseHandler"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP unsuccessful (non-2XX) response handler or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setUnsuccessfulResponseHandler" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="unsuccessfulResponseHandler" type="com.google.api.client.http.HttpUnsuccessfulResponseHandler"/>
      <doc>
      <![CDATA[Returns the HTTP unsuccessful (non-2XX) response handler or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getResponseInterceptor" return="com.google.api.client.http.HttpResponseInterceptor"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP response interceptor or {@code null} for none.

 @since 1.13]]>
      </doc>
    </method>
    <method name="setResponseInterceptor" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="responseInterceptor" type="com.google.api.client.http.HttpResponseInterceptor"/>
      <doc>
      <![CDATA[Returns the HTTP response interceptor or {@code null} for none.

 @since 1.13]]>
      </doc>
    </method>
    <method name="getNumberOfRetries" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of retries that will be allowed to execute as the result of an
 {@link HttpUnsuccessfulResponseHandler} before being terminated or {@code 0} to not retry
 requests.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setNumberOfRetries" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="numRetries" type="int"/>
      <doc>
      <![CDATA[Returns the number of retries that will be allowed to execute as the result of an
 {@link HttpUnsuccessfulResponseHandler} before being terminated or {@code 0} to not retry
 requests.

 <p>
 The default value is {@code 10}.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="setParser" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parser" type="com.google.api.client.util.ObjectParser"/>
      <doc>
      <![CDATA[Sets the {@link ObjectParser} used to parse the response to this request or {@code null} for
 none.

 <p>
 This parser will be preferred over any registered HttpParser.
 </p>

 @since 1.10]]>
      </doc>
    </method>
    <method name="getParser" return="com.google.api.client.util.ObjectParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@link ObjectParser} used to parse the response or {@code null} for none.

 @since 1.10]]>
      </doc>
    </method>
    <method name="getFollowRedirects" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether to follow redirects automatically.

 @since 1.6]]>
      </doc>
    </method>
    <method name="setFollowRedirects" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="followRedirects" type="boolean"/>
      <doc>
      <![CDATA[Sets whether to follow redirects automatically.

 <p>
 The default value is {@code true}.
 </p>

 @since 1.6]]>
      </doc>
    </method>
    <method name="getThrowExceptionOnExecuteError" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether to throw an exception at the end of {@link #execute()} on an HTTP error code
 (non-2XX) after all retries and response handlers have been exhausted.

 @since 1.7]]>
      </doc>
    </method>
    <method name="setThrowExceptionOnExecuteError" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="throwExceptionOnExecuteError" type="boolean"/>
      <doc>
      <![CDATA[Sets whether to throw an exception at the end of {@link #execute()} on a HTTP error code
 (non-2XX) after all retries and response handlers have been exhausted.

 <p>
 The default value is {@code true}.
 </p>

 @since 1.7]]>
      </doc>
    </method>
    <method name="getRetryOnExecuteIOException" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether to retry the request if an {@link IOException} is encountered in
 {@link LowLevelHttpRequest#execute()}.

 @since 1.9]]>
      </doc>
    </method>
    <method name="setRetryOnExecuteIOException" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="retryOnExecuteIOException" type="boolean"/>
      <doc>
      <![CDATA[Sets whether to retry the request if an {@link IOException} is encountered in
 {@link LowLevelHttpRequest#execute()}.

 <p>
 The default value is {@code false}.
 </p>

 @since 1.9]]>
      </doc>
    </method>
    <method name="getSuppressUserAgentSuffix" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether to not add the suffix {@link #USER_AGENT_SUFFIX} to the User-Agent header.

 @since 1.11]]>
      </doc>
    </method>
    <method name="setSuppressUserAgentSuffix" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="suppressUserAgentSuffix" type="boolean"/>
      <doc>
      <![CDATA[Sets whether to not add the suffix {@link #USER_AGENT_SUFFIX} to the User-Agent header.

 <p>
 The default value is {@code false}.
 </p>

 @since 1.11]]>
      </doc>
    </method>
    <method name="execute" return="com.google.api.client.http.HttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Execute the HTTP request and returns the HTTP response.
 <p>
 Note that regardless of the returned status code, the HTTP response content has not been parsed
 yet, and must be parsed by the calling code.
 <p>
 Almost all details of the request and response are logged if {@link Level#CONFIG} is loggable.
 The only exception is the value of the {@code Authorization} header which is only logged if
 {@link Level#ALL} is loggable.
 <p>
 Callers should call {@link HttpResponse#disconnect} when the returned HTTP response object is
 no longer needed. However, {@link HttpResponse#disconnect} does not have to be called if the
 response stream is properly closed. Example usage:
 </p>

 <pre>
     HttpResponse response = request.execute();
     try {
       // process the HTTP response object
     } finally {
       response.disconnect();
     }
 </pre>

 @return HTTP response for an HTTP success response (or HTTP error response if
         {@link #getThrowExceptionOnExecuteError()} is {@code false})
 @throws HttpResponseException for an HTTP error response (only if
         {@link #getThrowExceptionOnExecuteError()} is {@code true})
 @see HttpResponse#isSuccessStatusCode()]]>
      </doc>
    </method>
    <method name="executeAsync" return="java.util.concurrent.Future&lt;com.google.api.client.http.HttpResponse&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="executor" type="java.util.concurrent.Executor"/>
      <doc>
      <![CDATA[Executes this request asynchronously in a single separate thread using the supplied executor.

 @param executor executor to run the asynchronous request
 @return future for accessing the HTTP response
 @since 1.13]]>
      </doc>
    </method>
    <method name="executeAsync" return="java.util.concurrent.Future&lt;com.google.api.client.http.HttpResponse&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Executes this request asynchronously using {@link #executeAsync(Executor)} in a single separate
 thread using {@link Executors#newSingleThreadExecutor()}.

 @return A future for accessing the results of the asynchronous request.
 @since 1.13]]>
      </doc>
    </method>
    <method name="handleRedirect" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusCode" type="int"/>
      <param name="responseHeaders" type="com.google.api.client.http.HttpHeaders"/>
      <doc>
      <![CDATA[Sets up this request object to handle the necessary redirect if redirects are turned on, it is
 a redirect status code and the header has a location.

 <p>
 When the status code is {@code 303} the method on the request is changed to a GET as per the
 RFC2616 specification. On a redirect, it also removes the {@code "Authorization"} and all
 {@code "If-*"} request headers.
 </p>

 <p>
 Upgrade warning: in prior version 1.13 all request headers were retained, but starting with
 version 1.14 it now removes the {@code "Authorization"} and all {@code "If-*"} request headers.
 </p>

 @return whether the redirect was successful
 @since 1.11]]>
      </doc>
    </method>
    <field name="VERSION" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Current version of the Google API Client Library for Java.

 @since 1.8]]>
      </doc>
    </field>
    <field name="USER_AGENT_SUFFIX" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[User agent suffix for all requests.

 <p>
 Includes a {@code "(gzip)"} suffix in case the server -- as Google's servers may do -- checks
 the {@code User-Agent} header to try to detect if the client accepts gzip-encoded responses.
 </p>

 @since 1.4]]>
      </doc>
    </field>
    <doc>
    <![CDATA[HTTP request.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.HttpRequest -->
  <!-- start class com.google.api.client.http.HttpRequestFactory -->
  <class name="HttpRequestFactory" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getTransport" return="com.google.api.client.http.HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP transport.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getInitializer" return="com.google.api.client.http.HttpRequestInitializer"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP request initializer or {@code null} for none.

 <p>
 This initializer is invoked before setting its method, URL, or content.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="buildRequest" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="requestMethod" type="java.lang.String"/>
      <param name="url" type="com.google.api.client.http.GenericUrl"/>
      <param name="content" type="com.google.api.client.http.HttpContent"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Builds a request for the given HTTP method, URL, and content.

 @param requestMethod HTTP request method
 @param url HTTP request URL or {@code null} for none
 @param content HTTP request content or {@code null} for none
 @return new HTTP request
 @since 1.12]]>
      </doc>
    </method>
    <method name="buildDeleteRequest" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="com.google.api.client.http.GenericUrl"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Builds a {@code DELETE} request for the given URL.

 @param url HTTP request URL or {@code null} for none
 @return new HTTP request]]>
      </doc>
    </method>
    <method name="buildGetRequest" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="com.google.api.client.http.GenericUrl"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Builds a {@code GET} request for the given URL.

 @param url HTTP request URL or {@code null} for none
 @return new HTTP request]]>
      </doc>
    </method>
    <method name="buildPostRequest" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="com.google.api.client.http.GenericUrl"/>
      <param name="content" type="com.google.api.client.http.HttpContent"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Builds a {@code POST} request for the given URL and content.

 @param url HTTP request URL or {@code null} for none
 @param content HTTP request content or {@code null} for none
 @return new HTTP request]]>
      </doc>
    </method>
    <method name="buildPutRequest" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="com.google.api.client.http.GenericUrl"/>
      <param name="content" type="com.google.api.client.http.HttpContent"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Builds a {@code PUT} request for the given URL and content.

 @param url HTTP request URL or {@code null} for none
 @param content HTTP request content or {@code null} for none
 @return new HTTP request]]>
      </doc>
    </method>
    <method name="buildPatchRequest" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="com.google.api.client.http.GenericUrl"/>
      <param name="content" type="com.google.api.client.http.HttpContent"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Builds a {@code PATCH} request for the given URL and content.

 @param url HTTP request URL or {@code null} for none
 @param content HTTP request content or {@code null} for none
 @return new HTTP request]]>
      </doc>
    </method>
    <method name="buildHeadRequest" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="com.google.api.client.http.GenericUrl"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Builds a {@code HEAD} request for the given URL.

 @param url HTTP request URL or {@code null} for none
 @return new HTTP request]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Thread-safe light-weight HTTP request factory layer on top of the HTTP transport that has an
 optional {@link HttpRequestInitializer HTTP request initializer} for initializing requests.

 <p>
 For example, to use a particular authorization header across all requests, use:
 </p>

 <pre>
  public static HttpRequestFactory createRequestFactory(HttpTransport transport) {
    return transport.createRequestFactory(new HttpRequestInitializer() {
      public void initialize(HttpRequest request) throws IOException {
        request.getHeaders().setAuthorization("...");
      }
    });
  }
 </pre>

 @since 1.4
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.HttpRequestFactory -->
  <!-- start interface com.google.api.client.http.HttpRequestInitializer -->
  <interface name="HttpRequestInitializer"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="initialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="com.google.api.client.http.HttpRequest"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Initializes a request.

 @param request HTTP request]]>
      </doc>
    </method>
    <doc>
    <![CDATA[HTTP request initializer.

 <p>
 For example, this might be used to disable request timeouts:
 </p>

 <pre>
  public class DisableTimeout implements HttpRequestInitializer {
    public void initialize(HttpRequest request) {
      request.setConnectTimeout(0);
      request.setReadTimeout(0);
    }
  }
 </pre>

 <p>
 Sample usage with a request factory:
 </p>

 <pre>
  public static HttpRequestFactory createRequestFactory(HttpTransport transport) {
    return transport.createRequestFactory(new DisableTimeout());
  }
 </pre>

 <p>
 More complex usage example:
 </p>

 <pre>
  public static HttpRequestFactory createRequestFactory2(HttpTransport transport) {
    final DisableTimeout disableTimeout = new DisableTimeout();
    return transport.createRequestFactory(new HttpRequestInitializer() {
      public void initialize(HttpRequest request) {
        disableTimeout.initialize(request);
      }
    });
  }
 </pre>

 <p>
 Implementations should normally be thread-safe.
 </p>

 @since 1.4
 @author Yaniv Inbar]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.http.HttpRequestInitializer -->
  <!-- start class com.google.api.client.http.HttpResponse -->
  <class name="HttpResponse" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getContentLoggingLimit" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the limit to the content size that will be logged during {@link #getContent()}.

 <p>
 Content will only be logged if {@link #isLoggingEnabled} is {@code true}.
 </p>

 <p>
 If the content size is greater than this limit then it will not be logged.
 </p>

 <p>
 Can be set to {@code 0} to disable content logging. This is useful for example if content has
 sensitive data such as authentication information.
 </p>

 <p>
 Defaults to {@link HttpRequest#getContentLoggingLimit()}.
 </p>

 @since 1.7]]>
      </doc>
    </method>
    <method name="setContentLoggingLimit" return="com.google.api.client.http.HttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contentLoggingLimit" type="int"/>
      <doc>
      <![CDATA[Set the limit to the content size that will be logged during {@link #getContent()}.

 <p>
 Content will only be logged if {@link #isLoggingEnabled} is {@code true}.
 </p>

 <p>
 If the content size is greater than this limit then it will not be logged.
 </p>

 <p>
 Can be set to {@code 0} to disable content logging. This is useful for example if content has
 sensitive data such as authentication information.
 </p>

 <p>
 Defaults to {@link HttpRequest#getContentLoggingLimit()}.
 </p>

 @since 1.7]]>
      </doc>
    </method>
    <method name="isLoggingEnabled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether logging should be enabled on this response.

 <p>
 Defaults to {@link HttpRequest#isLoggingEnabled()}.
 </p>

 @since 1.9]]>
      </doc>
    </method>
    <method name="setLoggingEnabled" return="com.google.api.client.http.HttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="loggingEnabled" type="boolean"/>
      <doc>
      <![CDATA[Sets whether logging should be enabled on this response.

 <p>
 Defaults to {@link HttpRequest#isLoggingEnabled()}.
 </p>

 @since 1.9]]>
      </doc>
    </method>
    <method name="getContentEncoding" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the content encoding or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getContentType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the content type or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getMediaType" return="com.google.api.client.http.HttpMediaType"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the parsed Content-Type in form of a {@link HttpMediaType} or {@code null} if no
 content-type was set.

 @since 1.10]]>
      </doc>
    </method>
    <method name="getHeaders" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP response headers.

 @since 1.5]]>
      </doc>
    </method>
    <method name="isSuccessStatusCode" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether received a successful HTTP status code {@code >= 200 && < 300} (see
 {@link #getStatusCode()}).

 @since 1.5]]>
      </doc>
    </method>
    <method name="getStatusCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP status code or {@code 0} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getStatusMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP status message or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getTransport" return="com.google.api.client.http.HttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP transport.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getRequest" return="com.google.api.client.http.HttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP request.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getContent" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the content of the HTTP response.
 <p>
 The result is cached, so subsequent calls will be fast.
 <p>
 Callers should call {@link InputStream#close} after the returned {@link InputStream} is no
 longer needed. Example usage:

 <pre>
     InputStream is = response.getContent();
     try {
       // Process the input stream..
     } finally {
       is.close();
     }
 </pre>
 <p>
 {@link HttpResponse#disconnect} does not have to be called if the content is closed.

 @return input stream content of the HTTP response or {@code null} for none
 @throws IOException I/O exception]]>
      </doc>
    </method>
    <method name="download"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outputStream" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes the content of the HTTP response into the given destination output stream.

 <p>
 Sample usage:

 <pre>
     HttpRequest request = requestFactory.buildGetRequest(
         new GenericUrl("https://www.google.com/images/srpr/logo3w.png"));
     OutputStream outputStream = new FileOutputStream(new File("/tmp/logo3w.png"));
     try {
       HttpResponse response = request.execute();
       response.download(outputStream);
     } finally {
       outputStream.close();
     }
    </pre>

 </p>

 <p>
 This method closes the content of the HTTP response from {@link #getContent()}.
 </p>

 <p>
 This method does not close the given output stream.
 </p>

 @param outputStream destination output stream
 @throws IOException I/O exception
 @since 1.9]]>
      </doc>
    </method>
    <method name="ignore"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Closes the content of the HTTP response from {@link #getContent()}, ignoring any content.]]>
      </doc>
    </method>
    <method name="disconnect"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Close the HTTP response content using {@link #ignore}, and disconnect using
 {@link LowLevelHttpResponse#disconnect()}.

 @since 1.4]]>
      </doc>
    </method>
    <method name="parseAs" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses the content of the HTTP response from {@link #getContent()} and reads it into a data
 class of key/value pairs using the parser returned by {@link HttpRequest#getParser()}.

 <p>
 <b>Reference:</b> http://tools.ietf.org/html/rfc2616#section-4.3
 </p>

 @return parsed data class or {@code null} for no content]]>
      </doc>
    </method>
    <method name="parseAs" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataType" type="java.lang.reflect.Type"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses the content of the HTTP response from {@link #getContent()} and reads it into a data
 type of key/value pairs using the parser returned by {@link HttpRequest#getParser()}.

 @return parsed data type instance or {@code null} for no content
 @since 1.10]]>
      </doc>
    </method>
    <method name="parseAsString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses the content of the HTTP response from {@link #getContent()} and reads it into a string.

 <p>
 Since this method returns {@code ""} for no content, a simpler check for no content is to check
 if {@link #getContent()} is {@code null}.
 </p>

 <p>
 All content is read from the input content stream rather than being limited by the
 Content-Length. For the character set, it follows the specification by parsing the "charset"
 parameter of the Content-Type header or by default {@code "ISO-8859-1"} if the parameter is
 missing.
 </p>

 @return parsed string or {@code ""} for no content
 @throws IOException I/O exception]]>
      </doc>
    </method>
    <method name="getContentCharset" return="java.nio.charset.Charset"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the {@link Charset} specified in the Content-Type of this response or the
 {@code "ISO-8859-1"} charset as a default.

 @since 1.10]]>
      </doc>
    </method>
    <doc>
    <![CDATA[HTTP response.

 <p>
 Callers should call {@link #disconnect} when the HTTP response object is no longer needed.
 However, {@link #disconnect} does not have to be called if the response stream is properly
 closed. Example usage:
 </p>

 <pre>
   HttpResponse response = request.execute();
   try {
     // process the HTTP response object
   } finally {
     response.disconnect();
   }
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.HttpResponse -->
  <!-- start class com.google.api.client.http.HttpResponseException -->
  <class name="HttpResponseException" extends="java.io.IOException"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="HttpResponseException" type="com.google.api.client.http.HttpResponse"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor that constructs a detail message from the given HTTP response that includes the
 status code, status message and HTTP response content.

 <p>
 Callers of this constructor should call {@link HttpResponse#disconnect} after
 {@link HttpResponseException} is instantiated. Example usage:
 </p>

 <pre>
     try {
       throw new HttpResponseException(response);
     } finally {
       response.disconnect();
     }
 </pre>

 @param response HTTP response]]>
      </doc>
    </constructor>
    <constructor name="HttpResponseException" type="com.google.api.client.http.HttpResponse, java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="(scheduled to be removed in 1.15) Use {@link #HttpResponseException(Builder)}
             instead">
      <doc>
      <![CDATA[Constructor that allows an alternative detail message to be used.

 <p>
 Callers of this constructor should call {@link HttpResponse#disconnect} after
 {@link HttpResponseException} is instantiated. Example usage:
 </p>

 <pre>
     try {
       throw new HttpResponseException(response, message);
     } finally {
       response.disconnect();
     }
 </pre>

 @param response HTTP response
 @param message detail message to use or {@code null} for none
 @since 1.6
 @deprecated (scheduled to be removed in 1.15) Use {@link #HttpResponseException(Builder)}
             instead]]>
      </doc>
    </constructor>
    <constructor name="HttpResponseException" type="com.google.api.client.http.HttpResponseException.Builder"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param builder builder

 @since 1.14]]>
      </doc>
    </constructor>
    <method name="isSuccessStatusCode" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether received a successful HTTP status code {@code >= 200 && < 300} (see
 {@link #getStatusCode()}).

 @since 1.7]]>
      </doc>
    </method>
    <method name="getStatusCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP status code or {@code 0} for none.

 @since 1.7]]>
      </doc>
    </method>
    <method name="getStatusMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP status message or {@code null} for none.

 @since 1.9]]>
      </doc>
    </method>
    <method name="getHeaders" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP response headers.

 @since 1.7]]>
      </doc>
    </method>
    <method name="getContent" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP response content or {@code null} for none.

 @since 1.14]]>
      </doc>
    </method>
    <method name="computeMessageBuffer" return="java.lang.StringBuilder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="response" type="com.google.api.client.http.HttpResponse"/>
      <doc>
      <![CDATA[Returns an exception message string builder to use for the given HTTP response.

 @since 1.7]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Exception thrown when an error status code is detected in an HTTP response.

 <p>
 Implementation is not thread safe.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.HttpResponseException -->
  <!-- start class com.google.api.client.http.HttpResponseException.Builder -->
  <class name="HttpResponseException.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="HttpResponseException.Builder" type="int, java.lang.String, com.google.api.client.http.HttpHeaders"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param statusCode HTTP status code
 @param statusMessage status message or {@code null}
 @param headers HTTP headers]]>
      </doc>
    </constructor>
    <constructor name="HttpResponseException.Builder" type="com.google.api.client.http.HttpResponse"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param response HTTP response]]>
      </doc>
    </constructor>
    <method name="getMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the detail message to use or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setMessage" return="com.google.api.client.http.HttpResponseException.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="message" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the detail message to use or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getStatusCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP status code or {@code 0} for none.]]>
      </doc>
    </method>
    <method name="setStatusCode" return="com.google.api.client.http.HttpResponseException.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusCode" type="int"/>
      <doc>
      <![CDATA[Sets the HTTP status code or {@code 0} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getStatusMessage" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP status message or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setStatusMessage" return="com.google.api.client.http.HttpResponseException.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusMessage" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the HTTP status message or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getHeaders" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP response headers.]]>
      </doc>
    </method>
    <method name="setHeaders" return="com.google.api.client.http.HttpResponseException.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="headers" type="com.google.api.client.http.HttpHeaders"/>
      <doc>
      <![CDATA[Sets the HTTP response headers.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getContent" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP response content or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setContent" return="com.google.api.client.http.HttpResponseException.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="content" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the HTTP response content or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="build" return="com.google.api.client.http.HttpResponseException"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new instance of {@link HttpResponseException} based on this builder.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Builder.

 <p>
 Implementation is not thread safe.
 </p>


 @since 1.14]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.HttpResponseException.Builder -->
  <!-- start interface com.google.api.client.http.HttpResponseInterceptor -->
  <interface name="HttpResponseInterceptor"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="interceptResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="response" type="com.google.api.client.http.HttpResponse"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Invoked at the end of {@link HttpRequest#execute()} before returning a successful response or
 throwing an exception for an unsuccessful response.

 <p>
 Do not read from the content stream unless you intend to throw an exception. Otherwise, it
 would prevent the caller of {@link HttpRequest#execute()} to be able to read the stream from
 {@link HttpResponse#getContent()}. If you intend to throw an exception, you should parse the
 response, or alternatively pass the response as part of the exception.
 </p>

 @param response HTTP response]]>
      </doc>
    </method>
    <doc>
    <![CDATA[HTTP response interceptor to intercept the end of {@link HttpRequest#execute()} before returning
 a successful response or throwing an exception for an unsuccessful response.

 <p>
 For example, this might be used to add a simple timer on requests:
 </p>

 <pre>
  public static class TimerResponseInterceptor implements HttpResponseInterceptor {

    private final long startTime = System.nanoTime();

    public void interceptResponse(HttpResponse response) {
      long elapsedNanos = System.nanoTime() - startTime;
      System.out.println("elapsed seconds: " + TimeUnit.NANOSECONDS.toSeconds(elapsedNanos) + "s");
    }
  }
 </pre>

 <p>
 Sample usage with a request factory:
 </p>

 <pre>
  public static HttpRequestFactory createRequestFactory(HttpTransport transport) {
    return transport.createRequestFactory(new HttpRequestInitializer() {

      {@literal @}Override
      public void initialize(HttpRequest request) {
        request.setResponseInterceptor(new TimerResponseInterceptor());
      }
    });
  }
 </pre>

 <p>
 More complex usage example:
 </p>

 <pre>
  public static HttpRequestFactory createRequestFactory2(HttpTransport transport) {
    final HttpResponseInterceptor responseInterceptor = new TimerResponseInterceptor();
    return transport.createRequestFactory(new HttpRequestInitializer() {

      public void initialize(HttpRequest request) {
        request.setResponseInterceptor(new HttpResponseInterceptor() {

          public void interceptResponse(HttpResponse response) throws IOException {
            responseInterceptor.interceptResponse(response);
          }
        });
      }
    });
  }
 </pre>

 <p>
 Implementations should normally be thread-safe.
 </p>

 @author Yaniv Inbar
 @since 1.13]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.http.HttpResponseInterceptor -->
  <!-- start class com.google.api.client.http.HttpStatusCodes -->
  <class name="HttpStatusCodes" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="HttpStatusCodes"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="isSuccess" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusCode" type="int"/>
      <doc>
      <![CDATA[Returns whether the given HTTP response status code is a success code {@code >= 200 and < 300}.]]>
      </doc>
    </method>
    <method name="isRedirect" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusCode" type="int"/>
      <doc>
      <![CDATA[Returns whether the given HTTP response status code is a redirect code
 {@code 301, 302, 303, 307}.

 @since 1.11]]>
      </doc>
    </method>
    <field name="STATUS_CODE_OK" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Status code for a successful request.]]>
      </doc>
    </field>
    <field name="STATUS_CODE_NO_CONTENT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Status code for a successful request with no content information.

 @since 1.11]]>
      </doc>
    </field>
    <field name="STATUS_CODE_MULTIPLE_CHOICES" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Status code for a resource corresponding to any one of a set of representations.]]>
      </doc>
    </field>
    <field name="STATUS_CODE_MOVED_PERMANENTLY" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Status code for a resource that has permanently moved to a new URI.]]>
      </doc>
    </field>
    <field name="STATUS_CODE_FOUND" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Status code for a resource that has temporarily moved to a new URI.]]>
      </doc>
    </field>
    <field name="STATUS_CODE_SEE_OTHER" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Status code for a resource that has moved to a new URI and should be retrieved using GET.]]>
      </doc>
    </field>
    <field name="STATUS_CODE_NOT_MODIFIED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Status code for a resource that access is allowed but the document has not been modified.]]>
      </doc>
    </field>
    <field name="STATUS_CODE_TEMPORARY_REDIRECT" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Status code for a resource that has temporarily moved to a new URI.]]>
      </doc>
    </field>
    <field name="STATUS_CODE_UNAUTHORIZED" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Status code for a request that requires user authentication.]]>
      </doc>
    </field>
    <field name="STATUS_CODE_FORBIDDEN" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Status code for a server that understood the request, but is refusing to fulfill it.]]>
      </doc>
    </field>
    <field name="STATUS_CODE_NOT_FOUND" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Status code for a server that has not found anything matching the Request-URI.]]>
      </doc>
    </field>
    <field name="STATUS_CODE_SERVER_ERROR" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Status code for an internal server error.]]>
      </doc>
    </field>
    <field name="STATUS_CODE_SERVICE_UNAVAILABLE" type="int"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Status code for a service that is unavailable on the server.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Constants enumerating the HTTP status codes. Includes status codes specified in <a
 href="http://tools.ietf.org/html/rfc2616#section-10.3">RFC2616</a> (HTTP/1.1).

 @since 1.6
 @author Ravi Mistry]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.HttpStatusCodes -->
  <!-- start class com.google.api.client.http.HttpTransport -->
  <class name="HttpTransport" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="HttpTransport"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="createRequestFactory" return="com.google.api.client.http.HttpRequestFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new instance of an HTTP request factory based on this HTTP transport.

 @return new instance of an HTTP request factory
 @since 1.4]]>
      </doc>
    </method>
    <method name="createRequestFactory" return="com.google.api.client.http.HttpRequestFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="initializer" type="com.google.api.client.http.HttpRequestInitializer"/>
      <doc>
      <![CDATA[Returns a new instance of an HTTP request factory based on this HTTP transport with the given
 HTTP request initializer.

 @param initializer HTTP request initializer or {@code null} for none
 @return new instance of an HTTP request factory
 @since 1.4]]>
      </doc>
    </method>
    <method name="supportsMethod" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="method" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns whether a specified HTTP method is supported by this transport.

 <p>
 Default implementation returns true if and only if the request method is {@code "DELETE"},
 {@code "GET"}, {@code "POST"}, or {@code "PUT"}. Subclasses should override.
 </p>

 @param method HTTP method
 @throws IOException I/O exception
 @since 1.12]]>
      </doc>
    </method>
    <method name="buildRequest" return="com.google.api.client.http.LowLevelHttpRequest"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="method" type="java.lang.String"/>
      <param name="url" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Builds a low level HTTP request for the given HTTP method.

 @param method HTTP method
 @param url URL
 @return new low level HTTP request
 @throws IllegalArgumentException if HTTP method is not supported
 @since 1.12]]>
      </doc>
    </method>
    <method name="shutdown"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Default implementation does nothing, but subclasses may override to possibly release allocated
 system resources or close connections.

 @throws IOException I/O exception
 @since 1.4]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Thread-safe abstract HTTP transport.

 <p>
 Implementation is thread-safe, and sub-classes must be thread-safe. For maximum efficiency,
 applications should use a single globally-shared instance of the HTTP transport.
 </p>

 <p>
 The recommended concrete implementation HTTP transport library to use depends on what environment
 you are running in:
 </p>
 <ul>
 <li>Google App Engine: use
 {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}.
 <ul>
 <li>{@code com.google.api.client.apache.ApacheHttpTransport} doesn't work on App Engine because
 the Apache HTTP Client opens its own sockets (though in theory there are ways to hack it to work
 on App Engine that might work).</li>
 <li>{@code com.google.api.client.javanet.NetHttpTransport} is discouraged due to a bug in the App
 Engine SDK itself in how it parses HTTP headers in the response.</li>
 </ul>
 </li>
 <li>Android:
 <ul>
 <li>For maximum backwards compatibility with older SDK's use {@code newCompatibleTransport} from
 {@code com.google.api.client.extensions.android.http.AndroidHttp} (read its JavaDoc for details).
 </li>
 <li>If your application is targeting Gingerbread (SDK 2.3) or higher, simply use
 {@code com.google.api.client.javanet.NetHttpTransport}.</li>
 </ul>
 </li>
 <li>Other Java environments
 <ul>
 <li>{@code com.google.api.client.javanet.NetHttpTransport} is based on the HttpURLConnection
 built into the Java SDK, so it is normally the preferred choice.</li>
 <li>{@code com.google.api.client.apache.ApacheHttpTransport} is a good choice for users of the
 Apache HTTP Client, especially if you need some of the configuration options available in that
 library.</li>
 </ul>
 </li>
 </ul>

 <p>
 Some HTTP transports do not support all HTTP methods. Use {@link #supportsMethod(String)} to
 check if a certain HTTP method is supported. Calling {@link #buildRequest()} on a method that is
 not supported will result in an {@link IllegalArgumentException}.
 </p>

 <p>
 Subclasses should override {@link #supportsMethod(String)} and
 {@link #buildRequest(String, String)} to build requests and specify which HTTP methods are
 supported.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.HttpTransport -->
  <!-- start interface com.google.api.client.http.HttpUnsuccessfulResponseHandler -->
  <interface name="HttpUnsuccessfulResponseHandler"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="handleResponse" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="com.google.api.client.http.HttpRequest"/>
      <param name="response" type="com.google.api.client.http.HttpResponse"/>
      <param name="supportsRetry" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Handler that will be invoked when an abnormal response is received. There are a few simple
 rules that one must follow:
 <ul>
 <li>If you modify the request object or modify its execute interceptors in a way that should
 resolve the error, you must return true to issue a retry.</li>
 <li>Do not read from the content stream, this will prevent the eventual end user from having
 access to it.</li>
 </ul>

 @param request Request object that can be read from for context or modified before retry
 @param response Response to process
 @param supportsRetry Whether there will actually be a retry if this handler return {@code
        true}. Some handlers may want to have an effect only when there will actually be a retry
        after they handle their event (e.g. a handler that implements exponential backoff).
 @return Whether or not this handler has made a change that will require the request to be
         re-sent.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Interface which handles abnormal HTTP responses (in other words not 2XX).

 <p>
 For example, this might be used to refresh an OAuth 2 token:
 </p>

 <pre>
  public static class RefreshTokenHandler implements HttpUnsuccessfulResponseHandler {
    public boolean handleResponse(
        HttpRequest request, HttpResponse response, boolean retrySupported) throws IOException {
      if (response.getStatusCode() == HttpStatusCodes.STATUS_CODE_UNAUTHORIZED) {
        refreshToken();
      }
      return false;
    }
  }
 </pre>

 <p>
 Sample usage with a request factory:
 </p>

 <pre>
  public static HttpRequestFactory createRequestFactory(HttpTransport transport) {
    final RefreshTokenHandler handler = new RefreshTokenHandler();
    return transport.createRequestFactory(new HttpRequestInitializer() {
      public void initialize(HttpRequest request) {
        request.setUnsuccessfulResponseHandler(handler);
      }
    });
  }
 </pre>

 <p>
 More complex usage example:
 </p>

 <pre>
  public static HttpRequestFactory createRequestFactory2(HttpTransport transport) {
    final RefreshTokenHandler handler = new RefreshTokenHandler();
    return transport.createRequestFactory(new HttpRequestInitializer() {
      public void initialize(HttpRequest request) {
        request.setUnsuccessfulResponseHandler(new HttpUnsuccessfulResponseHandler() {
          public boolean handleResponse(
              HttpRequest request, HttpResponse response, boolean retrySupported)
              throws IOException {
            return handler.handleResponse(request, response, retrySupported);
          }
        });
      }
    });
  }
 </pre>

 <p>
 Implementations should normally be thread-safe.
 </p>

 @author moshenko@google.com (Jacob Moshenko)
 @since 1.4]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.http.HttpUnsuccessfulResponseHandler -->
  <!-- start class com.google.api.client.http.InputStreamContent -->
  <class name="InputStreamContent" extends="com.google.api.client.http.AbstractInputStreamContent"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="InputStreamContent" type="java.lang.String, java.io.InputStream"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param type Content type or {@code null} for none
 @param inputStream Input stream to read from
 @since 1.5]]>
      </doc>
    </constructor>
    <method name="getLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="retrySupported" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setRetrySupported" return="com.google.api.client.http.InputStreamContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="retrySupported" type="boolean"/>
      <doc>
      <![CDATA[Sets whether or not retry is supported. Defaults to {@code false}.

 <p>
 Should be set to {@code true} if {@link #getInputStream} is called to reset to the original
 position of the input stream.
 </p>

 @since 1.7]]>
      </doc>
    </method>
    <method name="getInputStream" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setEncoding" return="com.google.api.client.http.InputStreamContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="encoding" type="java.lang.String"/>
    </method>
    <method name="setType" return="com.google.api.client.http.InputStreamContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.String"/>
    </method>
    <method name="setCloseInputStream" return="com.google.api.client.http.InputStreamContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="closeInputStream" type="boolean"/>
    </method>
    <method name="setLength" return="com.google.api.client.http.InputStreamContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="length" type="long"/>
      <doc>
      <![CDATA[Sets the content length or less than zero if not known.

 <p>
 Defaults to {@code -1}.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Concrete implementation of {@link AbstractInputStreamContent} that simply handles the transfer of
 data from an input stream to an output stream. This should only be used for streams that can not
 be re-opened and retried. If you have a stream that it is possible to recreate please create a
 new subclass of {@link AbstractInputStreamContent}.

 <p>
 The input stream is guaranteed to be closed at the end of {@link #writeTo(OutputStream)}.
 </p>

 <p>
 Sample use with a URL:

 <pre>
 <code>
  private static void setRequestJpegContent(HttpRequest request, URL jpegUrl) throws IOException {
    request.setContent(new InputStreamContent("image/jpeg", jpegUrl.openStream()));
  }
 </code>
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.InputStreamContent -->
  <!-- start class com.google.api.client.http.LowLevelHttpRequest -->
  <class name="LowLevelHttpRequest" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LowLevelHttpRequest"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="addHeader"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Adds a header to the HTTP request.

 <p>
 Note that multiple headers of the same name need to be supported, in which case
 {@link #addHeader} will be called for each instance of the header.
 </p>

 @param name header name
 @param value header value]]>
      </doc>
    </method>
    <method name="setContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="(scheduled to be removed in 1.15) Use {@link #setContentLength(long)},
             {@link #setContentEncoding(String)}, {@link #setContentType(String)}, and
             {@link #setStreamingContent(StreamingContent)} instead.">
      <param name="content" type="com.google.api.client.http.HttpContent"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sets the HTTP request content.

 <p>Default implementation does nothing.</p>

 @throws IOException I/O exception
 @deprecated (scheduled to be removed in 1.15) Use {@link #setContentLength(long)},
             {@link #setContentEncoding(String)}, {@link #setContentType(String)}, and
             {@link #setStreamingContent(StreamingContent)} instead.]]>
      </doc>
    </method>
    <method name="setContentLength"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="contentLength" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sets the content length or less than zero if not known.

 <p>
 Default value is {@code -1}.
 </p>

 @throws IOException I/O exception
 @since 1.14]]>
      </doc>
    </method>
    <method name="getContentLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the content length or less than zero if not known.

 @since 1.14]]>
      </doc>
    </method>
    <method name="setContentEncoding"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="contentEncoding" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sets the content encoding (for example {@code "gzip"}) or {@code null} for none.

 @throws IOException I/O exception
 @since 1.14]]>
      </doc>
    </method>
    <method name="getContentEncoding" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the content encoding (for example {@code "gzip"}) or {@code null} for none.

 @since 1.14]]>
      </doc>
    </method>
    <method name="setContentType"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="contentType" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sets the content type or {@code null} for none.

 @throws IOException I/O exception
 @since 1.14]]>
      </doc>
    </method>
    <method name="getContentType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the content type or {@code null} for none.

 @since 1.14]]>
      </doc>
    </method>
    <method name="setStreamingContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="streamingContent" type="com.google.api.client.util.StreamingContent"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sets the streaming content or {@code null} for no content.

 @throws IOException I/O exception
 @since 1.14]]>
      </doc>
    </method>
    <method name="getStreamingContent" return="com.google.api.client.util.StreamingContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the streaming content or {@code null} for no content.

 @since 1.14]]>
      </doc>
    </method>
    <method name="setTimeout"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="connectTimeout" type="int"/>
      <param name="readTimeout" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sets the connection and read timeouts.

 <p>
 Default implementation does nothing, but subclasses should normally override.
 </p>

 @param connectTimeout timeout in milliseconds to establish a connection or {@code 0} for an
        infinite timeout
 @param readTimeout Timeout in milliseconds to read data from an established connection or
        {@code 0} for an infinite timeout
 @throws IOException I/O exception
 @since 1.4]]>
      </doc>
    </method>
    <method name="execute" return="com.google.api.client.http.LowLevelHttpResponse"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Executes the request and returns a low-level HTTP response object.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Low-level HTTP request.

 <p>
 This allows providing a different implementation of the HTTP request that is more compatible with
 the Java environment used.
 </p>

 <p>
 Implementation has no fields and therefore thread-safe, but sub-classes are not necessarily
 thread-safe.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.LowLevelHttpRequest -->
  <!-- start class com.google.api.client.http.LowLevelHttpResponse -->
  <class name="LowLevelHttpResponse" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LowLevelHttpResponse"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getContent" return="java.io.InputStream"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the HTTP response content input stream or {@code null} for none.

 @throws IOException I/O exception]]>
      </doc>
    </method>
    <method name="getContentEncoding" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the content encoding (for example {@code "gzip"}) or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getContentLength" return="long"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the content length or {@code 0} for none.]]>
      </doc>
    </method>
    <method name="getContentType" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the content type or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getStatusLine" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the response status line or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getStatusCode" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the response status code or {@code 0} for none.]]>
      </doc>
    </method>
    <method name="getReasonPhrase" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the HTTP reason phrase or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getHeaderCount" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the number of HTTP response headers.

 <p>
 Note that multiple headers of the same name need to be supported, in which case each header
 value is treated as a separate header.
 </p>]]>
      </doc>
    </method>
    <method name="getHeaderName" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the HTTP response header name at the given zero-based index.]]>
      </doc>
    </method>
    <method name="getHeaderValue" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the HTTP response header value at the given zero-based index.]]>
      </doc>
    </method>
    <method name="disconnect"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Default implementation does nothing, but subclasses may override to attempt to abort the
 connection or release allocated system resources for this connection.

 @throws IOException I/O exception
 @since 1.4]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Low-level HTTP response.

 <p>
 This allows providing a different implementation of the HTTP response that is more compatible
 with the Java environment used.
 </p>

 <p>
 Implementation has no fields and therefore thread-safe, but sub-classes are not necessarily
 thread-safe.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.LowLevelHttpResponse -->
  <!-- start class com.google.api.client.http.MultipartContent -->
  <class name="MultipartContent" extends="com.google.api.client.http.AbstractHttpContent"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MultipartContent"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="retrySupported" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setMediaType" return="com.google.api.client.http.MultipartContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mediaType" type="com.google.api.client.http.HttpMediaType"/>
    </method>
    <method name="getParts" return="java.util.Collection&lt;com.google.api.client.http.MultipartContent.Part&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an unmodifiable view of the parts of the HTTP multipart request.]]>
      </doc>
    </method>
    <method name="addPart" return="com.google.api.client.http.MultipartContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="part" type="com.google.api.client.http.MultipartContent.Part"/>
      <doc>
      <![CDATA[Adds an HTTP multipart part.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="setParts" return="com.google.api.client.http.MultipartContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parts" type="java.util.Collection&lt;com.google.api.client.http.MultipartContent.Part&gt;"/>
      <doc>
      <![CDATA[Sets the parts of the HTTP multipart request.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="setContentParts" return="com.google.api.client.http.MultipartContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contentParts" type="java.util.Collection&lt;? extends com.google.api.client.http.HttpContent&gt;"/>
      <doc>
      <![CDATA[Sets the HTTP content parts of the HTTP multipart request, where each part is assumed to have
 no HTTP headers and no encoding.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getBoundary" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the boundary string to use.]]>
      </doc>
    </method>
    <method name="setBoundary" return="com.google.api.client.http.MultipartContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="boundary" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the boundary string to use.

 <p>
 Defaults to {@code "END_OF_PART"}.
 </p>

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Serializes MIME multipart content as specified by <a
 href="http://tools.ietf.org/html/rfc2387">RFC 2387: The MIME Multipart/Related Content-type</a>
 and <a href="http://tools.ietf.org/html/rfc1521#section-7.2.2">RFC 2046: Multipurpose Internet
 Mail Extensions: The Multipart/mixed (primary) subtype</a>.

 <p>
 By default the media type is {@code "multipart/related; boundary=__END_OF_PART__"}, but this may
 be customized by calling {@link #setMediaType(HttpMediaType)}, {@link #getMediaType()}, or
 {@link #setBoundary(String)}.
 </p>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.MultipartContent -->
  <!-- start class com.google.api.client.http.MultipartContent.Part -->
  <class name="MultipartContent.Part" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="MultipartContent.Part"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="MultipartContent.Part" type="com.google.api.client.http.HttpContent"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param content HTTP content or {@code null} for none]]>
      </doc>
    </constructor>
    <constructor name="MultipartContent.Part" type="com.google.api.client.http.HttpHeaders, com.google.api.client.http.HttpContent"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param headers HTTP headers or {@code null} for none
 @param content HTTP content or {@code null} for none]]>
      </doc>
    </constructor>
    <method name="setContent" return="com.google.api.client.http.MultipartContent.Part"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="content" type="com.google.api.client.http.HttpContent"/>
      <doc>
      <![CDATA[Sets the HTTP content or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getContent" return="com.google.api.client.http.HttpContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP content or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setHeaders" return="com.google.api.client.http.MultipartContent.Part"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="headers" type="com.google.api.client.http.HttpHeaders"/>
      <doc>
      <![CDATA[Sets the HTTP headers or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getHeaders" return="com.google.api.client.http.HttpHeaders"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP headers or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setEncoding" return="com.google.api.client.http.MultipartContent.Part"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="encoding" type="com.google.api.client.http.HttpEncoding"/>
      <doc>
      <![CDATA[Sets the HTTP encoding or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getEncoding" return="com.google.api.client.http.HttpEncoding"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP encoding or {@code null} for none.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Single part of a multi-part request.

 <p>
 Implementation is not thread-safe.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.MultipartContent.Part -->
  <!-- start class com.google.api.client.http.MultipartRelatedContent -->
  <class name="MultipartRelatedContent" extends="com.google.api.client.http.AbstractHttpContent"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="(scheduled to be removed in 1.15) Use {@link MultipartContent} instead.">
    <constructor name="MultipartRelatedContent" type="com.google.api.client.http.HttpContent, com.google.api.client.http.HttpContent[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param firstPart first HTTP content part
 @param otherParts other HTTP content parts
 @since 1.5]]>
      </doc>
    </constructor>
    <method name="forRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="com.google.api.client.http.HttpRequest"/>
      <doc>
      <![CDATA[Sets this multi-part content as the content for the given HTTP request, and set the
 {@link HttpHeaders#setMimeVersion(String) MIME version header} to {@code "1.0"}.

 @param request HTTP request
 @since 1.5]]>
      </doc>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="computeLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="retrySupported" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="setMediaType" return="com.google.api.client.http.MultipartRelatedContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mediaType" type="com.google.api.client.http.HttpMediaType"/>
    </method>
    <method name="getBoundary" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the boundary string to use.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setBoundary" return="com.google.api.client.http.MultipartRelatedContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="boundary" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the boundary string to use.

 <p>
 Defaults to {@code "END_OF_PART"}.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getParts" return="java.util.Collection&lt;com.google.api.client.http.HttpContent&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP content parts.

 @since 1.5]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Serializes MIME Multipart/Related content as specified by <a
 href="http://tools.ietf.org/html/rfc2387">RFC 2387: The MIME Multipart/Related Content-type</a>.
 <p>
 Limitations:
 <ul>
 <li>No support of parameters other than {@code "boundary"}</li>
 <li>No support for specifying headers for each content part</li>
 <li>The content type of each part is required, so {@link HttpContent#getType()} must not be
 {@code null}</li>
 </ul>
 </p>
 <p>
 Use {@link #forRequest(HttpRequest)} to construct. For example:

 <pre><code>
  static void setMediaWithMetadataContent(
      HttpRequest request, AtomContent atomContent, InputStreamContent imageContent) {
    MultipartRelatedContent.forRequest(request, atomContent, imageContent);
  }
 </code></pre>
 </p>

 <p>
 {@link #writeTo} can be called multiple times for Multipart/Related content. Parts must not
 close the output stream in {@link #writeTo}.
 </p>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.1
 @author Yaniv Inbar
 @deprecated (scheduled to be removed in 1.15) Use {@link MultipartContent} instead.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.MultipartRelatedContent -->
  <!-- start class com.google.api.client.http.UriTemplate -->
  <class name="UriTemplate" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="UriTemplate"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="expand" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="baseUrl" type="java.lang.String"/>
      <param name="uriTemplate" type="java.lang.String"/>
      <param name="parameters" type="java.lang.Object"/>
      <param name="addUnusedParamsAsQueryParams" type="boolean"/>
      <doc>
      <![CDATA[Expands templates in a URI template that is relative to a base URL.

 <p>
 If the URI template starts with a "/" the raw path from the base URL is stripped out. If the
 URI template is a full URL then it is used instead of the base URL.
 </p>

 <p>
 Supports Level 1 templates and all Level 4 composite templates as described in:
 <a href="http://tools.ietf.org/html/draft-gregorio-uritemplate-07">URI Template</a>.
 </p>

 @param baseUrl The base URL which the URI component is relative to.
 @param uriTemplate URI component. It may contain one or more sequences of the form "{name}",
        where "name" must be a key in variableMap.
 @param parameters an object with parameters designated by Key annotations. If the template has
        no variable references, parameters may be {@code null}.
 @param addUnusedParamsAsQueryParams If true then parameters that do not match the template are
        appended to the expanded template as query parameters.
 @return The expanded template
 @since 1.7]]>
      </doc>
    </method>
    <method name="expand" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="pathUri" type="java.lang.String"/>
      <param name="parameters" type="java.lang.Object"/>
      <param name="addUnusedParamsAsQueryParams" type="boolean"/>
      <doc>
      <![CDATA[Expands templates in a URI.

 <p>
 Supports Level 1 templates and all Level 4 composite templates as described in:
 <a href="http://tools.ietf.org/html/draft-gregorio-uritemplate-07">URI Template</a>.
 </p>

 @param pathUri URI component. It may contain one or more sequences of the form "{name}", where
        "name" must be a key in variableMap
 @param parameters an object with parameters designated by Key annotations. If the template has
        no variable references, parameters may be {@code null}.
 @param addUnusedParamsAsQueryParams If true then parameters that do not match the template are
        appended to the expanded template as query parameters.
 @return The expanded template
 @since 1.6]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Expands URI Templates.

 This Class supports Level 1 templates and all Level 4 composite templates as described in:
 <a href="http://tools.ietf.org/html/draft-gregorio-uritemplate-07">URI Template</a>.

 Specifically, for the variables:
 var := "value"
 list := ["red", "green", "blue"]
 keys := [("semi", ";"),("dot", "."),("comma", ",")]

 The following templates results in the following expansions:
 {var}     ->   value
 {list}    ->   red,green,blue
 {list*}   ->   red,green,blue
 {key}     ->   semi,%3B,dot,.,comma,%2C
 {key*}    ->   semi=%3B,dot=.,comma=%2C
 {+list}   ->   red,green,blue
 {+list*}  ->   red,green,blue
 {+key}    ->   semi,;,dot,.,comma,,
 {+key*}   ->   semi=;,dot=.,comma=,
 {#list}   ->   #red,green,blue
 {#list*}  ->   #red,green,blue
 {#key}    ->   #semi,;,dot,.,comma,,
 {#key*}   ->   #semi=;,dot=.,comma=,
 X{.list}  ->   X.red,green,blue
 X{.list*} ->   X.red.green.blue
 X{.key} -  >   X.semi,%3B,dot,.,comma,%2C
 X{.key*}  ->   X.semi=%3B.dot=..comma=%2C
 {/list}   ->   /red,green,blue
 {/list*}  ->   /red/green/blue
 {/key}    ->   /semi,%3B,dot,.,comma,%2C
 {/key*}   ->   /semi=%3B/dot=./comma=%2C
 {;list}   ->   ;list=red,green,blue
 {;list*}  ->   ;red;green;blue
 {;key}    ->   ;keys=semi,%3B,dot,.,comma,%2C
 {;key*}   ->   ;semi=%3B;dot=.;comma=%2C
 {?list}   ->   ?list=red,green,blue
 {?list*}  ->   ?red&green&blue
 {?key}    ->   ?keys=semi,%3B,dot,.,comma,%2C
 {?key*}   ->   ?semi=%3B&dot=.&comma=%2C
 {&list}   ->   &list=red,green,blue
 {&list*}  ->   &red&green&blue
 {&key}    ->   &keys=semi,%3B,dot,.,comma,%2C
 {&key*}   ->   &semi=%3B&dot=.&comma=%2C

 @since 1.6
 @author Ravi Mistry]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.UriTemplate -->
  <!-- start class com.google.api.client.http.UrlEncodedContent -->
  <class name="UrlEncodedContent" extends="com.google.api.client.http.AbstractHttpContent"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="UrlEncodedContent" type="java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param data key name/value data]]>
      </doc>
    </constructor>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="setMediaType" return="com.google.api.client.http.UrlEncodedContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mediaType" type="com.google.api.client.http.HttpMediaType"/>
    </method>
    <method name="getData" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the key name/value data or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setData" return="com.google.api.client.http.UrlEncodedContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="data" type="java.lang.Object"/>
      <doc>
      <![CDATA[Sets the key name/value data.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getContent" return="com.google.api.client.http.UrlEncodedContent"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="com.google.api.client.http.HttpRequest"/>
      <doc>
      <![CDATA[Returns the URL-encoded content of the given HTTP request, or if none return and set as content
 a new instance of {@link UrlEncodedContent} (whose {@link #getData()} is an implementation of
 {@link Map}).

 @param request HTTP request
 @return URL-encoded content
 @throws ClassCastException if the HTTP request has a content defined that is not
         {@link UrlEncodedContent}
 @since 1.7]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Implements support for HTTP form content encoding serialization of type
 {@code application/x-www-form-urlencoded} as specified in the <a href=
 "http://www.w3.org/TR/REC-html40/interact/forms.html#h-17.13.4.1">HTML 4.0 Specification</a>.

 <p>
 Sample usage:
 </p>

 <pre>
  static void setContent(HttpRequest request, Object item) {
    request.setContent(new UrlEncodedContent(item));
  }
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.UrlEncodedContent -->
  <!-- start class com.google.api.client.http.UrlEncodedParser -->
  <class name="UrlEncodedParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.util.ObjectParser"/>
    <constructor name="UrlEncodedParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="parse"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="content" type="java.lang.String"/>
      <param name="data" type="java.lang.Object"/>
      <doc>
      <![CDATA[Parses the given URL-encoded content into the given data object of data key name/value pairs
 using {@link #parse(Reader, Object)}.

 @param content URL-encoded content or {@code null} to ignore content
 @param data data key name/value pairs]]>
      </doc>
    </method>
    <method name="parse"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <param name="data" type="java.lang.Object"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses the given URL-encoded content into the given data object of data key name/value pairs,
 including support for repeating data key names.

 <p>
 Declared fields of a "primitive" type (as defined by {@link Data#isPrimitive(Type)} are parsed
 using {@link Data#parsePrimitiveValue(Type, String)} where the {@link Class} parameter is the
 declared field class. Declared fields of type {@link Collection} are used to support repeating
 data key names, so each member of the collection is an additional data key value. They are
 parsed the same as "primitive" fields, except that the generic type parameter of the collection
 is used as the {@link Class} parameter.
 </p>

 <p>
 If there is no declared field for an input parameter name, it will be ignored unless the input
 {@code data} parameter is a {@link Map}. If it is a map, the parameter value will be stored
 either as a string, or as a {@link ArrayList}&lt;String&gt; in the case of repeated parameters.
 </p>

 @param reader URL-encoded reader
 @param data data key name/value pairs

 @since 1.14]]>
      </doc>
    </method>
    <method name="parseAndClose" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <param name="charset" type="java.nio.charset.Charset"/>
      <param name="dataClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="parseAndClose" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <param name="charset" type="java.nio.charset.Charset"/>
      <param name="dataType" type="java.lang.reflect.Type"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="parseAndClose" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <param name="dataClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="parseAndClose" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <param name="dataType" type="java.lang.reflect.Type"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <field name="CONTENT_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "application/x-www-form-urlencoded"} content type.]]>
      </doc>
    </field>
    <field name="MEDIA_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "application/x-www-form-urlencoded"} media type with UTF-8 encoding.

 @since 1.13]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Implements support for HTTP form content encoding parsing of type
 {@code application/x-www-form-urlencoded} as specified in the <a href=
 "http://www.w3.org/TR/1998/REC-html40-19980424/interact/forms.html#h-17.13.4.1" >HTML 4.0
 Specification</a>.

 <p>
 Implementation is thread-safe.
 </p>

 <p>
 The data is parsed using {@link #parse(String, Object)}.
 </p>

 <p>
 Sample usage:
 </p>

 <pre>
   static void setParser(HttpTransport transport) {
     transport.addParser(new UrlEncodedParser());
   }
 </pre>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.UrlEncodedParser -->
</package>
<package name="com.google.api.client.http.apache">
  <!-- start class com.google.api.client.http.apache.ApacheHttpTransport -->
  <class name="ApacheHttpTransport" extends="com.google.api.client.http.HttpTransport"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ApacheHttpTransport"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor that uses {@link #newDefaultHttpClient()} for the Apache HTTP client.

 <p>
 Use {@link Builder} to modify HTTP client options.
 </p>

 @since 1.3]]>
      </doc>
    </constructor>
    <constructor name="ApacheHttpTransport" type="HttpClient"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor that allows an alternative Apache HTTP client to be used.

 <p>
 Note that a few settings are overridden:
 </p>
 <ul>
 <li>HTTP version is set to 1.1 using {@link HttpProtocolParams#setVersion} with
 {@link HttpVersion#HTTP_1_1}.</li>
 <li>Redirects are disabled using {@link ClientPNames#HANDLE_REDIRECTS}.</li>
 <li>{@link ConnManagerParams#setTimeout} and {@link HttpConnectionParams#setConnectionTimeout}
 are set on each request based on {@link HttpRequest#getConnectTimeout()}.</li>
 <li>{@link HttpConnectionParams#setSoTimeout} is set on each request based on
 {@link HttpRequest#getReadTimeout()}.</li>
 </ul>

 <p>
 Use {@link Builder} for a more user-friendly way to modify the HTTP client options.
 </p>

 @param httpClient Apache HTTP client to use

 @since 1.6]]>
      </doc>
    </constructor>
    <method name="newDefaultHttpClient" return="DefaultHttpClient"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates a new instance of the Apache HTTP client that is used by the
 {@link #ApacheHttpTransport()} constructor.

 <p>
 Use this constructor if you want to customize the default Apache HTTP client. Settings:
 </p>
 <ul>
 <li>The client connection manager is set to {@link ThreadSafeClientConnManager}.</li>
 <li>The socket buffer size is set to 8192 using
 {@link HttpConnectionParams#setSocketBufferSize}.</li>
 <li><The retry mechanism is turned off by setting
 {@code new DefaultHttpRequestRetryHandler(0, false)}.</li>
 <li>The route planner uses {@link ProxySelectorRoutePlanner} with
 {@link ProxySelector#getDefault()}, which uses the proxy settings from <a
 href="http://docs.oracle.com/javase/7/docs/api/java/net/doc-files/net-properties.html">system
 properties</a>.</li>
 </ul>

 @return new instance of the Apache HTTP client
 @since 1.6]]>
      </doc>
    </method>
    <method name="supportsMethod" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="method" type="java.lang.String"/>
    </method>
    <method name="buildRequest" return="com.google.api.client.http.apache.ApacheHttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="method" type="java.lang.String"/>
      <param name="url" type="java.lang.String"/>
    </method>
    <method name="shutdown"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Shuts down the connection manager and releases allocated resources. This includes closing all
 connections, whether they are currently used or not.

 @since 1.4]]>
      </doc>
    </method>
    <method name="getHttpClient" return="HttpClient"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Apache HTTP client.

 @since 1.5]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Thread-safe HTTP transport based on the Apache HTTP Client library.

 <p>
 Implementation is thread-safe, as long as any parameter modification to the
 {@link #getHttpClient() Apache HTTP Client} is only done at initialization time. For maximum
 efficiency, applications should use a single globally-shared instance of the HTTP transport.
 </p>

 <p>
 Default settings are specified in {@link #newDefaultHttpClient()}. Use the
 {@link #ApacheHttpTransport(HttpClient)} constructor to override the Apache HTTP Client used.
 Alternatively, use {@link #ApacheHttpTransport()} and change the {@link #getHttpClient()}. Please
 read the <a
 href="http://hc.apache.org/httpcomponents-client-ga/tutorial/html/connmgmt.html">Apache HTTP
 Client connection management tutorial</a> for more complex configuration options.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.apache.ApacheHttpTransport -->
  <!-- start class com.google.api.client.http.apache.ApacheHttpTransport.Builder -->
  <class name="ApacheHttpTransport.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ApacheHttpTransport.Builder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setProxy" return="com.google.api.client.http.apache.ApacheHttpTransport.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="proxy" type="HttpHost"/>
      <doc>
      <![CDATA[Sets the HTTP proxy to use {@link DefaultHttpRoutePlanner} or {@code null} to use
 {@link #setProxySelector(ProxySelector)} with {@link ProxySelector#getDefault()}.

 <p>
 By default it is {@code null}, which uses the proxy settings from <a
 href="http://docs.oracle.com/javase/7/docs/api/java/net/doc-files/net-properties.html">system
 properties</a>.
 </p>

 <p>
 For example:
 </p>

 <pre>
       setProxy(new HttpHost("127.0.0.1", 8080))
 </pre>]]>
      </doc>
    </method>
    <method name="setProxySelector" return="com.google.api.client.http.apache.ApacheHttpTransport.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="proxySelector" type="java.net.ProxySelector"/>
      <doc>
      <![CDATA[Sets the HTTP proxy selector to use {@link ProxySelectorRoutePlanner} or {@code null} for
 {@link DefaultHttpRoutePlanner}.

 <p>
 By default it is {@link ProxySelector#getDefault()} which uses the proxy settings from <a
 href="http://docs.oracle.com/javase/7/docs/api/java/net/doc-files/net-properties.html">system
 properties</a>.
 </p>]]>
      </doc>
    </method>
    <method name="trustCertificatesFromJavaKeyStore" return="com.google.api.client.http.apache.ApacheHttpTransport.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keyStoreStream" type="java.io.InputStream"/>
      <param name="storePass" type="java.lang.String"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sets the SSL socket factory based on root certificates in a Java KeyStore.

 <p>
 Example usage:
 </p>

 <pre>
    trustCertificatesFromJavaKeyStore(new FileInputStream("certs.jks"), "password");
 </pre>

 @param keyStoreStream input stream to the key store (closed at the end of this method in a
        finally block)
 @param storePass password protecting the key store file
 @since 1.14]]>
      </doc>
    </method>
    <method name="trustCertificatesFromStream" return="com.google.api.client.http.apache.ApacheHttpTransport.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="certificateStream" type="java.io.InputStream"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sets the SSL socket factory based root certificates generated from the specified stream using
 {@link CertificateFactory#generateCertificates(InputStream)}.

 <p>
 Example usage:
 </p>

 <pre>
    trustCertificatesFromStream(new FileInputStream("certs.pem"));
 </pre>

 @param certificateStream certificate stream
 @since 1.14]]>
      </doc>
    </method>
    <method name="trustCertificates" return="com.google.api.client.http.apache.ApacheHttpTransport.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trustStore" type="java.security.KeyStore"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <doc>
      <![CDATA[Sets the SSL socket factory based on a root certificate trust store.

 @param trustStore certificate trust store (use for example {@link SecurityUtils#loadKeyStore}
        or {@link SecurityUtils#loadKeyStoreFromCertificates})

 @since 1.14]]>
      </doc>
    </method>
    <method name="doNotValidateCertificate" return="com.google.api.client.http.apache.ApacheHttpTransport.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <doc>
      <![CDATA[Disables validating server SSL certificates by setting the SSL socket factory using
 {@link SslUtils#trustAllSSLContext()} for the SSL context and
 {@link SSLSocketFactory#ALLOW_ALL_HOSTNAME_VERIFIER} for the host name verifier.

 <p>
 Be careful! Disabling certificate validation is dangerous and should only be done in testing
 environments.
 </p>]]>
      </doc>
    </method>
    <method name="setSocketFactory" return="com.google.api.client.http.apache.ApacheHttpTransport.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="socketFactory" type="SSLSocketFactory"/>
      <doc>
      <![CDATA[Sets the SSL socket factory ({@link SSLSocketFactory#getSocketFactory()} by default).]]>
      </doc>
    </method>
    <method name="getSSLSocketFactory" return="SSLSocketFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the SSL socket factory ({@link SSLSocketFactory#getSocketFactory()} by default).]]>
      </doc>
    </method>
    <method name="getHttpParams" return="HttpParams"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP parameters.]]>
      </doc>
    </method>
    <method name="build" return="com.google.api.client.http.apache.ApacheHttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new instance of {@link ApacheHttpTransport} based on the options.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Builder for {@link ApacheHttpTransport}.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.13]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.apache.ApacheHttpTransport.Builder -->
</package>
<package name="com.google.api.client.http.javanet">
  <!-- start class com.google.api.client.http.javanet.NetHttpTransport -->
  <class name="NetHttpTransport" extends="com.google.api.client.http.HttpTransport"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="NetHttpTransport"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructor with the default behavior.

 <p>
 Instead use {@link Builder} to modify behavior.
 </p>]]>
      </doc>
    </constructor>
    <method name="supportsMethod" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="method" type="java.lang.String"/>
    </method>
    <method name="buildRequest" return="com.google.api.client.http.javanet.NetHttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="method" type="java.lang.String"/>
      <param name="url" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Thread-safe HTTP low-level transport based on the {@code java.net} package.

 <p>
 Users should consider modifying the keep alive property on {@link NetHttpTransport} to control
 whether the socket should be returned to a pool of connected sockets. More information is
 available <a
 href='http://docs.oracle.com/javase/7/docs/technotes/guides/net/http-keepalive.html'>here</a>.
 </p>

 <p>
 Implementation is thread-safe. For maximum efficiency, applications should use a single
 globally-shared instance of the HTTP transport.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.javanet.NetHttpTransport -->
  <!-- start class com.google.api.client.http.javanet.NetHttpTransport.Builder -->
  <class name="NetHttpTransport.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="NetHttpTransport.Builder"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setProxy" return="com.google.api.client.http.javanet.NetHttpTransport.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="proxy" type="java.net.Proxy"/>
      <doc>
      <![CDATA[Sets the HTTP proxy or {@code null} to use the proxy settings from <a
 href="http://docs.oracle.com/javase/7/docs/api/java/net/doc-files/net-properties.html">system
 properties</a>.

 <p>
 For example:
 </p>

 <pre>
       setProxy(new Proxy(Proxy.Type.HTTP, new InetSocketAddress("127.0.0.1", 8080)))
 </pre>]]>
      </doc>
    </method>
    <method name="trustCertificatesFromJavaKeyStore" return="com.google.api.client.http.javanet.NetHttpTransport.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keyStoreStream" type="java.io.InputStream"/>
      <param name="storePass" type="java.lang.String"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sets the SSL socket factory based on root certificates in a Java KeyStore.

 <p>
 Example usage:
 </p>

 <pre>
    trustCertificatesFromJavaKeyStore(new FileInputStream("certs.jks"), "password");
 </pre>

 @param keyStoreStream input stream to the key store (closed at the end of this method in a
        finally block)
 @param storePass password protecting the key store file
 @since 1.14]]>
      </doc>
    </method>
    <method name="trustCertificatesFromStream" return="com.google.api.client.http.javanet.NetHttpTransport.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="certificateStream" type="java.io.InputStream"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Sets the SSL socket factory based root certificates generated from the specified stream using
 {@link CertificateFactory#generateCertificates(InputStream)}.

 <p>
 Example usage:
 </p>

 <pre>
    trustCertificatesFromStream(new FileInputStream("certs.pem"));
 </pre>

 @param certificateStream certificate stream
 @since 1.14]]>
      </doc>
    </method>
    <method name="trustCertificates" return="com.google.api.client.http.javanet.NetHttpTransport.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="trustStore" type="java.security.KeyStore"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <doc>
      <![CDATA[Sets the SSL socket factory based on a root certificate trust store.

 @param trustStore certificate trust store (use for example {@link SecurityUtils#loadKeyStore}
        or {@link SecurityUtils#loadKeyStoreFromCertificates})
 @since 1.14]]>
      </doc>
    </method>
    <method name="doNotValidateCertificate" return="com.google.api.client.http.javanet.NetHttpTransport.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <doc>
      <![CDATA[Disables validating server SSL certificates by setting the SSL socket factory using
 {@link SslUtils#trustAllSSLContext()} for the SSL context and
 {@link SslUtils#trustAllHostnameVerifier()} for the host name verifier.

 <p>
 Be careful! Disabling certificate validation is dangerous and should only be done in testing
 environments.
 </p>]]>
      </doc>
    </method>
    <method name="getSslSocketFactory" return="javax.net.ssl.SSLSocketFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the SSL socket factory.]]>
      </doc>
    </method>
    <method name="setSslSocketFactory" return="com.google.api.client.http.javanet.NetHttpTransport.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sslSocketFactory" type="javax.net.ssl.SSLSocketFactory"/>
      <doc>
      <![CDATA[Sets the SSL socket factory or {@code null} for the default.]]>
      </doc>
    </method>
    <method name="getHostnameVerifier" return="javax.net.ssl.HostnameVerifier"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the host name verifier or {@code null} for the default.]]>
      </doc>
    </method>
    <method name="setHostnameVerifier" return="com.google.api.client.http.javanet.NetHttpTransport.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="hostnameVerifier" type="javax.net.ssl.HostnameVerifier"/>
      <doc>
      <![CDATA[Sets the host name verifier or {@code null} for the default.]]>
      </doc>
    </method>
    <method name="build" return="com.google.api.client.http.javanet.NetHttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new instance of {@link NetHttpTransport} based on the options.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Builder for {@link NetHttpTransport}.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.13]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.javanet.NetHttpTransport.Builder -->
</package>
<package name="com.google.api.client.http.json">
  <!-- start class com.google.api.client.http.json.JsonHttpContent -->
  <class name="JsonHttpContent" extends="com.google.api.client.http.AbstractHttpContent"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JsonHttpContent" type="com.google.api.client.json.JsonFactory, java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param jsonFactory JSON factory to use
 @param data JSON key name/value data
 @since 1.5]]>
      </doc>
    </constructor>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="setMediaType" return="com.google.api.client.http.json.JsonHttpContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mediaType" type="com.google.api.client.http.HttpMediaType"/>
    </method>
    <method name="getData" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON key name/value data.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getJsonFactory" return="com.google.api.client.json.JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON factory.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getWrapperKey" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the wrapper key for the JSON content or {@code null} for none.

 @since 1.14]]>
      </doc>
    </method>
    <method name="setWrapperKey" return="com.google.api.client.http.json.JsonHttpContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="wrapperKey" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the wrapper key for the JSON content or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>

 @since 1.14]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Serializes JSON HTTP content based on the data key/value mapping object for an item.

 <p>
 Sample usage:
 </p>

 <pre>
<code>
  static void setContent(HttpRequest request, Object data) {
    request.setContent(new JsonHttpContent(new JacksonFactory(), data));
  }
 </code>
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.json.JsonHttpContent -->
</package>
<package name="com.google.api.client.http.protobuf">
  <!-- start class com.google.api.client.http.protobuf.ProtoHttpContent -->
  <class name="ProtoHttpContent" extends="com.google.api.client.http.AbstractHttpContent"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="ProtoHttpContent" type="MessageLite"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param message message to serialize]]>
      </doc>
    </constructor>
    <method name="getLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="setType" return="com.google.api.client.http.protobuf.ProtoHttpContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the content type or {@code null} for none.

 <p>
 Default value is {@link ProtocolBuffers#CONTENT_TYPE}.
 </p>]]>
      </doc>
    </method>
    <method name="getMessage" return="MessageLite"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the message to serialize.]]>
      </doc>
    </method>
    <method name="setMediaType" return="com.google.api.client.http.protobuf.ProtoHttpContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mediaType" type="com.google.api.client.http.HttpMediaType"/>
    </method>
    <doc>
    <![CDATA[Serializes of a protocol buffer message to HTTP content.

 <p>
 Sample usage:
 </p>

 <pre>
 <code>
  static HttpRequest buildPostRequest(
      HttpRequestFactory requestFactory, GenericUrl url, MessageLite message) throws IOException {
    return requestFactory.buildPostRequest(url, new ProtoHttpContent(message));
  }
 </code>
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.5
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.protobuf.ProtoHttpContent -->
</package>
<package name="com.google.api.client.http.xml">
  <!-- start class com.google.api.client.http.xml.AbstractXmlHttpContent -->
  <class name="AbstractXmlHttpContent" extends="com.google.api.client.http.AbstractHttpContent"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractXmlHttpContent" type="com.google.api.client.xml.XmlNamespaceDictionary"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param namespaceDictionary XML namespace dictionary
 @since 1.5]]>
      </doc>
    </constructor>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="setMediaType" return="com.google.api.client.http.xml.AbstractXmlHttpContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mediaType" type="com.google.api.client.http.HttpMediaType"/>
    </method>
    <method name="getNamespaceDictionary" return="com.google.api.client.xml.XmlNamespaceDictionary"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the XML namespace dictionary.

 @since 1.5]]>
      </doc>
    </method>
    <method name="writeTo"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="serializer" type="XmlSerializer"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes the content to the given XML serializer.

 @throws IOException I/O exception]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Abstract serializer for XML HTTP content based on the data key/value mapping object for an item.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.xml.AbstractXmlHttpContent -->
  <!-- start class com.google.api.client.http.xml.XmlHttpContent -->
  <class name="XmlHttpContent" extends="com.google.api.client.http.xml.AbstractXmlHttpContent"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="XmlHttpContent" type="com.google.api.client.xml.XmlNamespaceDictionary, java.lang.String, java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[XML namespace dictionary.

 @param namespaceDictionary XML namespace dictionary
 @param elementName XML element local name, optionally prefixed by its namespace alias, for
        example {@code "atom:entry"}
 @param data Key/value pair data
 @since 1.5]]>
      </doc>
    </constructor>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="serializer" type="XmlSerializer"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="setMediaType" return="com.google.api.client.http.xml.XmlHttpContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mediaType" type="com.google.api.client.http.HttpMediaType"/>
    </method>
    <method name="getElementName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the XML element local name, optionally prefixed by its namespace alias, for example
 {@code "atom:entry"}.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getData" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the key/value pair data.

 @since 1.5]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Serializes XML HTTP content based on the data key/value mapping object for an item.

 <p>
 Sample usage:
 </p>

 <pre>
 <code>
  static void setContent(HttpRequest request, XmlNamespaceDictionary namespaceDictionary,
      String elementName, Object data) {
    request.setContent(new XmlHttpContent(namespaceDictionary, elementName, data));
  }
 </code>
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.xml.XmlHttpContent -->
</package>
<package name="com.google.api.client.http.xml.atom">
  <!-- start class com.google.api.client.http.xml.atom.AtomContent -->
  <class name="AtomContent" extends="com.google.api.client.http.xml.AbstractXmlHttpContent"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AtomContent" type="com.google.api.client.xml.XmlNamespaceDictionary, java.lang.Object, boolean"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param namespaceDictionary XML namespace dictionary
 @param entry key/value pair data for the Atom entry
 @param isEntry {@code true} for an Atom entry or {@code false} for an Atom feed
 @since 1.5]]>
      </doc>
    </constructor>
    <method name="forEntry" return="com.google.api.client.http.xml.atom.AtomContent"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="namespaceDictionary" type="com.google.api.client.xml.XmlNamespaceDictionary"/>
      <param name="entry" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns a new instance of HTTP content for an Atom entry.

 @param namespaceDictionary XML namespace dictionary
 @param entry data key/value pair for the Atom entry
 @since 1.5]]>
      </doc>
    </method>
    <method name="forFeed" return="com.google.api.client.http.xml.atom.AtomContent"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="namespaceDictionary" type="com.google.api.client.xml.XmlNamespaceDictionary"/>
      <param name="feed" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns a new instance of HTTP content for an Atom feed.

 @param namespaceDictionary XML namespace dictionary
 @param feed data key/value pair for the Atom feed
 @since 1.5]]>
      </doc>
    </method>
    <method name="setMediaType" return="com.google.api.client.http.xml.atom.AtomContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mediaType" type="com.google.api.client.http.HttpMediaType"/>
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="serializer" type="XmlSerializer"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="isEntry" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns {@code true} for an Atom entry or {@code false} for an Atom feed.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getData" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the key name/value pair data for the Atom entry or Atom feed.

 @since 1.5]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Serializes Atom XML HTTP content based on the data key/value mapping object for an Atom entry.

 <p>
 Default value for {@link #getType()} is {@link Atom#MEDIA_TYPE}.
 </p>

 <p>
 Sample usages:
 </p>

 <pre>
 <code>
  static void setAtomEntryContent(
      HttpRequest request, XmlNamespaceDictionary namespaceDictionary, Object entry) {
    request.setContent(AtomContent.forEntry(namespaceDictionary, entry));
  }

  static void setAtomBatchContent(
      HttpRequest request, XmlNamespaceDictionary namespaceDictionary, Object batchFeed) {
    request.setContent(AtomContent.forFeed(namespaceDictionary, batchFeed));
  }
 </code>
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.4
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.xml.atom.AtomContent -->
  <!-- start class com.google.api.client.http.xml.atom.AtomFeedParser -->
  <class name="AtomFeedParser" extends="com.google.api.client.xml.atom.AbstractAtomFeedParser&lt;T&gt;"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="AtomFeedParser" type="com.google.api.client.xml.XmlNamespaceDictionary, XmlPullParser, java.io.InputStream, java.lang.Class&lt;T&gt;, java.lang.Class&lt;E&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param namespaceDictionary XML namespace dictionary
 @param parser XML pull parser to use
 @param inputStream input stream to read
 @param feedClass feed class to parse
 @since 1.5]]>
      </doc>
    </constructor>
    <method name="parseNextEntry" return="E"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
    </method>
    <method name="parseEntryInternal" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
    </method>
    <method name="getEntryClass" return="java.lang.Class&lt;E&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the Atom entry class to parse.

 @since 1.5]]>
      </doc>
    </method>
    <method name="create" return="com.google.api.client.http.xml.atom.AtomFeedParser&lt;T, E&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="response" type="com.google.api.client.http.HttpResponse"/>
      <param name="namespaceDictionary" type="com.google.api.client.xml.XmlNamespaceDictionary"/>
      <param name="feedClass" type="java.lang.Class&lt;T&gt;"/>
      <param name="entryClass" type="java.lang.Class&lt;E&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
      <doc>
      <![CDATA[Parses the given HTTP response using the given feed class and entry class.

 @param <T> feed type
 @param <E> entry type
 @param response HTTP response
 @param namespaceDictionary XML namespace dictionary
 @param feedClass feed class
 @param entryClass entry class
 @return Atom feed parser
 @throws IOException I/O exception
 @throws XmlPullParserException XML pull parser exception]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Atom feed pull parser when the Atom entry class is known in advance.

 <p>
 Implementation is not thread-safe.
 </p>

 @param <T> feed type
 @param <E> entry type
 @since 1.4
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.http.xml.atom.AtomFeedParser -->
</package>
<package name="com.google.api.client.json">
  <!-- start class com.google.api.client.json.CustomizeJsonParser -->
  <class name="CustomizeJsonParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="CustomizeJsonParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="stopAt" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="java.lang.Object"/>
      <param name="key" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns whether to stop parsing at the given key of the given context object.]]>
      </doc>
    </method>
    <method name="handleUnrecognizedKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="java.lang.Object"/>
      <param name="key" type="java.lang.String"/>
      <doc>
      <![CDATA[Called when the given unrecognized key is encountered in the given context object.]]>
      </doc>
    </method>
    <method name="newInstanceForArray" return="java.util.Collection&lt;java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="java.lang.Object"/>
      <param name="field" type="java.lang.reflect.Field"/>
      <doc>
      <![CDATA[Returns a new instance value for the given field in the given context object for a JSON array
 or {@code null} for the default behavior.]]>
      </doc>
    </method>
    <method name="newInstanceForObject" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="java.lang.Object"/>
      <param name="fieldClass" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Returns a new instance value for the given field class in the given context object for JSON
 Object or {@code null} for the default behavior.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Customizes the behavior of a JSON parser.

 <p>
 All methods have a default trivial implementation, so subclasses need only implement the methods
 whose behavior needs customization.
 </p>

 <p>
 Implementation has no fields and therefore thread-safe, but sub-classes are not necessarily
 thread-safe.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.json.CustomizeJsonParser -->
  <!-- start class com.google.api.client.json.GenericJson -->
  <class name="GenericJson" extends="com.google.api.client.util.GenericData"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Cloneable"/>
    <constructor name="GenericJson"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getFactory" return="com.google.api.client.json.JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON factory or {@code null} for none.

 @since 1.6]]>
      </doc>
    </method>
    <method name="setFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="factory" type="com.google.api.client.json.JsonFactory"/>
      <doc>
      <![CDATA[Sets the JSON factory or {@code null} for none.

 @since 1.6]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toPrettyString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns a pretty-printed serialized JSON string representation or {@link #toString()} if
 {@link #getFactory()} is {@code null}.

 @since 1.6]]>
      </doc>
    </method>
    <method name="clone" return="com.google.api.client.json.GenericJson"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="set" return="com.google.api.client.json.GenericJson"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <doc>
    <![CDATA[Generic JSON data that stores all unknown key name/value pairs.

 <p>
 Subclasses can declare fields for known data keys using the {@link Key} annotation. Each field
 can be of any visibility (private, package private, protected, or public) and must not be static.
 {@code null} unknown data key names are not allowed, but {@code null} data values are allowed.

 <p>
 Implementation is not thread-safe. For a thread-safe choice instead use an implementation of
 {@link ConcurrentMap}.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.json.GenericJson -->
  <!-- start class com.google.api.client.json.Json -->
  <class name="Json" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Json"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <field name="MEDIA_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "application/json; charset=utf-8"} media type used as a default for JSON parsing.

 <p>
 Use {@link HttpMediaType#equalsIgnoreParameters} for comparing media types.
 </p>

 @since 1.10]]>
      </doc>
    </field>
    <doc>
    <![CDATA[JSON utilities.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.json.Json -->
  <!-- start class com.google.api.client.json.JsonFactory -->
  <class name="JsonFactory" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JsonFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns a new instance of a low-level JSON parser for the given input stream. The parser tries
 to detect the charset of the input stream by itself.

 @param in input stream
 @return new instance of a low-level JSON parser]]>
      </doc>
    </method>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <param name="charset" type="java.nio.charset.Charset"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns a new instance of a low-level JSON parser for the given input stream.

 @param in input stream
 @param charset charset in which the input stream is encoded or {@code null} to let the parser
        detect the charset
 @return new instance of a low-level JSON parser
 @since 1.10]]>
      </doc>
    </method>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns a new instance of a low-level JSON parser for the given string value.

 @param value string value
 @return new instance of a low-level JSON parser]]>
      </doc>
    </method>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns a new instance of a low-level JSON parser for the given reader.

 @param reader reader
 @return new instance of a low-level JSON parser]]>
      </doc>
    </method>
    <method name="createJsonGenerator" return="com.google.api.client.json.JsonGenerator"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <param name="enc" type="java.nio.charset.Charset"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns a new instance of a low-level JSON serializer for the given output stream and encoding.

 @param out output stream
 @param enc encoding
 @return new instance of a low-level JSON serializer
 @since 1.10]]>
      </doc>
    </method>
    <method name="createJsonGenerator" return="com.google.api.client.json.JsonGenerator"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="writer" type="java.io.Writer"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns a new instance of a low-level JSON serializer for the given writer.

 @param writer writer
 @return new instance of a low-level JSON serializer]]>
      </doc>
    </method>
    <method name="createJsonObjectParser" return="com.google.api.client.json.JsonObjectParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an object parser which uses this factory to parse JSON data.

 @since 1.10]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="item" type="java.lang.Object"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns a serialized JSON string representation for the given item using
 {@link JsonGenerator#serialize(Object)}.

 @param item data key/value pairs
 @return serialized JSON string representation]]>
      </doc>
    </method>
    <method name="toPrettyString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="item" type="java.lang.Object"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns a pretty-printed serialized JSON string representation for the given item using
 {@link JsonGenerator#serialize(Object)} with {@link JsonGenerator#enablePrettyPrint()}.

 <p>
 The specifics of how the JSON representation is made pretty is implementation dependent, and
 should not be relied on. However, it is assumed to be legal, and in fact differs from
 {@link #toString(Object)} only by adding whitespace that does not change its meaning.
 </p>

 @param item data key/value pairs
 @return serialized JSON string representation
 @since 1.6]]>
      </doc>
    </method>
    <method name="toByteArray" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="item" type="java.lang.Object"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns a UTF-8 encoded byte array of the serialized JSON representation for the given item
 using {@link JsonGenerator#serialize(Object)}.

 @param item data key/value pairs
 @return byte array of the serialized JSON representation
 @since 1.7]]>
      </doc>
    </method>
    <method name="fromString" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <param name="destinationClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses a string value as a JSON object, array, or value into a new instance of the given
 destination class using {@link JsonParser#parse(Class, CustomizeJsonParser)}.

 @param value JSON string value
 @param destinationClass destination class that has an accessible default constructor to use to
        create a new instance
 @return new instance of the parsed destination class
 @since 1.4]]>
      </doc>
    </method>
    <method name="fromInputStream" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="inputStream" type="java.io.InputStream"/>
      <param name="destinationClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parse and close an input stream as a JSON object, array, or value into a new instance of the
 given destination class using {@link JsonParser#parseAndClose(Class, CustomizeJsonParser)}.
 Tries to detect the charset of the input stream automatically.

 @param inputStream JSON value in an input stream
 @param destinationClass destination class that has an accessible default constructor to use to
        create a new instance
 @return new instance of the parsed destination class
 @since 1.7]]>
      </doc>
    </method>
    <method name="fromInputStream" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="inputStream" type="java.io.InputStream"/>
      <param name="charset" type="java.nio.charset.Charset"/>
      <param name="destinationClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parse and close an input stream as a JSON object, array, or value into a new instance of the
 given destination class using {@link JsonParser#parseAndClose(Class, CustomizeJsonParser)}.

 @param inputStream JSON value in an input stream
 @param charset Charset in which the stream is encoded
 @param destinationClass destination class that has an accessible default constructor to use to
        create a new instance
 @return new instance of the parsed destination class
 @since 1.10]]>
      </doc>
    </method>
    <method name="fromReader" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <param name="destinationClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parse and close a reader as a JSON object, array, or value into a new instance of the given
 destination class using {@link JsonParser#parseAndClose(Class, CustomizeJsonParser)}.

 @param reader JSON value in a reader
 @param destinationClass destination class that has an accessible default constructor to use to
        create a new instance
 @return new instance of the parsed destination class
 @since 1.7]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Abstract low-level JSON factory.

 <p>
 Implementation is thread-safe, and sub-classes must be thread-safe. For maximum efficiency,
 applications should use a single globally-shared instance of the JSON factory.
 </p>

 @since 1.3
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.json.JsonFactory -->
  <!-- start class com.google.api.client.json.JsonGenerator -->
  <class name="JsonGenerator" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JsonGenerator"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getFactory" return="com.google.api.client.json.JsonFactory"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON factory from which this generator was created.]]>
      </doc>
    </method>
    <method name="flush"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Flushes any buffered content to the underlying output stream or writer.]]>
      </doc>
    </method>
    <method name="close"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Closes the serializer and the underlying output stream or writer, and releases any memory
 associated with it.]]>
      </doc>
    </method>
    <method name="writeStartArray"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes a JSON start array character '['.]]>
      </doc>
    </method>
    <method name="writeEndArray"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes a JSON end array character ']'.]]>
      </doc>
    </method>
    <method name="writeStartObject"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes a JSON start object character '{'.]]>
      </doc>
    </method>
    <method name="writeEndObject"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes a JSON end object character '}'.]]>
      </doc>
    </method>
    <method name="writeFieldName"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes a JSON quoted field name.]]>
      </doc>
    </method>
    <method name="writeNull"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes a literal JSON null value.]]>
      </doc>
    </method>
    <method name="writeString"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes a JSON quoted string value.]]>
      </doc>
    </method>
    <method name="writeBoolean"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="state" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes a literal JSON boolean value ('true' or 'false').]]>
      </doc>
    </method>
    <method name="writeNumber"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes a JSON int value.]]>
      </doc>
    </method>
    <method name="writeNumber"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes a JSON long value.]]>
      </doc>
    </method>
    <method name="writeNumber"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="java.math.BigInteger"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes a JSON big integer value.]]>
      </doc>
    </method>
    <method name="writeNumber"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="float"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes a JSON float value.]]>
      </doc>
    </method>
    <method name="writeNumber"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="double"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes a JSON double value.]]>
      </doc>
    </method>
    <method name="writeNumber"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="java.math.BigDecimal"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes a JSON big decimal value.]]>
      </doc>
    </method>
    <method name="writeNumber"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="encodedValue" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes a JSON numeric value that has already been encoded properly.]]>
      </doc>
    </method>
    <method name="serialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Serializes the given JSON value object, or if {@code value} is {@code null} it does no
 serialization.]]>
      </doc>
    </method>
    <method name="enablePrettyPrint"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Requests that the output be pretty printed (by default it is not).

 <p>
 Default implementation does nothing, but implementations may override to provide actual pretty
 printing.
 </p>

 @throws IOException possible I/O exception (unused in default implementation)

 @since 1.6]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Abstract low-level JSON serializer.

 <p>
 Implementation has no fields and therefore thread-safe, but sub-classes are not necessarily
 thread-safe.
 </p>

 <p>
 Upgrade warning: in prior version 1.13 there were methods {@code writeNumber(UnsignedInteger)}
 and {@code writeNumber(UnsignedLong)}, but starting in version 1.14 they were removed. Instead
 use {@link #writeNumber(long)} and {@link #writeNumber(BigInteger)}.
 </p>

 @since 1.3
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.json.JsonGenerator -->
  <!-- start class com.google.api.client.json.JsonObjectParser -->
  <class name="JsonObjectParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.util.ObjectParser"/>
    <constructor name="JsonObjectParser" type="com.google.api.client.json.JsonFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param jsonFactory JSON factory]]>
      </doc>
    </constructor>
    <constructor name="JsonObjectParser" type="com.google.api.client.json.JsonObjectParser.Builder"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param builder builder

 @since 1.14]]>
      </doc>
    </constructor>
    <method name="parseAndClose" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <param name="charset" type="java.nio.charset.Charset"/>
      <param name="dataClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="parseAndClose" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <param name="charset" type="java.nio.charset.Charset"/>
      <param name="dataType" type="java.lang.reflect.Type"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="parseAndClose" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <param name="dataClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="parseAndClose" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <param name="dataType" type="java.lang.reflect.Type"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getJsonFactory" return="com.google.api.client.json.JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON factory.]]>
      </doc>
    </method>
    <method name="getWrapperKeys" return="java.util.Set&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the unmodifiable set of wrapper keys for the JSON content.

 @since 1.14]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Parses JSON data into an data class of key/value pairs.

 <p>
 Implementation is thread-safe.
 </p>

 <p>
 Sample usage:
 </p>

 <pre>
<code>
  static void setParser(HttpRequest request) {
    request.setParser(new JsonObjectParser(new JacksonFactory()));
  }
 </code>
 </pre>

 @author Matthias Linder (mlinder)
 @since 1.10]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.json.JsonObjectParser -->
  <!-- start class com.google.api.client.json.JsonObjectParser.Builder -->
  <class name="JsonObjectParser.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JsonObjectParser.Builder" type="com.google.api.client.json.JsonFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param jsonFactory JSON factory]]>
      </doc>
    </constructor>
    <method name="build" return="com.google.api.client.json.JsonObjectParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new instance of a JSON object parser.]]>
      </doc>
    </method>
    <method name="getJsonFactory" return="com.google.api.client.json.JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON factory.]]>
      </doc>
    </method>
    <method name="getWrapperKeys" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the wrapper keys for the JSON content.]]>
      </doc>
    </method>
    <method name="setWrapperKeys" return="com.google.api.client.json.JsonObjectParser.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="wrapperKeys" type="java.util.Collection&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Sets the wrapper keys for the JSON content.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Builder.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.14]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.json.JsonObjectParser.Builder -->
  <!-- start class com.google.api.client.json.JsonParser -->
  <class name="JsonParser" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JsonParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getFactory" return="com.google.api.client.json.JsonFactory"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON factory from which this generator was created.]]>
      </doc>
    </method>
    <method name="close"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Closes the parser and the underlying input stream or reader, and releases any memory associated
 with it.]]>
      </doc>
    </method>
    <method name="nextToken" return="com.google.api.client.json.JsonToken"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the next token from the stream or {@code null} to indicate end of input.]]>
      </doc>
    </method>
    <method name="getCurrentToken" return="com.google.api.client.json.JsonToken"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the token the parser currently points to or {@code null} for none (at start of input or
 after end of input).]]>
      </doc>
    </method>
    <method name="getCurrentName" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the most recent field name or {@code null} for array values or for root-level values.]]>
      </doc>
    </method>
    <method name="skipChildren" return="com.google.api.client.json.JsonParser"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Skips to the matching {@link JsonToken#END_ARRAY} if current token is
 {@link JsonToken#START_ARRAY}, the matching {@link JsonToken#END_OBJECT} if the current token
 is {@link JsonToken#START_OBJECT}, else does nothing.]]>
      </doc>
    </method>
    <method name="getText" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns a textual representation of the current token or {@code null} if
 {@link #getCurrentToken()} is {@code null}.]]>
      </doc>
    </method>
    <method name="getByteValue" return="byte"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the byte value of the current token.]]>
      </doc>
    </method>
    <method name="getShortValue" return="short"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the short value of the current token.]]>
      </doc>
    </method>
    <method name="getIntValue" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the int value of the current token.]]>
      </doc>
    </method>
    <method name="getFloatValue" return="float"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the float value of the current token.]]>
      </doc>
    </method>
    <method name="getLongValue" return="long"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the long value of the current token.]]>
      </doc>
    </method>
    <method name="getDoubleValue" return="double"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the double value of the current token.]]>
      </doc>
    </method>
    <method name="getBigIntegerValue" return="java.math.BigInteger"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the {@link BigInteger} value of the current token.]]>
      </doc>
    </method>
    <method name="getDecimalValue" return="java.math.BigDecimal"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns the {@link BigDecimal} value of the current token.]]>
      </doc>
    </method>
    <method name="parseAndClose" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="destinationClass" type="java.lang.Class&lt;T&gt;"/>
      <param name="customizeParser" type="com.google.api.client.json.CustomizeJsonParser"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parse a JSON object, array, or value into a new instance of the given destination class using
 {@link JsonParser#parse(Class, CustomizeJsonParser)}, and then closes the parser.

 @param <T> destination class type
 @param destinationClass destination class that has a public default constructor to use to
        create a new instance
 @param customizeParser optional parser customizer or {@code null} for none
 @return new instance of the parsed destination class]]>
      </doc>
    </method>
    <method name="skipToKey"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="keyToFind" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Skips the values of all keys in the current object until it finds the given key.
 <p>
 Before this method is called, the parser must either point to the start or end of a JSON object
 or to a field name. After this method ends, the current token will either be the
 {@link JsonToken#END_OBJECT} of the current object if the key is not found, or the value of the
 key that was found.
 </p>

 @param keyToFind key to find]]>
      </doc>
    </method>
    <method name="skipToKey" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="keysToFind" type="java.util.Set&lt;java.lang.String&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Skips the values of all keys in the current object until it finds one of the given keys.
 <p>
 Before this method is called, the parser must either point to the start or end of a JSON object
 or to a field name. After this method ends, the current token will either be the
 {@link JsonToken#END_OBJECT} of the current object if no matching key is found, or the value of
 the key that was found.
 </p>

 @param keysToFind set of keys to look for
 @return name of the first matching key found or {@code null} if no match was found
 @since 1.10]]>
      </doc>
    </method>
    <method name="parseAndClose"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="destination" type="java.lang.Object"/>
      <param name="customizeParser" type="com.google.api.client.json.CustomizeJsonParser"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parse a JSON Object from the given JSON parser -- which is closed after parsing completes --
 into the given destination object, optionally using the given parser customizer.
 <p>
 Before this method is called, the parser must either point to the start or end of a JSON object
 or to a field name.
 </p>

 @param destination destination object
 @param customizeParser optional parser customizer or {@code null} for none]]>
      </doc>
    </method>
    <method name="parse" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="destinationClass" type="java.lang.Class&lt;T&gt;"/>
      <param name="customizeParser" type="com.google.api.client.json.CustomizeJsonParser"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parse a JSON object, array, or value into a new instance of the given destination class,
 optionally using the given parser customizer.
 <p>
 If it parses an object, after this method ends, the current token will be the object's ending
 {@link JsonToken#END_OBJECT}. If it parses an array, after this method ends, the current token
 will be the array's ending {@link JsonToken#END_ARRAY}.
 </p>

 @param <T> destination class type
 @param destinationClass destination class that has a public default constructor to use to
        create a new instance
 @param customizeParser optional parser customizer or {@code null} for none
 @return new instance of the parsed destination class]]>
      </doc>
    </method>
    <method name="parse" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dataType" type="java.lang.reflect.Type"/>
      <param name="close" type="boolean"/>
      <param name="customizeParser" type="com.google.api.client.json.CustomizeJsonParser"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parse a JSON object, array, or value into a new instance of the given destination class,
 optionally using the given parser customizer.
 <p>
 If it parses an object, after this method ends, the current token will be the object's ending
 {@link JsonToken#END_OBJECT}. If it parses an array, after this method ends, the current token
 will be the array's ending {@link JsonToken#END_ARRAY}.
 </p>

 @param dataType Type into which the JSON should be parsed
 @param close {@code true} if {@link #close()} should be called after parsing
 @param customizeParser optional parser customizer or {@code null} for none
 @return new instance of the parsed dataType
 @since 1.10]]>
      </doc>
    </method>
    <method name="parse"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="destination" type="java.lang.Object"/>
      <param name="customizeParser" type="com.google.api.client.json.CustomizeJsonParser"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parse a JSON object from the given JSON parser into the given destination object, optionally
 using the given parser customizer.
 <p>
 Before this method is called, the parser must either point to the start or end of a JSON object
 or to a field name. After this method ends, the current token will be the
 {@link JsonToken#END_OBJECT} of the current object.
 </p>

 @param destination destination object
 @param customizeParser optional parser customizer or {@code null} for none]]>
      </doc>
    </method>
    <method name="parseArrayAndClose" return="java.util.Collection&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="destinationCollectionClass" type="java.lang.Class&lt;?&gt;"/>
      <param name="destinationItemClass" type="java.lang.Class&lt;T&gt;"/>
      <param name="customizeParser" type="com.google.api.client.json.CustomizeJsonParser"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parse a JSON Array from the given JSON parser (which is closed after parsing completes) into
 the given destination collection, optionally using the given parser customizer.

 @param destinationCollectionClass class of destination collection (must have a public default
        constructor)
 @param destinationItemClass class of destination collection item (must have a public default
        constructor)
 @param customizeParser optional parser customizer or {@code null} for none]]>
      </doc>
    </method>
    <method name="parseArrayAndClose"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="destinationCollection" type="java.util.Collection&lt;? super T&gt;"/>
      <param name="destinationItemClass" type="java.lang.Class&lt;T&gt;"/>
      <param name="customizeParser" type="com.google.api.client.json.CustomizeJsonParser"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parse a JSON Array from the given JSON parser (which is closed after parsing completes) into
 the given destination collection, optionally using the given parser customizer.

 @param destinationCollection destination collection
 @param destinationItemClass class of destination collection item (must have a public default
        constructor)
 @param customizeParser optional parser customizer or {@code null} for none]]>
      </doc>
    </method>
    <method name="parseArray" return="java.util.Collection&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="destinationCollectionClass" type="java.lang.Class&lt;?&gt;"/>
      <param name="destinationItemClass" type="java.lang.Class&lt;T&gt;"/>
      <param name="customizeParser" type="com.google.api.client.json.CustomizeJsonParser"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parse a JSON Array from the given JSON parser into the given destination collection, optionally
 using the given parser customizer.

 @param destinationCollectionClass class of destination collection (must have a public default
        constructor)
 @param destinationItemClass class of destination collection item (must have a public default
        constructor)
 @param customizeParser optional parser customizer or {@code null} for none]]>
      </doc>
    </method>
    <method name="parseArray"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="destinationCollection" type="java.util.Collection&lt;? super T&gt;"/>
      <param name="destinationItemClass" type="java.lang.Class&lt;T&gt;"/>
      <param name="customizeParser" type="com.google.api.client.json.CustomizeJsonParser"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parse a JSON Array from the given JSON parser into the given destination collection, optionally
 using the given parser customizer.

 @param destinationCollection destination collection
 @param destinationItemClass class of destination collection item (must have a public default
        constructor)
 @param customizeParser optional parser customizer or {@code null} for none]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Abstract low-level JSON parser.

 <p>
 Implementation has no fields and therefore thread-safe, but sub-classes are not necessarily
 thread-safe.
 </p>

 <p>
 Upgrade warning: in prior version 1.13 there were methods {@code getUnsignedIntegerValue()} and
 {@code getUnsignedLongValue()}, but starting in version 1.14 they were removed. Instead use
 {@link #getLongValue()} and {@link #getBigIntegerValue()}.
 </p>

 @since 1.3
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.json.JsonParser -->
  <!-- start class com.google.api.client.json.JsonString -->
  <class name="JsonString"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.annotation.Annotation"/>
    <doc>
    <![CDATA[Use this annotation to specify that a declared numeric Java field should map to a JSON string.

 <p>
 By default declared Java numeric fields are stored as JSON numbers. For example:

 <pre>
 <code>
class A {
  &#64;Key BigInteger value;
}
 </code>
 </pre>

  can be used for this JSON content:

 <pre>
 <code>
{"value" : 12345768901234576890123457689012345768901234576890}
 </code>
 </pre>

  However, if instead the JSON content uses a JSON String to store the value, one needs to use the
 {@link JsonString} annotation. For example:

 <pre>
 <code>
class B {
  &#64;Key &#64;JsonString BigInteger value;
}
 </code>
 </pre>

  can be used for this JSON content:

 <pre>
 <code>
{"value" : "12345768901234576890123457689012345768901234576890"}
 </code>
 </pre>
 </p>

 @since 1.3
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.json.JsonString -->
  <!-- start class com.google.api.client.json.JsonToken -->
  <class name="JsonToken" extends="java.lang.Enum&lt;com.google.api.client.json.JsonToken&gt;"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="com.google.api.client.json.JsonToken[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="com.google.api.client.json.JsonToken"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[JSON token in the low-level JSON library.

 @since 1.3
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.json.JsonToken -->
</package>
<package name="com.google.api.client.json.gson">
  <!-- start class com.google.api.client.json.gson.GsonFactory -->
  <class name="GsonFactory" extends="com.google.api.client.json.JsonFactory"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="GsonFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
    </method>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <param name="charset" type="java.nio.charset.Charset"/>
    </method>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
    </method>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
    </method>
    <method name="createJsonGenerator" return="com.google.api.client.json.JsonGenerator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <param name="enc" type="java.nio.charset.Charset"/>
    </method>
    <method name="createJsonGenerator" return="com.google.api.client.json.JsonGenerator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="writer" type="java.io.Writer"/>
    </method>
    <doc>
    <![CDATA[Low-level JSON library implementation based on GSON.

 <p>
 Implementation is thread-safe, and sub-classes must be thread-safe. For maximum efficiency,
 applications should use a single globally-shared instance of the JSON factory.
 </p>

 @since 1.3
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.json.gson.GsonFactory -->
</package>
<package name="com.google.api.client.json.jackson">
  <!-- start class com.google.api.client.json.jackson.JacksonFactory -->
  <class name="JacksonFactory" extends="com.google.api.client.json.JsonFactory"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="JacksonFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="createJsonGenerator" return="com.google.api.client.json.JsonGenerator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <param name="enc" type="java.nio.charset.Charset"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="createJsonGenerator" return="com.google.api.client.json.JsonGenerator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="writer" type="java.io.Writer"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <param name="charset" type="java.nio.charset.Charset"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Low-level JSON library implementation based on Jackson.

 <p>
 Implementation is thread-safe, and sub-classes must be thread-safe. For maximum efficiency,
 applications should use a single globally-shared instance of the JSON factory.
 </p>

 @since 1.3
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.json.jackson.JacksonFactory -->
</package>
<package name="com.google.api.client.json.jackson2">
  <!-- start class com.google.api.client.json.jackson2.JacksonFactory -->
  <class name="JacksonFactory" extends="com.google.api.client.json.JsonFactory"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="JacksonFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="createJsonGenerator" return="com.google.api.client.json.JsonGenerator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <param name="enc" type="java.nio.charset.Charset"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="createJsonGenerator" return="com.google.api.client.json.JsonGenerator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="writer" type="java.io.Writer"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <param name="charset" type="java.nio.charset.Charset"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Low-level JSON library implementation based on Jackson 2.

 <p>
 Implementation is thread-safe, and sub-classes must be thread-safe. For maximum efficiency,
 applications should use a single globally-shared instance of the JSON factory.
 </p>

 @since 1.11
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.json.jackson2.JacksonFactory -->
</package>
<package name="com.google.api.client.json.rpc2">
  <!-- start class com.google.api.client.json.rpc2.JsonRpcRequest -->
  <class name="JsonRpcRequest" extends="com.google.api.client.util.GenericData"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JsonRpcRequest"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getVersion" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the version of the JSON-RPC protocol which is {@code "2.0"}.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getId" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the identifier established by the client that must be a string or a number or {@code
 null} for a notification and therefore not expect to receive a response.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setId"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="id" type="java.lang.Object"/>
      <doc>
      <![CDATA[Sets the identifier established by the client that must be a string or a number or {@code null}
 for a notification and therefore not expect to receive a response.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getMethod" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the name of the method to be invoked.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setMethod"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="method" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the name of the method to be invoked.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getParameters" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the structured value that holds the parameter values to be used during the invocation
 of the method or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setParameters"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parameters" type="java.lang.Object"/>
      <doc>
      <![CDATA[Sets the structured value that holds the parameter values to be used during the invocation of
 the method or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="set" return="com.google.api.client.json.rpc2.JsonRpcRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="clone" return="com.google.api.client.json.rpc2.JsonRpcRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[JSON-RPC 2.0 request object.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.json.rpc2.JsonRpcRequest -->
</package>
<package name="com.google.api.client.json.webtoken">
  <!-- start class com.google.api.client.json.webtoken.JsonWebSignature -->
  <class name="JsonWebSignature" extends="com.google.api.client.json.webtoken.JsonWebToken"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JsonWebSignature" type="com.google.api.client.json.webtoken.JsonWebSignature.Header, com.google.api.client.json.webtoken.JsonWebToken.Payload, byte[], byte[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param header header
 @param payload payload
 @param signatureBytes bytes of the signature
 @param signedContentBytes bytes of the signature content]]>
      </doc>
    </constructor>
    <method name="getHeader" return="com.google.api.client.json.webtoken.JsonWebSignature.Header"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="verifySignature" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="publicKey" type="java.security.PublicKey"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <doc>
      <![CDATA[Verifies the signature of the content.

 <p>
 Currently only {@code "RS256"} algorithm is verified, but others may be added in the future.
 For any other algorithm it returns {@code false}.
 </p>

 @param publicKey public key
 @return whether the algorithm is recognized and it is verified
 @throws GeneralSecurityException]]>
      </doc>
    </method>
    <method name="getSignatureBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the modifiable array of bytes of the signature.]]>
      </doc>
    </method>
    <method name="getSignedContentBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the modifiable array of bytes of the signature content.]]>
      </doc>
    </method>
    <method name="parse" return="com.google.api.client.json.webtoken.JsonWebSignature"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="com.google.api.client.json.JsonFactory"/>
      <param name="tokenString" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses the given JWS token string and returns the parsed {@link JsonWebSignature}.

 @param jsonFactory JSON factory
 @param tokenString JWS token string
 @return parsed JWS]]>
      </doc>
    </method>
    <method name="parser" return="com.google.api.client.json.webtoken.JsonWebSignature.Parser"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jsonFactory" type="com.google.api.client.json.JsonFactory"/>
      <doc>
      <![CDATA[Returns a new instance of a JWS parser.]]>
      </doc>
    </method>
    <method name="signUsingRsaSha256" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="privateKey" type="java.security.PrivateKey"/>
      <param name="jsonFactory" type="com.google.api.client.json.JsonFactory"/>
      <param name="header" type="com.google.api.client.json.webtoken.JsonWebSignature.Header"/>
      <param name="payload" type="com.google.api.client.json.webtoken.JsonWebToken.Payload"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Signs a given JWS header and payload based on the given private key using RSA and SHA-256 as
 described in <a
 href="http://tools.ietf.org/html/draft-ietf-jose-json-web-signature-08#appendix-A.2">JWS using
 RSA SHA-256</a>.

 @param privateKey private key
 @param jsonFactory JSON factory
 @param header JWS header
 @param payload JWS payload
 @return signed JWS string
 @since 1.14 (since 1.7 as com.google.api.client.auth.jsontoken.RsaSHA256Signer)]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<a href="http://tools.ietf.org/html/draft-ietf-jose-json-web-signature-08">JSON Web Signature
 (JWS)</a>.

 <p>
 Sample usage:
 </p>

 <pre>
  public static void printPayload(JsonFactory jsonFactory, String tokenString) throws IOException {
    JsonWebSignature jws = JsonWebSignature.parse(jsonFactory, tokenString);
    System.out.println(jws.getPayload());
  }
 </pre>

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.14 (since 1.7 as com.google.api.client.auth.jsontoken.JsonWebSignature)
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.json.webtoken.JsonWebSignature -->
  <!-- start class com.google.api.client.json.webtoken.JsonWebSignature.Header -->
  <class name="JsonWebSignature.Header" extends="com.google.api.client.json.webtoken.JsonWebToken.Header"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JsonWebSignature.Header"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="setType" return="com.google.api.client.json.webtoken.JsonWebSignature.Header"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.String"/>
    </method>
    <method name="getAlgorithm" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the algorithm header parameter that identifies the cryptographic algorithm used to
 secure the JWS or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setAlgorithm" return="com.google.api.client.json.webtoken.JsonWebSignature.Header"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="algorithm" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the algorithm header parameter that identifies the cryptographic algorithm used to
 secure the JWS or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getJwkUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON Web Key URL header parameter that is an absolute URL that refers to a
 resource for a set of JSON-encoded public keys, one of which corresponds to the key that was
 used to digitally sign the JWS or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setJwkUrl" return="com.google.api.client.json.webtoken.JsonWebSignature.Header"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jwkUrl" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the JSON Web Key URL header parameter that is an absolute URL that refers to a resource
 for a set of JSON-encoded public keys, one of which corresponds to the key that was used to
 digitally sign the JWS or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getJwk" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON Web Key header parameter that is a public key that corresponds to the key
 used to digitally sign the JWS or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setJwk" return="com.google.api.client.json.webtoken.JsonWebSignature.Header"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jwk" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the JSON Web Key header parameter that is a public key that corresponds to the key used
 to digitally sign the JWS or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getKeyId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the key ID header parameter that is a hint indicating which specific key owned by the
 signer should be used to validate the digital signature or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setKeyId" return="com.google.api.client.json.webtoken.JsonWebSignature.Header"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keyId" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the key ID header parameter that is a hint indicating which specific key owned by the
 signer should be used to validate the digital signature or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getX509Url" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the X.509 URL header parameter that is an absolute URL that refers to a resource for
 the X.509 public key certificate or certificate chain corresponding to the key used to
 digitally sign the JWS or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setX509Url" return="com.google.api.client.json.webtoken.JsonWebSignature.Header"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="x509Url" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the X.509 URL header parameter that is an absolute URL that refers to a resource for the
 X.509 public key certificate or certificate chain corresponding to the key used to digitally
 sign the JWS or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getX509Thumbprint" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the X.509 certificate thumbprint header parameter that provides a base64url encoded
 SHA-1 thumbprint (a.k.a. digest) of the DER encoding of an X.509 certificate that can be used
 to match the certificate or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setX509Thumbprint" return="com.google.api.client.json.webtoken.JsonWebSignature.Header"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="x509Thumbprint" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the X.509 certificate thumbprint header parameter that provides a base64url encoded
 SHA-1 thumbprint (a.k.a. digest) of the DER encoding of an X.509 certificate that can be used
 to match the certificate or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getX509Certificate" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the X.509 certificate chain header parameter contains the X.509 public key
 certificate or certificate chain corresponding to the key used to digitally sign the JWS or
 {@code null} for none.]]>
      </doc>
    </method>
    <method name="setX509Certificate" return="com.google.api.client.json.webtoken.JsonWebSignature.Header"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="x509Certificate" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the X.509 certificate chain header parameter contains the X.509 public key certificate
 or certificate chain corresponding to the key used to digitally sign the JWS or {@code null}
 for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="set" return="com.google.api.client.json.webtoken.JsonWebSignature.Header"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="clone" return="com.google.api.client.json.webtoken.JsonWebSignature.Header"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Header as specified in <a
 href="http://tools.ietf.org/html/draft-ietf-jose-json-web-signature-08#section-4.1">Reserved
 Header Parameter Names</a>.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.json.webtoken.JsonWebSignature.Header -->
  <!-- start class com.google.api.client.json.webtoken.JsonWebSignature.Parser -->
  <class name="JsonWebSignature.Parser" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="JsonWebSignature.Parser" type="com.google.api.client.json.JsonFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param jsonFactory JSON factory]]>
      </doc>
    </constructor>
    <method name="getHeaderClass" return="java.lang.Class&lt;? extends com.google.api.client.json.webtoken.JsonWebSignature.Header&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the header class to use for parsing.]]>
      </doc>
    </method>
    <method name="setHeaderClass" return="com.google.api.client.json.webtoken.JsonWebSignature.Parser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="headerClass" type="java.lang.Class&lt;? extends com.google.api.client.json.webtoken.JsonWebSignature.Header&gt;"/>
      <doc>
      <![CDATA[Sets the header class to use for parsing.]]>
      </doc>
    </method>
    <method name="getPayloadClass" return="java.lang.Class&lt;? extends com.google.api.client.json.webtoken.JsonWebToken.Payload&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the payload class to use for parsing.]]>
      </doc>
    </method>
    <method name="setPayloadClass" return="com.google.api.client.json.webtoken.JsonWebSignature.Parser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="payloadClass" type="java.lang.Class&lt;? extends com.google.api.client.json.webtoken.JsonWebToken.Payload&gt;"/>
      <doc>
      <![CDATA[Sets the payload class to use for parsing.]]>
      </doc>
    </method>
    <method name="getJsonFactory" return="com.google.api.client.json.JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JSON factory.]]>
      </doc>
    </method>
    <method name="parse" return="com.google.api.client.json.webtoken.JsonWebSignature"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="tokenString" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses a JWS token into a parsed {@link JsonWebSignature}.

 @param tokenString JWS token string
 @return parsed {@link JsonWebSignature}]]>
      </doc>
    </method>
    <doc>
    <![CDATA[JWS parser.

 <p>
 Implementation is not thread-safe.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.json.webtoken.JsonWebSignature.Parser -->
  <!-- start class com.google.api.client.json.webtoken.JsonWebToken -->
  <class name="JsonWebToken" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JsonWebToken" type="com.google.api.client.json.webtoken.JsonWebToken.Header, com.google.api.client.json.webtoken.JsonWebToken.Payload"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param header header
 @param payload payload]]>
      </doc>
    </constructor>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getHeader" return="com.google.api.client.json.webtoken.JsonWebToken.Header"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the header.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getPayload" return="com.google.api.client.json.webtoken.JsonWebToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the payload.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[<a href="http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-06">JSON Web Token (JWT)</a>.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.14 (since 1.7 as com.google.api.client.auth.jsontoken.JsonWebToken)
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.json.webtoken.JsonWebToken -->
  <!-- start class com.google.api.client.json.webtoken.JsonWebToken.Header -->
  <class name="JsonWebToken.Header" extends="com.google.api.client.json.GenericJson"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JsonWebToken.Header"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the type header parameter used to declare the type of this object or {@code null} for
 none.]]>
      </doc>
    </method>
    <method name="setType" return="com.google.api.client.json.webtoken.JsonWebToken.Header"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the type header parameter used to declare the type of this object or {@code null} for
 none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getContentType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the content type header parameter used to declare structural information about the
 JWT or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setContentType" return="com.google.api.client.json.webtoken.JsonWebToken.Header"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contentType" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the content type header parameter used to declare structural information about the JWT
 or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="set" return="com.google.api.client.json.webtoken.JsonWebToken.Header"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="clone" return="com.google.api.client.json.webtoken.JsonWebToken.Header"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Header as specified in <a
 href="http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-06#section-5">JWT Header</a>.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.json.webtoken.JsonWebToken.Header -->
  <!-- start class com.google.api.client.json.webtoken.JsonWebToken.Payload -->
  <class name="JsonWebToken.Payload" extends="com.google.api.client.json.GenericJson"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="JsonWebToken.Payload"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getExpirationTimeSeconds" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the expiration time (in seconds) claim that identifies the expiration time on or
 after which the token MUST NOT be accepted for processing or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setExpirationTimeSeconds" return="com.google.api.client.json.webtoken.JsonWebToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="expirationTimeSeconds" type="java.lang.Long"/>
      <doc>
      <![CDATA[Sets the expiration time claim that identifies the expiration time (in seconds) on or after
 which the token MUST NOT be accepted for processing or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getNotBeforeTimeSeconds" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the not before claim that identifies the time (in seconds) before which the token
 MUST NOT be accepted for processing or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setNotBeforeTimeSeconds" return="com.google.api.client.json.webtoken.JsonWebToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="notBeforeTimeSeconds" type="java.lang.Long"/>
      <doc>
      <![CDATA[Sets the not before claim that identifies the time (in seconds) before which the token MUST
 NOT be accepted for processing or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getIssuedAtTimeSeconds" return="java.lang.Long"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the issued at claim that identifies the time (in seconds) at which the JWT was issued
 or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setIssuedAtTimeSeconds" return="com.google.api.client.json.webtoken.JsonWebToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="issuedAtTimeSeconds" type="java.lang.Long"/>
      <doc>
      <![CDATA[Sets the issued at claim that identifies the time (in seconds) at which the JWT was issued or
 {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getIssuer" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the issuer claim that identifies the principal that issued the JWT or {@code null}
 for none.]]>
      </doc>
    </method>
    <method name="setIssuer" return="com.google.api.client.json.webtoken.JsonWebToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="issuer" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the issuer claim that identifies the principal that issued the JWT or {@code null} for
 none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getAudience" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the audience claim that identifies the audience that the JWT is intended for (should
 either be a {@code String} or a {@code List<String>}) or {@code null} for none.]]>
      </doc>
    </method>
    <method name="getAudienceAsList" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the list of audience claim that identifies the audience that the JWT is intended for
 or empty for none.]]>
      </doc>
    </method>
    <method name="setAudience" return="com.google.api.client.json.webtoken.JsonWebToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="audience" type="java.lang.Object"/>
      <doc>
      <![CDATA[Sets the audience claim that identifies the audience that the JWT is intended for (should
 either be a {@code String} or a {@code List<String>}) or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getJwtId" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the JWT ID claim that provides a unique identifier for the JWT or {@code null} for
 none.]]>
      </doc>
    </method>
    <method name="setJwtId" return="com.google.api.client.json.webtoken.JsonWebToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="jwtId" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the JWT ID claim that provides a unique identifier for the JWT or {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the type claim that is used to declare a type for the contents of this JWT Claims Set
 or {@code null} for none.]]>
      </doc>
    </method>
    <method name="setType" return="com.google.api.client.json.webtoken.JsonWebToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the type claim that is used to declare a type for the contents of this JWT Claims Set or
 {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="getSubject" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the subject claim identifying the principal that is the subject of the JWT or
 {@code null} for none.]]>
      </doc>
    </method>
    <method name="setSubject" return="com.google.api.client.json.webtoken.JsonWebToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="subject" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the subject claim identifying the principal that is the subject of the JWT or
 {@code null} for none.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="set" return="com.google.api.client.json.webtoken.JsonWebToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="clone" return="com.google.api.client.json.webtoken.JsonWebToken.Payload"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Payload as specified in <a
 href="http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-06#section-4.1">Reserved Claim
 Names</a>.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.json.webtoken.JsonWebToken.Payload -->
</package>
<package name="com.google.api.client.protobuf">
  <!-- start class com.google.api.client.protobuf.ProtocolBuffers -->
  <class name="ProtocolBuffers" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="parseAndClose" return="T extends MessageLite"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inputStream" type="java.io.InputStream"/>
      <param name="messageClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses protocol buffer content from an input stream (closing the input stream) into a protocol
 buffer message.

 @param <T> destination message type
 @param messageClass destination message class that has a {@code parseFrom(InputStream)} public
        static method
 @return new instance of the parsed destination message class]]>
      </doc>
    </method>
    <field name="CONTENT_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "application/x-protobuf"} content type.]]>
      </doc>
    </field>
    <field name="ALT_CONTENT_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "application/x-protobuffer"} content type.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for protocol buffers.

 <p>
 There is no official media type for protocol buffers registered with the <a
 href="http://www.iana.org/assignments/media-types/application/index.html">IANA</a>.
 {@link #CONTENT_TYPE} and {@link #ALT_CONTENT_TYPE} are some of the more popular choices being
 used today, but other media types are also in use.
 </p>

 @since 1.5
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.protobuf.ProtocolBuffers -->
  <!-- start class com.google.api.client.protobuf.ProtoObjectParser -->
  <class name="ProtoObjectParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.util.ObjectParser"/>
    <constructor name="ProtoObjectParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="parseAndClose" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <param name="charset" type="java.nio.charset.Charset"/>
      <param name="dataClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="parseAndClose" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <param name="charset" type="java.nio.charset.Charset"/>
      <param name="dataType" type="java.lang.reflect.Type"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="parseAndClose" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <param name="dataClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="parseAndClose" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <param name="dataType" type="java.lang.reflect.Type"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Parses protocol buffer HTTP response content into a protocol buffer message.

 <p>
 Implementation is immutable and therefore thread-safe.
 </p>

 <p>
 Data-classes are expected to extend {@link MessageLite}.
 </p>

 <p>
 All Charset parameters are ignored for protocol buffers.
 </p>

 @author Matthias Linder (mlinder)
 @since 1.10]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.protobuf.ProtoObjectParser -->
</package>
<package name="com.google.api.client.testing.http">
  <!-- start class com.google.api.client.testing.http.FixedClock -->
  <class name="FixedClock" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.util.Clock"/>
    <constructor name="FixedClock"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Initializes the FixedClock with 0 millis as start time.]]>
      </doc>
    </constructor>
    <constructor name="FixedClock" type="long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Initializes the FixedClock with the specified time.
 @param startTime time in milliseconds used for initialization.]]>
      </doc>
    </constructor>
    <method name="setTime" return="com.google.api.client.testing.http.FixedClock"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="newTime" type="long"/>
      <doc>
      <![CDATA[Changes the time value this time provider is returning.
 @param newTime New time in milliseconds.]]>
      </doc>
    </method>
    <method name="currentTimeMillis" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[A thread-safe fixed time implementation of the Clock to be used for unit testing.

 <p>
 Explicitly allows you to set the time to any arbitrary value.
 </p>

 @since 1.9
 @author mlinder@google.com (Matthias Linder)]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.testing.http.FixedClock -->
  <!-- start class com.google.api.client.testing.http.HttpTesting -->
  <class name="HttpTesting" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="SIMPLE_URL" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A simple string URL for testing of value {@code "http://google.com/"}.]]>
      </doc>
    </field>
    <field name="SIMPLE_GENERIC_URL" type="com.google.api.client.http.GenericUrl"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A simple generic URL for testing of value {@link #SIMPLE_URL}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities and constants related to testing the HTTP library.

 @author Yaniv Inbar
 @since 1.6]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.testing.http.HttpTesting -->
  <!-- start class com.google.api.client.testing.http.MockHttpContent -->
  <class name="MockHttpContent" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.http.HttpContent"/>
    <constructor name="MockHttpContent"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getEncoding" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="retrySupported" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getContent" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP content.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setContent" return="com.google.api.client.testing.http.MockHttpContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="content" type="byte[]"/>
      <doc>
      <![CDATA[Sets the HTTP content.

 <p>
 Default value is an empty byte array.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="setEncoding" return="com.google.api.client.testing.http.MockHttpContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="(scheduled to be removed in 1.15) Use {@link HttpEncoding} instead.">
      <param name="encoding" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the HTTP content encoding or {@code null} for none.

 @since 1.5
 @deprecated (scheduled to be removed in 1.15) Use {@link HttpEncoding} instead.]]>
      </doc>
    </method>
    <method name="setLength" return="com.google.api.client.testing.http.MockHttpContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="length" type="long"/>
      <doc>
      <![CDATA[Returns the HTTP content length or {@code -1} for unknown.

 <p>
 Default value is {@code -1}.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="setType" return="com.google.api.client.testing.http.MockHttpContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the HTTP content type or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Mock for {@link HttpContent}.

 <p>
 Implementation is not thread-safe.
 </p>

 @author Yaniv Inbar
 @since 1.3]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.testing.http.MockHttpContent -->
  <!-- start class com.google.api.client.testing.http.MockHttpTransport -->
  <class name="MockHttpTransport" extends="com.google.api.client.http.HttpTransport"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MockHttpTransport"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="MockHttpTransport" type="com.google.api.client.testing.http.MockHttpTransport.Builder"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param builder builder

 @since 1.14]]>
      </doc>
    </constructor>
    <constructor name="MockHttpTransport" type="java.util.Set&lt;java.lang.String&gt;"
      static="false" final="false" visibility="protected"
      deprecated="(scheduled to be removed in 1.15) Use {@link #MockHttpTransport(Builder)}">
      <doc>
      <![CDATA[@param supportedMethods supported HTTP methods or {@code null} to specify that all methods are
        supported

 @since 1.12
 @deprecated (scheduled to be removed in 1.15) Use {@link #MockHttpTransport(Builder)}]]>
      </doc>
    </constructor>
    <method name="supportsMethod" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="method" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="buildRequest" return="com.google.api.client.http.LowLevelHttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="method" type="java.lang.String"/>
      <param name="url" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[{@inheritDoc}

 <p>
 Upgrade warning: in prior version 1.13 this method was protected, but starting with version
 1.14 this method is public.
 </p>]]>
      </doc>
    </method>
    <method name="getSupportedMethods" return="java.util.Set&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the unmodifiable set of supported HTTP methods or {@code null} to specify that all
 methods are supported.]]>
      </doc>
    </method>
    <method name="builder" return="com.google.api.client.testing.http.MockHttpTransport.Builder"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an instance of a new builder.

 @since 1.5]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Mock for {@link HttpTransport}.

 <p>
 Implementation is thread-safe. For maximum efficiency, applications should use a single
 globally-shared instance of the HTTP transport.
 </p>

 @author Yaniv Inbar
 @since 1.3]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.testing.http.MockHttpTransport -->
  <!-- start class com.google.api.client.testing.http.MockHttpTransport.Builder -->
  <class name="MockHttpTransport.Builder" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MockHttpTransport.Builder"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
    </constructor>
    <method name="build" return="com.google.api.client.testing.http.MockHttpTransport"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Builds a new instance of {@link MockHttpTransport}.]]>
      </doc>
    </method>
    <method name="getSupportedMethods" return="java.util.Set&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the supported HTTP methods or {@code null} to specify that all methods are supported.]]>
      </doc>
    </method>
    <method name="setSupportedMethods" return="com.google.api.client.testing.http.MockHttpTransport.Builder"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="supportedMethods" type="java.util.Set&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Sets the supported HTTP methods or {@code null} to specify that all methods are supported.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Builder for {@link MockHttpTransport}.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.5]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.testing.http.MockHttpTransport.Builder -->
  <!-- start class com.google.api.client.testing.http.MockHttpUnsuccessfulResponseHandler -->
  <class name="MockHttpUnsuccessfulResponseHandler" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.http.HttpUnsuccessfulResponseHandler"/>
    <constructor name="MockHttpUnsuccessfulResponseHandler" type="boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Create an instance of {@code MockHttpUnsuccessfulResponseHandler}.

 @param successfullyHandleResponse This will be the return value of {@link #handleResponse}]]>
      </doc>
    </constructor>
    <method name="isCalled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether the {@link #handleResponse} method was called or not.]]>
      </doc>
    </method>
    <method name="handleResponse" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="request" type="com.google.api.client.http.HttpRequest"/>
      <param name="response" type="com.google.api.client.http.HttpResponse"/>
      <param name="supportsRetry" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Mock for {@link HttpUnsuccessfulResponseHandler}.

 <p>
 Contains an {@link #isCalled} method that returns true if {@link #handleResponse} is called.
 </p>

 @author Ravi Mistry
 @since 1.6]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.testing.http.MockHttpUnsuccessfulResponseHandler -->
  <!-- start class com.google.api.client.testing.http.MockLowLevelHttpRequest -->
  <class name="MockLowLevelHttpRequest" extends="com.google.api.client.http.LowLevelHttpRequest"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MockLowLevelHttpRequest"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <constructor name="MockLowLevelHttpRequest" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param url Request URL or {@code null} for none
 @since 1.4]]>
      </doc>
    </constructor>
    <method name="addHeader"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="execute" return="com.google.api.client.http.LowLevelHttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="setContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="content" type="com.google.api.client.http.HttpContent"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getUrl" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the request URL or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getHeaders" return="java.util.Map&lt;java.lang.String, java.util.List&lt;java.lang.String&gt;&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an unmodifiable view of the map of lowercase header name to values.

 <p>
 Note that unlike this method, {@link #getFirstHeaderValue(String)} and
 {@link #getHeaderValues(String)} are not case sensitive with respect to the input header name.
 </p>

 <p>
 Upgrade warning: in prior version 1.13 the keys could be in any case, but starting with version
 1.14, the keys will all be lowercase.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getFirstHeaderValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the value of the first header of the given name or {@code null} for none.

 @param name header name (may be any case)
 @since 1.13]]>
      </doc>
    </method>
    <method name="getHeaderValues" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the unmodifiable list of values of the headers of the given name (may be empty).

 @param name header name (may be any case)
 @since 1.13]]>
      </doc>
    </method>
    <method name="setUrl" return="com.google.api.client.testing.http.MockLowLevelHttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="url" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the request URL or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getContent" return="com.google.api.client.http.HttpContent"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="(scheduled to be removed in 1.15) Use {@link #getContentLength()},
             {@link #getContentEncoding()}, {@link #getContentType()}, or
             {@link #getStreamingContent()} instead.">
      <doc>
      <![CDATA[Returns the HTTP content or {@code null} for none.

 @since 1.5
 @deprecated (scheduled to be removed in 1.15) Use {@link #getContentLength()},
             {@link #getContentEncoding()}, {@link #getContentType()}, or
             {@link #getStreamingContent()} instead.]]>
      </doc>
    </method>
    <method name="getContentAsString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Returns HTTP content as a string, taking care of any encodings of the content if necessary.

 <p>
 Returns an empty string if there is no HTTP content.
 </p>

 @since 1.12]]>
      </doc>
    </method>
    <method name="getResponse" return="com.google.api.client.testing.http.MockLowLevelHttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[HTTP response to return from {@link #execute()}.

 @since 1.8]]>
      </doc>
    </method>
    <method name="setResponse" return="com.google.api.client.testing.http.MockLowLevelHttpRequest"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="response" type="com.google.api.client.testing.http.MockLowLevelHttpResponse"/>
      <doc>
      <![CDATA[Sets the HTTP response to return from {@link #execute()}.

 <p>
 By default this is a new instance of {@link MockLowLevelHttpResponse}.
 </p>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Mock for {@link LowLevelHttpRequest}.

 <p>
 Implementation is not thread-safe.
 </p>

 @author Yaniv Inbar
 @since 1.3]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.testing.http.MockLowLevelHttpRequest -->
  <!-- start class com.google.api.client.testing.http.MockLowLevelHttpResponse -->
  <class name="MockLowLevelHttpResponse" extends="com.google.api.client.http.LowLevelHttpResponse"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MockLowLevelHttpResponse"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="addHeader" return="com.google.api.client.testing.http.MockLowLevelHttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds a header to the response.

 <p>
 Upgrade warning: in prior version 1.13 this method was void, but starting with version 1.14 it
 now returns this instance.
 </p>
 @param name header name
 @param value header value]]>
      </doc>
    </method>
    <method name="setContent" return="com.google.api.client.testing.http.MockLowLevelHttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="stringContent" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the response content to the given content string.

 <p>
 If the input string is {@code null}, it will set the content to {@code null}. Else, it will use
 {@link TestableByteArrayInputStream} with the UTF-8 encoded string content.
 </p>

 <p>
 Upgrade warning: in prior version 1.13 it used {@link ByteArrayInputStream}, but starting with
 version 1.14 it uses the subclass {@link TestableByteArrayInputStream}.
 </p>

 @param stringContent content string or {@code null} for none]]>
      </doc>
    </method>
    <method name="getContent" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getContentEncoding" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getContentLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getContentType" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getHeaderCount" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getHeaderName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
    </method>
    <method name="getHeaderValue" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
    </method>
    <method name="getReasonPhrase" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getStatusCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getStatusLine" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getHeaderNames" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the list of header names of HTTP response.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setHeaderNames" return="com.google.api.client.testing.http.MockLowLevelHttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="headerNames" type="java.util.List&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Sets the list of header names of HTTP response.

 <p>
 Default value is an empty list.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="getHeaderValues" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the list of header values of HTTP response.

 <p>
 Default value is an empty list.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="setHeaderValues" return="com.google.api.client.testing.http.MockLowLevelHttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="headerValues" type="java.util.List&lt;java.lang.String&gt;"/>
      <doc>
      <![CDATA[Sets the list of header values of HTTP response.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setContent" return="com.google.api.client.testing.http.MockLowLevelHttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="content" type="java.io.InputStream"/>
      <doc>
      <![CDATA[Sets the input stream content of HTTP response or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setContentType" return="com.google.api.client.testing.http.MockLowLevelHttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contentType" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the content type of HTTP response or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setContentEncoding" return="com.google.api.client.testing.http.MockLowLevelHttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contentEncoding" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the content encoding or {@code null} for none.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setContentLength" return="com.google.api.client.testing.http.MockLowLevelHttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contentLength" type="long"/>
      <doc>
      <![CDATA[Sets the content length or {@code -1} for unknown.

 <p>
 By default it is {@code -1}.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="setStatusCode" return="com.google.api.client.testing.http.MockLowLevelHttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="statusCode" type="int"/>
      <doc>
      <![CDATA[Sets the status code of HTTP response.

 <p>
 Default value is {@code 200}.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="setReasonPhrase" return="com.google.api.client.testing.http.MockLowLevelHttpResponse"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reasonPhrase" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the HTTP reason phrase or {@code null} for none.

 @since 1.6]]>
      </doc>
    </method>
    <method name="disconnect"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="isDisconnected" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether {@link #disconnect()} has been called.

 @since 1.14]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Mock for {@link LowLevelHttpResponse}.

 <p>
 Implementation is not thread-safe.
 </p>

 @author Yaniv Inbar
 @since 1.3]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.testing.http.MockLowLevelHttpResponse -->
</package>
<package name="com.google.api.client.testing.http.apache">
  <!-- start class com.google.api.client.testing.http.apache.MockHttpClient -->
  <class name="MockHttpClient" extends="DefaultHttpClient"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MockHttpClient"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="createClientRequestDirector" return="RequestDirector"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="requestExec" type="HttpRequestExecutor"/>
      <param name="conman" type="ClientConnectionManager"/>
      <param name="reustrat" type="ConnectionReuseStrategy"/>
      <param name="kastrat" type="ConnectionKeepAliveStrategy"/>
      <param name="rouplan" type="HttpRoutePlanner"/>
      <param name="httpProcessor" type="HttpProcessor"/>
      <param name="retryHandler" type="HttpRequestRetryHandler"/>
      <param name="redirectHandler" type="RedirectHandler"/>
      <param name="targetAuthHandler" type="AuthenticationHandler"/>
      <param name="proxyAuthHandler" type="AuthenticationHandler"/>
      <param name="stateHandler" type="UserTokenHandler"/>
      <param name="params" type="HttpParams"/>
    </method>
    <method name="getResponseCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the HTTP response code to use.]]>
      </doc>
    </method>
    <method name="setResponseCode" return="com.google.api.client.testing.http.apache.MockHttpClient"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="responseCode" type="int"/>
      <doc>
      <![CDATA[Sets the HTTP response code to use.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Mock for {@link HttpClient} that does not actually make any network calls.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.testing.http.apache.MockHttpClient -->
</package>
<package name="com.google.api.client.testing.http.javanet">
  <!-- start class com.google.api.client.testing.http.javanet.MockHttpURLConnection -->
  <class name="MockHttpURLConnection" extends="java.net.HttpURLConnection"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MockHttpURLConnection" type="java.net.URL"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param u the URL or {@code null} for none]]>
      </doc>
    </constructor>
    <method name="disconnect"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="usingProxy" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="connect"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getResponseCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="setDoOutput"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="dooutput" type="boolean"/>
    </method>
    <method name="getOutputStream" return="java.io.OutputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="doOutputCalled" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether {@link #doOutput} was called.]]>
      </doc>
    </method>
    <method name="setOutputStream" return="com.google.api.client.testing.http.javanet.MockHttpURLConnection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="outputStream" type="java.io.OutputStream"/>
      <doc>
      <![CDATA[Sets the output stream or {@code null} to throw an {@link UnknownServiceException} when
 {@link #getOutputStream()} is called.

 <p>
 By default it is {@code null}.
 </p>]]>
      </doc>
    </method>
    <method name="setResponseCode" return="com.google.api.client.testing.http.javanet.MockHttpURLConnection"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="responseCode" type="int"/>
      <doc>
      <![CDATA[Sets the HTTP response status code.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Mock for {@link HttpURLConnection}.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.11
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.testing.http.javanet.MockHttpURLConnection -->
</package>
<package name="com.google.api.client.testing.http.json">
  <!-- start class com.google.api.client.testing.http.json.MockJsonFactory -->
  <class name="MockJsonFactory" extends="com.google.api.client.json.JsonFactory"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="MockJsonFactory"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <param name="charset" type="java.nio.charset.Charset"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="createJsonParser" return="com.google.api.client.json.JsonParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="createJsonGenerator" return="com.google.api.client.json.JsonGenerator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <param name="enc" type="java.nio.charset.Charset"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="createJsonGenerator" return="com.google.api.client.json.JsonGenerator"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="writer" type="java.io.Writer"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Mock for {@link JsonFactory}.

 <p>
 Implementation is thread-safe.
 </p>

 @author rmistry@google.com (Ravi Mistry)
 @since 1.11]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.testing.http.json.MockJsonFactory -->
  <!-- start class com.google.api.client.testing.http.json.MockJsonGenerator -->
  <class name="MockJsonGenerator" extends="com.google.api.client.json.JsonGenerator"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getFactory" return="com.google.api.client.json.JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="flush"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeStartArray"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeEndArray"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeStartObject"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeEndObject"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeFieldName"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeNull"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeString"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeBoolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="state" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeNumber"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeNumber"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="long"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeNumber"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="java.math.BigInteger"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeNumber"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="float"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeNumber"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="double"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeNumber"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="v" type="java.math.BigDecimal"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="writeNumber"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="encodedValue" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Mock for {@link JsonGenerator}.

 <p>
 Implementation is thread-safe.
 </p>

 @author rmistry@google.com (Ravi Mistry)
 @since 1.11]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.testing.http.json.MockJsonGenerator -->
  <!-- start class com.google.api.client.testing.http.json.MockJsonParser -->
  <class name="MockJsonParser" extends="com.google.api.client.json.JsonParser"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getFactory" return="com.google.api.client.json.JsonFactory"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="nextToken" return="com.google.api.client.json.JsonToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getCurrentToken" return="com.google.api.client.json.JsonToken"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getCurrentName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="skipChildren" return="com.google.api.client.json.JsonParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getText" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getByteValue" return="byte"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getShortValue" return="short"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getIntValue" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getFloatValue" return="float"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getLongValue" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getDoubleValue" return="double"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getBigIntegerValue" return="java.math.BigInteger"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getDecimalValue" return="java.math.BigDecimal"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Mock for {@link JsonParser}.

 <p>
 Implementation is thread-safe.
 </p>

 @author rmistry@google.com (Ravi Mistry)
 @since 1.11]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.testing.http.json.MockJsonParser -->
</package>
<package name="com.google.api.client.testing.util">
  <!-- start class com.google.api.client.testing.util.LogRecordingHandler -->
  <class name="LogRecordingHandler" extends="java.util.logging.Handler"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LogRecordingHandler"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="publish"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="record" type="java.util.logging.LogRecord"/>
    </method>
    <method name="flush"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="SecurityException" type="java.lang.SecurityException"/>
    </method>
    <method name="messages" return="java.util.List&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new instance of a list of published record messages.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Logging handler that stores log records.

 @author Yaniv Inbar
 @since 1.14]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.testing.util.LogRecordingHandler -->
  <!-- start class com.google.api.client.testing.util.SecurityTestUtils -->
  <class name="SecurityTestUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="newEncodedRsaPrivateKeyBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new copy of a sample encoded RSA private key that matches
 {@link #newEncodedRsaPublicKeyBytes()}.]]>
      </doc>
    </method>
    <method name="newEncodedRsaPublicKeyBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new copy of a sample encoded public key that matches
 {@link #newEncodedRsaPrivateKeyBytes()}.]]>
      </doc>
    </method>
    <method name="newRsaPrivateKey" return="java.security.interfaces.RSAPrivateKey"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <doc>
      <![CDATA[Returns a new sample RSA private key that matches {@link #newRsaPublicKey()}.]]>
      </doc>
    </method>
    <method name="newRsaPublicKey" return="java.security.interfaces.RSAPublicKey"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <doc>
      <![CDATA[Returns a new sample RSA public key that matches {@link #newRsaPrivateKey()}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Utilities and constants related to testing the library {@code util} package.

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.testing.util.SecurityTestUtils -->
  <!-- start class com.google.api.client.testing.util.TestableByteArrayInputStream -->
  <class name="TestableByteArrayInputStream" extends="java.io.ByteArrayInputStream"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TestableByteArrayInputStream" type="byte[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param buf buffer]]>
      </doc>
    </constructor>
    <constructor name="TestableByteArrayInputStream" type="byte[], int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param buf buffer
 @param offset offset in the buffer of the first byte to read
 @param length maximum number of bytes to read from the buffer]]>
      </doc>
    </constructor>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[{@inheritDoc}

 <p>
 Overriding is supported, but overriding method must call the super implementation.
 </p>]]>
      </doc>
    </method>
    <method name="getBuffer" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the written buffer value as a modifiable byte array.]]>
      </doc>
    </method>
    <method name="isClosed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether the output stream has been closed.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Testable extension for a byte array input stream.

 @author Yaniv Inbar
 @since 1.14]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.testing.util.TestableByteArrayInputStream -->
  <!-- start class com.google.api.client.testing.util.TestableByteArrayOutputStream -->
  <class name="TestableByteArrayOutputStream" extends="java.io.ByteArrayOutputStream"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="TestableByteArrayOutputStream"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[{@inheritDoc}

 <p>
 Overriding is supported, but overriding method must call the super implementation.
 </p>]]>
      </doc>
    </method>
    <method name="getBuffer" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the written buffer value as a modifiable byte array.]]>
      </doc>
    </method>
    <method name="isClosed" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether the output stream has been closed.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Testable extension for a byte array output stream.

 @author Yaniv Inbar
 @since 1.14]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.testing.util.TestableByteArrayOutputStream -->
</package>
<package name="com.google.api.client.util">
  <!-- start class com.google.api.client.util.ArrayMap -->
  <class name="ArrayMap" extends="java.util.AbstractMap&lt;K, V&gt;"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Cloneable"/>
    <constructor name="ArrayMap"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="create" return="com.google.api.client.util.ArrayMap&lt;K, V&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new instance of an array map with initial capacity of zero. Equivalent to calling the
 default constructor, except without the need to specify the type parameters. For example:
 {@code ArrayMap<String, String> map = ArrayMap.create();}.]]>
      </doc>
    </method>
    <method name="create" return="com.google.api.client.util.ArrayMap&lt;K, V&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="initialCapacity" type="int"/>
      <doc>
      <![CDATA[Returns a new instance of an array map of the given initial capacity. For example: {@code
 ArrayMap<String, String> map = ArrayMap.create(8);}.]]>
      </doc>
    </method>
    <method name="of" return="com.google.api.client.util.ArrayMap&lt;K, V&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keyValuePairs" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[Returns a new instance of an array map of the given key value pairs in alternating order. For
 example: {@code ArrayMap<String, String> map = ArrayMap.of("key1", "value1", "key2", "value2",
 ...);}.
 <p>
 WARNING: there is no compile-time checking of the {@code keyValuePairs} parameter to ensure
 that the keys or values have the correct type, so if the wrong type is passed in, any problems
 will occur at runtime. Also, there is no checking that the keys are unique, which the caller
 must ensure is true.]]>
      </doc>
    </method>
    <method name="size" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the number of key-value pairs set.]]>
      </doc>
    </method>
    <method name="getKey" return="K"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns the key at the given index or {@code null} if out of bounds.]]>
      </doc>
    </method>
    <method name="getValue" return="V"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns the value at the given index or {@code null} if out of bounds.]]>
      </doc>
    </method>
    <method name="set" return="V"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <param name="key" type="K"/>
      <param name="value" type="V"/>
      <doc>
      <![CDATA[Sets the key/value mapping at the given index, overriding any existing key/value mapping.
 <p>
 There is no checking done to ensure that the key does not already exist. Therefore, this method
 is dangerous to call unless the caller can be certain the key does not already exist in the
 map.

 @return previous value or {@code null} for none
 @throws IndexOutOfBoundsException if index is negative]]>
      </doc>
    </method>
    <method name="set" return="V"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <param name="value" type="V"/>
      <doc>
      <![CDATA[Sets the value at the given index, overriding any existing value mapping.

 @return previous value or {@code null} for none
 @throws IndexOutOfBoundsException if index is negative or {@code >=} size]]>
      </doc>
    </method>
    <method name="add"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="K"/>
      <param name="value" type="V"/>
      <doc>
      <![CDATA[Adds the key/value mapping at the end of the list. Behaves identically to {@code set(size(),
 key, value)}.

 @throws IndexOutOfBoundsException if index is negative]]>
      </doc>
    </method>
    <method name="remove" return="V"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Removes the key/value mapping at the given index, or ignored if the index is out of bounds.

 @return previous value or {@code null} for none]]>
      </doc>
    </method>
    <method name="containsKey" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns whether there is a mapping for the given key.]]>
      </doc>
    </method>
    <method name="getIndexOfKey" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="K"/>
      <doc>
      <![CDATA[Returns the index of the given key or {@code -1} if there is no such key.]]>
      </doc>
    </method>
    <method name="get" return="V"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns the value set for the given key or {@code null} if there is no such mapping or if the
 mapping value is {@code null}.]]>
      </doc>
    </method>
    <method name="put" return="V"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="K"/>
      <param name="value" type="V"/>
      <doc>
      <![CDATA[Sets the value for the given key, overriding any existing value.

 @return previous value or {@code null} for none]]>
      </doc>
    </method>
    <method name="remove" return="V"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="key" type="java.lang.Object"/>
      <doc>
      <![CDATA[Removes the key-value pair of the given key, or ignore if the key cannot be found.

 @return previous value or {@code null} for none]]>
      </doc>
    </method>
    <method name="trim"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Trims the internal array storage to minimize memory usage.]]>
      </doc>
    </method>
    <method name="ensureCapacity"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="minCapacity" type="int"/>
      <doc>
      <![CDATA[Ensures that the capacity of the internal arrays is at least a given capacity.]]>
      </doc>
    </method>
    <method name="clear"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="containsValue" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="entrySet" return="java.util.Set&lt;java.util.Map.Entry&lt;K, V&gt;&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="com.google.api.client.util.ArrayMap&lt;K, V&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <doc>
    <![CDATA[Memory-efficient map of keys to values with list-style random-access semantics.

 <p>
 Supports null keys and values. Conceptually, the keys and values are stored in a simpler array in
 order to minimize memory use and provide for fast access to a key/value at a certain index (for
 example {@link #getKey(int)}). However, traditional mapping operations like {@link #get(Object)}
 and {@link #put(Object, Object)} are slower because they need to look up all key/value pairs in
 the worst case.
 </p>

 <p>
 Implementation is not thread-safe. For a thread-safe choice instead use an implementation of
 {@link ConcurrentMap}.
 </p>

 @param <K> the type of keys maintained by this map
 @param <V> the type of mapped values

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.ArrayMap -->
  <!-- start class com.google.api.client.util.ArrayValueMap -->
  <class name="ArrayValueMap" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="ArrayValueMap" type="java.lang.Object"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param destination destination object whose fields must be set, or destination map whose values
        must be set]]>
      </doc>
    </constructor>
    <method name="setValues"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Sets the fields of the given object using the values collected during parsing of the object's
 fields.]]>
      </doc>
    </method>
    <method name="put"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="field" type="java.lang.reflect.Field"/>
      <param name="arrayComponentType" type="java.lang.Class&lt;?&gt;"/>
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[Puts an additional value for the given field, accumulating values on repeated calls on the same
 field.

 @param field field
 @param arrayComponentType array component type
 @param value value]]>
      </doc>
    </method>
    <method name="put"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keyName" type="java.lang.String"/>
      <param name="arrayComponentType" type="java.lang.Class&lt;?&gt;"/>
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[Puts an additional value for the given key name, accumulating values on repeated calls on the
 same key name.

 @param keyName key name
 @param arrayComponentType array component type
 @param value value]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Collects the array values of a key/value data object, writing the fields or map values only after
 all values have been collected.

 <p>
 The typical application for this is when parsing JSON or XML when the value type is known to be
 an array. It stores the values in a collection during the parsing, and only when the parsing of
 an object is finished does it convert the collection into an array and stores it.
 </p>

 <p>
 Use {@link #put(String, Class, Object)} when the destination object is a map with string keys and
 whose values accept an array of objects. Use {@link #put(Field, Class, Object)} when setting the
 value of a field using reflection, assuming its type accepts an array of objects. One can
 potentially use both {@code put} methods for example on an instance of {@link GenericData}.
 </p>

 <p>
 Implementation is not thread-safe. For a thread-safe choice instead use an implementation of
 {@link ConcurrentMap}.
 </p>

 @since 1.4
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.ArrayValueMap -->
  <!-- start class com.google.api.client.util.Base64 -->
  <class name="Base64" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="encodeBase64" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binaryData" type="byte[]"/>
      <doc>
      <![CDATA[Encodes binary data using the base64 algorithm but does not chunk the output.

 @param binaryData binary data to encode or {@code null} for {@code null} result
 @return byte[] containing Base64 characters in their UTF-8 representation or {@code null} for
         {@code null} input
 @see org.apache.commons.codec.binary.Base64#encodeBase64(byte[])]]>
      </doc>
    </method>
    <method name="encodeBase64String" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binaryData" type="byte[]"/>
      <doc>
      <![CDATA[Encodes binary data using the base64 algorithm but does not chunk the output.

 @param binaryData binary data to encode or {@code null} for {@code null} result
 @return String containing Base64 characters or {@code null} for {@code null} input
 @see org.apache.commons.codec.binary.Base64#encodeBase64String(byte[])]]>
      </doc>
    </method>
    <method name="encodeBase64URLSafe" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binaryData" type="byte[]"/>
      <doc>
      <![CDATA[Encodes binary data using a URL-safe variation of the base64 algorithm but does not chunk the
 output. The url-safe variation emits - and _ instead of + and / characters.

 @param binaryData binary data to encode or {@code null} for {@code null} result
 @return byte[] containing Base64 characters in their UTF-8 representation or {@code null} for
         {@code null} input
 @see org.apache.commons.codec.binary.Base64#encodeBase64URLSafe(byte[])]]>
      </doc>
    </method>
    <method name="encodeBase64URLSafeString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="binaryData" type="byte[]"/>
      <doc>
      <![CDATA[Encodes binary data using a URL-safe variation of the base64 algorithm but does not chunk the
 output. The url-safe variation emits - and _ instead of + and / characters.

 @param binaryData binary data to encode or {@code null} for {@code null} result
 @return String containing Base64 characters or {@code null} for {@code null} input
 @see org.apache.commons.codec.binary.Base64#encodeBase64URLSafeString(byte[])]]>
      </doc>
    </method>
    <method name="decodeBase64" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="base64Data" type="byte[]"/>
      <doc>
      <![CDATA[Decodes Base64 data into octets.

 @param base64Data Byte array containing Base64 data or {@code null} for {@code null} result
 @return Array containing decoded data or {@code null} for {@code null} input
 @see org.apache.commons.codec.binary.Base64#decodeBase64(byte[])]]>
      </doc>
    </method>
    <method name="decodeBase64" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="base64String" type="java.lang.String"/>
      <doc>
      <![CDATA[Decodes a Base64 String into octets.

 @param base64String String containing Base64 data or {@code null} for {@code null} result
 @return Array containing decoded data or {@code null} for {@code null} input
 @see org.apache.commons.codec.binary.Base64#decodeBase64(String)]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Proxy for version 1.6 (or newer) of the Apache Commons Codec
 {@link org.apache.commons.codec.binary.Base64} implementation.

 <p>
 This is needed in order to support platforms like Android which already include an older version
 of the Apache Commons Codec (Android includes version 1.3). To avoid a dependency library
 conflict, this library includes a reduced private copy of version 1.6 (or newer) of the Apache
 Commons Codec (using a tool like jarjar).
 </p>

 @since 1.8
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.Base64 -->
  <!-- start class com.google.api.client.util.ByteArrayStreamingContent -->
  <class name="ByteArrayStreamingContent" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.util.StreamingContent"/>
    <constructor name="ByteArrayStreamingContent" type="byte[]"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param byteArray byte array content]]>
      </doc>
    </constructor>
    <constructor name="ByteArrayStreamingContent" type="byte[], int, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param byteArray byte array content
 @param offset starting offset into the byte array
 @param length of bytes to read from byte array]]>
      </doc>
    </constructor>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Streaming content whose source is a byte array.

 <p>
 Implementation is not thread-safe.
 </p>

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.ByteArrayStreamingContent -->
  <!-- start class com.google.api.client.util.ByteStreams -->
  <class name="ByteStreams" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="copy" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="from" type="java.io.InputStream"/>
      <param name="to" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Copies all bytes from the input stream to the output stream. Does not close or flush either
 stream.

 @param from the input stream to read from
 @param to the output stream to write to
 @return the number of bytes copied]]>
      </doc>
    </method>
    <method name="limit" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <param name="limit" type="long"/>
      <doc>
      <![CDATA[Wraps an input stream, limiting the number of bytes which can be read.

 @param in the input stream to be wrapped
 @param limit the maximum number of bytes to be read
 @return a length-limited {@link InputStream}]]>
      </doc>
    </method>
    <method name="read" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <param name="b" type="byte[]"/>
      <param name="off" type="int"/>
      <param name="len" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Reads some bytes from an input stream and stores them into the buffer array {@code b}.

 <p>
 This method blocks until {@code len} bytes of input data have been read into the array, or end
 of file is detected. The number of bytes read is returned, possibly zero. Does not close the
 stream.
 </p>

 <p>
 A caller can detect EOF if the number of bytes read is less than {@code len}. All subsequent
 calls on the same stream will return zero.
 </p>

 <p>
 If {@code b} is null, a {@code NullPointerException} is thrown. If {@code off} is negative, or
 {@code len} is negative, or {@code off+len} is greater than the length of the array {@code b},
 then an {@code IndexOutOfBoundsException} is thrown. If {@code len} is zero, then no bytes are
 read. Otherwise, the first byte read is stored into element {@code b[off]}, the next one into
 {@code b[off+1]}, and so on. The number of bytes read is, at most, equal to {@code len}.
 </p>

 @param in the input stream to read from
 @param b the buffer into which the data is read
 @param off an int specifying the offset into the data
 @param len an int specifying the number of bytes to read
 @return the number of bytes read]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Provides utility methods for working with byte arrays and I/O streams.

 <p>
 NOTE: this is a copy of a subset of Guava's {@link com.google.common.io.ByteStreams}.
 </p>

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.ByteStreams -->
  <!-- start class com.google.api.client.util.Charsets -->
  <class name="Charsets" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <field name="UTF_8" type="java.nio.charset.Charset"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[UTF-8 charset.]]>
      </doc>
    </field>
    <field name="ISO_8859_1" type="java.nio.charset.Charset"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[ISO-8859-1 charset.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Contains constant definitions for some standard {@link Charset} instances that are guaranteed to
 be supported by all Java platform implementations.

 <p>
 NOTE: this is a copy of a subset of Guava's {@link com.google.common.base.Charsets}.
 </p>

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.Charsets -->
  <!-- start class com.google.api.client.util.ClassInfo -->
  <class name="ClassInfo" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="of" return="com.google.api.client.util.ClassInfo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="underlyingClass" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Returns the class information for the given underlying class.

 @param underlyingClass underlying class or {@code null} for {@code null} result
 @return class information or {@code null} for {@code null} input]]>
      </doc>
    </method>
    <method name="of" return="com.google.api.client.util.ClassInfo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="underlyingClass" type="java.lang.Class&lt;?&gt;"/>
      <param name="ignoreCase" type="boolean"/>
      <doc>
      <![CDATA[Returns the class information for the given underlying class.

 @param underlyingClass underlying class or {@code null} for {@code null} result
 @param ignoreCase whether field names are case sensitive
 @return class information or {@code null} for {@code null} input
 @since 1.10]]>
      </doc>
    </method>
    <method name="getUnderlyingClass" return="java.lang.Class&lt;?&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the underlying class.

 @since 1.4]]>
      </doc>
    </method>
    <method name="getIgnoreCase" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether field names are case sensitive.

 @since 1.10]]>
      </doc>
    </method>
    <method name="getFieldInfo" return="com.google.api.client.util.FieldInfo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the information for the given {@link FieldInfo#getName()}.

 @param name {@link FieldInfo#getName()} or {@code null}
 @return field information or {@code null} for none]]>
      </doc>
    </method>
    <method name="getField" return="java.lang.reflect.Field"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the field for the given {@link FieldInfo#getName()}.

 @param name {@link FieldInfo#getName()} or {@code null}
 @return field or {@code null} for none]]>
      </doc>
    </method>
    <method name="isEnum" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the underlying class is an enum.

 @since 1.4]]>
      </doc>
    </method>
    <method name="getNames" return="java.util.Collection&lt;java.lang.String&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an unmodifiable sorted set (with any possible {@code null} member first) of
 {@link FieldInfo#getName() names}.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Computes class information to determine data key name/value pairs associated with the class.

 <p>
 Implementation is thread-safe.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.ClassInfo -->
  <!-- start interface com.google.api.client.util.Clock -->
  <interface name="Clock"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="currentTimeMillis" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current time in milliseconds since midnight, January 1, 1970 UTC, to match the
 behavior of {@link System#currentTimeMillis()}.]]>
      </doc>
    </method>
    <field name="SYSTEM" type="com.google.api.client.util.Clock"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Provides the default System implementation of a Clock by using
 {@link System#currentTimeMillis()}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Clock which can be used to get the amount of elapsed milliseconds in system time.

 <p>
 The default system implementation can be accessed at {@link Clock#SYSTEM}.
 Primarily used for testing.
 </p>

 @since 1.9
 @author mlinder@google.com (Matthias Linder)]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.util.Clock -->
  <!-- start class com.google.api.client.util.Collections2 -->
  <class name="Collections2" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <doc>
    <![CDATA[Static utility methods pertaining to {@link Collection} instances.

 <p>
 NOTE: this is a copy of a subset of Guava's {@link com.google.common.collect.Collections2}.
 </p>

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.Collections2 -->
  <!-- start class com.google.api.client.util.Data -->
  <class name="Data" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Data"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="nullOf" return="T"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="objClass" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Returns the single instance of the magic object that represents the "null" value for the given
 Java class (including array or enum).

 @param objClass class of the object needed
 @return magic object instance that represents the "null" value (not Java {@code null})
 @throws IllegalArgumentException if unable to create a new instance]]>
      </doc>
    </method>
    <method name="isNull" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="object" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns whether the given object is the magic object that represents the null value of its
 class.

 @param object object or {@code null}
 @return whether it is the magic null value or {@code false} for {@code null} input]]>
      </doc>
    </method>
    <method name="mapOf" return="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="data" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns the map to use for the given data that is treated as a map from string key to some
 value.

 <p>
 If the input is {@code null}, it returns an empty map. If the input is a map, it simply returns
 the input. Otherwise, it will create a map view using reflection that is backed by the object,
 so that any changes to the map will be reflected on the object. The map keys of that map view
 are based on the {@link Key} annotation, and null is not a possible map value, although the
 magic null instance is possible (see {@link #nullOf(Class)} and {@link #isNull(Object)}).
 Iteration order of the data keys is based on the sorted (ascending) key names of the declared
 fields. Note that since the map view is backed by the object, and that the object may change,
 many methods in the map view must recompute the field values using reflection, for example
 {@link Map#size()} must check the number of non-null fields.
 </p>

 @param data any key value data, represented by an object or a map, or {@code null}
 @return key/value map to use]]>
      </doc>
    </method>
    <method name="clone" return="T"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="data" type="T"/>
      <doc>
      <![CDATA[Returns a deep clone of the given key/value data, such that the result is a completely
 independent copy.
 <p>
 This should not be used directly in the implementation of {@code Object.clone()}. Instead use
 {@link #deepCopy(Object, Object)} for that purpose.
 </p>
 <p>
 Final fields cannot be changed and therefore their value won't be copied.
 </p>

 @param data key/value data object or map to clone or {@code null} for a {@code null} return
        value
 @return deep clone or {@code null} for {@code null} input]]>
      </doc>
    </method>
    <method name="deepCopy"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="src" type="java.lang.Object"/>
      <param name="dest" type="java.lang.Object"/>
      <doc>
      <![CDATA[Makes a deep copy of the given source object into the destination object that is assumed to be
 constructed using {@code Object.clone()}.

 <p>
 Example usage of this method in {@code Object.clone()}:
 </p>

 <pre>
  &#64;Override
  public MyObject clone() {
    try {
      &#64;SuppressWarnings("unchecked")
      MyObject result = (MyObject) super.clone();
      Data.deepCopy(this, result);
      return result;
    } catch (CloneNotSupportedException e) {
      throw new IllegalStateException(e);
    }
  }
 </pre>
 <p>
 Final fields cannot be changed and therefore their value won't be copied.
 </p>

 @param src source object
 @param dest destination object of identical type as source object, and any contained arrays
        must be the same length]]>
      </doc>
    </method>
    <method name="isPrimitive" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
      <doc>
      <![CDATA[Returns whether the given type is one of the supported primitive classes like number and
 date/time, or is a wildcard of one.

 <p>
 A primitive class is any class for whom {@link Class#isPrimitive()} is true, as well as any
 classes of type: {@link Character}, {@link String}, {@link Integer}, {@link Long},
 {@link Short}, {@link Byte}, {@link Float}, {@link Double}, {@link BigInteger},
 {@link BigDecimal}, {@link Boolean}, and {@link DateTime}.
 </p>

 <p>
 Upgrade warning: in prior version 1.13, types
 {@code com.google.common.primitives.UnsignedInteger} and
 {@code com.google.common.primitives.UnsignedLong} were considered primitive, but starting in
 version 1.14 they are no longer be considered primitive.
 </p>

 @param type type or {@code null} for {@code false} result
 @return whether it is a primitive]]>
      </doc>
    </method>
    <method name="isValueOfPrimitiveType" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldValue" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns whether to given value is {@code null} or its class is primitive as defined by
 {@link Data#isPrimitive(Type)}.]]>
      </doc>
    </method>
    <method name="parsePrimitiveValue" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
      <param name="stringValue" type="java.lang.String"/>
      <doc>
      <![CDATA[Parses the given string value based on the given primitive type.
 <p>
 Types are parsed as follows:
 <ul>
 <li>{@code null} or is assignable from {@link String} (like {@link Object}): no parsing</li>
 <li>{@code char} or {@link Character}: {@link String#charAt(int) String.charAt}(0) (requires
 length to be exactly 1)</li>
 <li>{@code boolean} or {@link Boolean}: {@link Boolean#valueOf(String)}</li>
 <li>{@code byte} or {@link Byte}: {@link Byte#valueOf(String)}</li>
 <li>{@code short} or {@link Short}: {@link Short#valueOf(String)}</li>
 <li>{@code int} or {@link Integer}: {@link Integer#valueOf(String)}</li>
 <li>{@code long} or {@link Long}: {@link Long#valueOf(String)}</li>
 <li>{@code float} or {@link Float}: {@link Float#valueOf(String)}</li>
 <li>{@code double} or {@link Double}: {@link Double#valueOf(String)}</li>
 <li>{@link BigInteger}: {@link BigInteger#BigInteger(String) BigInteger(String)}</li>
 <li>{@link BigDecimal}: {@link BigDecimal#BigDecimal(String) BigDecimal(String)}</li>
 <li>{@link DateTime}: {@link DateTime#parseRfc3339(String)}</li>
 </ul>

 <p>
 Note that this may not be the right behavior for some use cases.
 </p>

 <p>
 Upgrade warning: in prior version 1.13, types
 {@code com.google.common.primitives.UnsignedInteger} and {code
 com.google.common.primitives.UnsignedLong} were parsed, but starting in version 1.14 they are
 no longer be considered primitive and an exception will be thrown.
 </p>

 @param type primitive type or {@code null} to parse as a string
 @param stringValue string value to parse or {@code null} for {@code null} result
 @return parsed object or {@code null} for {@code null} input
 @throws IllegalArgumentException if the given class is not a primitive class]]>
      </doc>
    </method>
    <method name="newCollectionInstance" return="java.util.Collection&lt;java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
      <doc>
      <![CDATA[Returns a new collection instance for the given type.
 <p>
 Creates a new collection instance specified for the first input collection class that matches
 as follows:
 <ul>
 <li>{@code null} or an array or assignable from {@link ArrayList} (like {@link List} or
 {@link Collection} or {@link Object}): returns an {@link ArrayList}</li>
 <li>assignable from {@link HashSet}: returns a {@link HashSet}</li>
 <li>assignable from {@link TreeSet}: returns a {@link TreeSet}</li>
 <li>else: calls {@link Types#newInstance(Class)}</li>
 </ul>

 @param type type or {@code null} for {@link ArrayList}.
 @return new collection instance
 @throws ClassCastException if result is does not extend {@link Collection}]]>
      </doc>
    </method>
    <method name="newMapInstance" return="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mapClass" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Returns a new instance of a map based on the given field class.
 <p>
 Creates a new map instance specified for the first input map class that matches as follows:
 </p>
 <ul>
 <li>{@code null} or assignable from {@link ArrayMap} (like {@link Map} or {@link Object}):
 returns an {@link ArrayMap}</li>
 <li>assignable from {@link TreeMap} (like {@link SortedMap}): returns a {@link TreeMap}</li>
 <li>else: calls {@link Types#newInstance(Class)}</li>
 </ul>

 @param mapClass field class
 @throws ClassCastException if result is does not extend {@link Map}]]>
      </doc>
    </method>
    <method name="resolveWildcardTypeOrTypeVariable" return="java.lang.reflect.Type"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="java.util.List&lt;java.lang.reflect.Type&gt;"/>
      <param name="type" type="java.lang.reflect.Type"/>
      <doc>
      <![CDATA[Aggressively resolves the given type in such a way that the resolved type is not a wildcard
 type or a type variable, returning {@code Object.class} if the type variable cannot be
 resolved.

 @param context context list, ordering from least specific to most specific type context, for
        example container class and then its field
 @param type type or {@code null} for {@code null} result
 @return resolved type (which may be class, parameterized type, or generic array type, but not
         wildcard type or type variable) or {@code null} for {@code null} input]]>
      </doc>
    </method>
    <field name="NULL_BOOLEAN" type="java.lang.Boolean"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The single instance of the magic null object for a {@link Boolean}.]]>
      </doc>
    </field>
    <field name="NULL_STRING" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The single instance of the magic null object for a {@link String}.]]>
      </doc>
    </field>
    <field name="NULL_CHARACTER" type="java.lang.Character"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The single instance of the magic null object for a {@link Character}.]]>
      </doc>
    </field>
    <field name="NULL_BYTE" type="java.lang.Byte"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The single instance of the magic null object for a {@link Byte}.]]>
      </doc>
    </field>
    <field name="NULL_SHORT" type="java.lang.Short"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The single instance of the magic null object for a {@link Short}.]]>
      </doc>
    </field>
    <field name="NULL_INTEGER" type="java.lang.Integer"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The single instance of the magic null object for a {@link Integer}.]]>
      </doc>
    </field>
    <field name="NULL_FLOAT" type="java.lang.Float"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The single instance of the magic null object for a {@link Float}.]]>
      </doc>
    </field>
    <field name="NULL_LONG" type="java.lang.Long"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The single instance of the magic null object for a {@link Long}.]]>
      </doc>
    </field>
    <field name="NULL_DOUBLE" type="java.lang.Double"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The single instance of the magic null object for a {@link Double}.]]>
      </doc>
    </field>
    <field name="NULL_BIG_INTEGER" type="java.math.BigInteger"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The single instance of the magic null object for a {@link BigInteger}.]]>
      </doc>
    </field>
    <field name="NULL_BIG_DECIMAL" type="java.math.BigDecimal"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The single instance of the magic null object for a {@link BigDecimal}.]]>
      </doc>
    </field>
    <field name="NULL_DATE_TIME" type="com.google.api.client.util.DateTime"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[The single instance of the magic null object for a {@link DateTime}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for working with key/value data based on the {@link Key} annotation.

 @since 1.4
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.Data -->
  <!-- start class com.google.api.client.util.DateTime -->
  <class name="DateTime" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="java.io.Serializable"/>
    <constructor name="DateTime" type="java.util.Date, java.util.TimeZone"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Instantiates {@link DateTime} from a {@link Date} and {@link TimeZone}.

 @param date date and time
 @param zone time zone; if {@code null}, it is interpreted as {@code TimeZone.getDefault()}.]]>
      </doc>
    </constructor>
    <constructor name="DateTime" type="long"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Instantiates {@link DateTime} from the number of milliseconds since the Unix epoch.

 <p>
 The time zone is interpreted as {@code TimeZone.getDefault()}, which may vary with
 implementation.
 </p>

 @param value number of milliseconds since the Unix epoch (January 1, 1970, 00:00:00 GMT)]]>
      </doc>
    </constructor>
    <constructor name="DateTime" type="java.util.Date"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Instantiates {@link DateTime} from a {@link Date}.

 <p>
 The time zone is interpreted as {@code TimeZone.getDefault()}, which may vary with
 implementation.
 </p>

 @param value date and time]]>
      </doc>
    </constructor>
    <constructor name="DateTime" type="long, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Instantiates {@link DateTime} from the number of milliseconds since the Unix epoch, and a shift
 from UTC in minutes.

 @param value number of milliseconds since the Unix epoch (January 1, 1970, 00:00:00 GMT)
 @param tzShift time zone, represented by the number of minutes off of UTC.]]>
      </doc>
    </constructor>
    <constructor name="DateTime" type="boolean, long, java.lang.Integer"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Instantiates {@link DateTime}, which may represent a date-only value, from the number of
 milliseconds since the Unix epoch, and a shift from UTC in minutes.

 @param dateOnly specifies if this should represent a date-only value
 @param value number of milliseconds since the Unix epoch (January 1, 1970, 00:00:00 GMT)
 @param tzShift time zone, represented by the number of minutes off of UTC, or {@code null} for
        {@code TimeZone.getDefault()}.]]>
      </doc>
    </constructor>
    <constructor name="DateTime" type="java.lang.String"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Instantiates {@link DateTime} from an <a href='http://tools.ietf.org/html/rfc3339'>RFC 3339</a>
 date/time value.

 @param value an <a href='http://tools.ietf.org/html/rfc3339'>RFC 3339</a> date/time value.
 @since 1.11]]>
      </doc>
    </constructor>
    <method name="getValue" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the date/time value expressed as the number of milliseconds since the Unix epoch.

 <p>
 If the time zone is specified, this value is normalized to UTC, so to format this date/time
 value, the time zone shift has to be applied.
 </p>

 @since 1.5]]>
      </doc>
    </method>
    <method name="isDateOnly" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether this is a date-only value.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getTimeZoneShift" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the time zone shift from UTC in minutes or {@code 0} for date-only value.

 @since 1.5]]>
      </doc>
    </method>
    <method name="toStringRfc3339" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Formats the value as an RFC 3339 date/time string.]]>
      </doc>
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="equals" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="o" type="java.lang.Object"/>
      <doc>
      <![CDATA[{@inheritDoc}

 <p>
 A check is added that the time zone is the same. If you ONLY want to check equality of time
 value, check equality on the {@link #getValue()}.
 </p>]]>
      </doc>
    </method>
    <method name="hashCode" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="parseRfc3339" return="com.google.api.client.util.DateTime"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="str" type="java.lang.String"/>
      <exception name="NumberFormatException" type="java.lang.NumberFormatException"/>
      <doc>
      <![CDATA[Parses an RFC 3339 date/time value.

 <p>
 For the date-only case, the time zone is ignored and the hourOfDay, minute, second, and
 millisecond parameters are set to zero.
 </p>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Immutable representation of a date with an optional time and an optional time zone based on <a
 href="http://tools.ietf.org/html/rfc3339">RFC 3339</a>.

 <p>
 Implementation is immutable and therefore thread-safe.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.DateTime -->
  <!-- start class com.google.api.client.util.FieldInfo -->
  <class name="FieldInfo" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="of" return="com.google.api.client.util.FieldInfo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="enumValue" type="java.lang.Enum&lt;?&gt;"/>
      <doc>
      <![CDATA[Returns the field information for the given enum value.

 @param enumValue enum value
 @return field information
 @throws IllegalArgumentException if the enum value has no value annotation
 @since 1.4]]>
      </doc>
    </method>
    <method name="of" return="com.google.api.client.util.FieldInfo"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="field" type="java.lang.reflect.Field"/>
      <doc>
      <![CDATA[Returns the field information for the given field.

 @param field field or {@code null} for {@code null} result
 @return field information or {@code null} if the field has no {@link #name} or for {@code null}
         input]]>
      </doc>
    </method>
    <method name="getField" return="java.lang.reflect.Field"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the field.

 @since 1.4]]>
      </doc>
    </method>
    <method name="getName" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the data key name associated with the field for a non-enum-constant with a {@link Key}
 annotation, or data key value associated with the enum constant with a {@link Value} annotation
 or {@code null} for an enum constant with a {@link NullValue} annotation.

 <p>
 This string is interned.
 </p>

 @since 1.4]]>
      </doc>
    </method>
    <method name="getType" return="java.lang.Class&lt;?&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the field's type.

 @since 1.4]]>
      </doc>
    </method>
    <method name="getGenericType" return="java.lang.reflect.Type"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the field's generic type, which is a class, parameterized type, generic array type, or
 type variable, but not a wildcard type.

 @since 1.4]]>
      </doc>
    </method>
    <method name="isFinal" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether the field is final.

 @since 1.4]]>
      </doc>
    </method>
    <method name="isPrimitive" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns whether the field is primitive as defined by {@link Data#isPrimitive(Type)}.

 @since 1.4]]>
      </doc>
    </method>
    <method name="getValue" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns the value of the field in the given object instance using reflection.]]>
      </doc>
    </method>
    <method name="setValue"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="obj" type="java.lang.Object"/>
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[Sets to the given value of the field in the given object instance using reflection.
 <p>
 If the field is final, it checks that value being set is identical to the existing value.]]>
      </doc>
    </method>
    <method name="getClassInfo" return="com.google.api.client.util.ClassInfo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the class information of the field's declaring class.]]>
      </doc>
    </method>
    <method name="enumValue" return="T extends java.lang.Enum&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="getFieldValue" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="field" type="java.lang.reflect.Field"/>
      <param name="obj" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns the value of the given field in the given object instance using reflection.]]>
      </doc>
    </method>
    <method name="setFieldValue"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="field" type="java.lang.reflect.Field"/>
      <param name="obj" type="java.lang.Object"/>
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[Sets to the given value of the given field in the given object instance using reflection.
 <p>
 If the field is final, it checks that value being set is identical to the existing value.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Parses field information to determine data key name/value pair associated with the field.

 <p>
 Implementation is thread-safe.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.FieldInfo -->
  <!-- start class com.google.api.client.util.GenericData -->
  <class name="GenericData" extends="java.util.AbstractMap&lt;java.lang.String, java.lang.Object&gt;"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Cloneable"/>
    <constructor name="GenericData"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs with case-insensitive keys.]]>
      </doc>
    </constructor>
    <constructor name="GenericData" type="java.util.EnumSet&lt;com.google.api.client.util.GenericData.Flags&gt;"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param flags flags that impact behavior of generic data
 @since 1.10]]>
      </doc>
    </constructor>
    <method name="get" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.Object"/>
    </method>
    <method name="put" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <method name="set" return="com.google.api.client.util.GenericData"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[Sets the given field value (may be {@code null}) for the given field name. Any existing value
 for the field will be overwritten. It may be more slightly more efficient than
 {@link #put(String, Object)} because it avoids accessing the field's original value.

 <p>
 Overriding is only supported for the purpose of calling the super implementation and changing
 the return type, but nothing else.
 </p>]]>
      </doc>
    </method>
    <method name="putAll"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="map" type="java.util.Map&lt;? extends java.lang.String, ?&gt;"/>
    </method>
    <method name="remove" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.Object"/>
    </method>
    <method name="entrySet" return="java.util.Set&lt;java.util.Map.Entry&lt;java.lang.String, java.lang.Object&gt;&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="clone" return="com.google.api.client.util.GenericData"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Makes a "deep" clone of the generic data, in which the clone is completely independent of the
 original.]]>
      </doc>
    </method>
    <method name="getUnknownKeys" return="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the map of unknown data key name to value.

 @since 1.5]]>
      </doc>
    </method>
    <method name="setUnknownKeys"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="unknownFields" type="java.util.Map&lt;java.lang.String, java.lang.Object&gt;"/>
      <doc>
      <![CDATA[Sets the map of unknown data key name to value.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getClassInfo" return="com.google.api.client.util.ClassInfo"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the class information.

 @since 1.10]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Generic data that stores all unknown data key name/value pairs.

 <p>
 Subclasses can declare fields for known data keys using the {@link Key} annotation. Each field
 can be of any visibility (private, package private, protected, or public) and must not be static.
 {@code null} unknown data key names are not allowed, but {@code null} data values are allowed.
 </p>

 <p>
 Iteration order of the data keys is based on the sorted (ascending) key names of the declared
 fields, followed by the iteration order of all of the unknown data key name/value pairs.
 </p>

 <p>
 Implementation is not thread-safe. For a thread-safe choice instead use an implementation of
 {@link ConcurrentMap}.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.GenericData -->
  <!-- start class com.google.api.client.util.GenericData.Flags -->
  <class name="GenericData.Flags" extends="java.lang.Enum&lt;com.google.api.client.util.GenericData.Flags&gt;"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="values" return="com.google.api.client.util.GenericData.Flags[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="valueOf" return="com.google.api.client.util.GenericData.Flags"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
    </method>
    <doc>
    <![CDATA[Flags that impact behavior of generic data.
 @since 1.10]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.GenericData.Flags -->
  <!-- start class com.google.api.client.util.IOUtils -->
  <class name="IOUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="IOUtils"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="copy"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inputStream" type="java.io.InputStream"/>
      <param name="outputStream" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes the content provided by the given source input stream into the given destination output
 stream.

 <p>
 The input stream is guaranteed to be closed at the end of this method.
 </p>

 <p>
 Sample use:
 </p>

 <pre>
  static void copy(InputStream inputStream, File file) throws IOException {
    FileOutputStream out = new FileOutputStream(file);
    try {
      IOUtils.copy(inputStream, out);
    } finally {
      out.close();
    }
  }
 </pre>

 @param inputStream source input stream
 @param outputStream destination output stream]]>
      </doc>
    </method>
    <method name="copy"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="inputStream" type="java.io.InputStream"/>
      <param name="outputStream" type="java.io.OutputStream"/>
      <param name="closeInputStream" type="boolean"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes the content provided by the given source input stream into the given destination output
 stream, optionally closing the input stream.

 <p>
 Sample use:
 </p>

 <pre>
  static void copy(InputStream inputStream, File file) throws IOException {
    FileOutputStream out = new FileOutputStream(file);
    try {
      IOUtils.copy(inputStream, out, true);
    } finally {
      out.close();
    }
  }
 </pre>

 @param inputStream source input stream
 @param outputStream destination output stream
 @param closeInputStream whether the input stream should be closed at the end of this method]]>
      </doc>
    </method>
    <method name="computeLength" return="long"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="content" type="com.google.api.client.util.StreamingContent"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Computes and returns the byte content length for a streaming content by calling
 {@link StreamingContent#writeTo(OutputStream)} on a fake output stream that only counts bytes
 written.

 @param content streaming content]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Utilities for I/O streams.

 @author Yaniv Inbar
 @since 1.14]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.IOUtils -->
  <!-- start class com.google.api.client.util.Joiner -->
  <class name="Joiner" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="on" return="com.google.api.client.util.Joiner"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="separator" type="char"/>
      <doc>
      <![CDATA[Returns a joiner which automatically places {@code separator} between consecutive elements.]]>
      </doc>
    </method>
    <method name="join" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <param name="parts" type="java.lang.Iterable&lt;?&gt;"/>
      <doc>
      <![CDATA[Returns a string containing the string representation of each of {@code parts}, using the
 previously configured separator between each.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An object which joins pieces of text (specified as an array, {@link Iterable}, varargs or even a
 {@link Map}) with a separator.

 <p>
 NOTE: proxy for the Guava implementation of {@link com.google.common.base.Joiner}.
 </p>

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.Joiner -->
  <!-- start class com.google.api.client.util.Key -->
  <class name="Key"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.annotation.Annotation"/>
    <doc>
    <![CDATA[Use this annotation to specify that a field is a data key, optionally providing the data key name
 to use.
 <p>
 If the data key name is not specified, the default is the Java field's name. For example:
 </p>

 <pre><code>
  public class A {

    // uses data key name of "dataKeyNameMatchesFieldName"
    &#64;Key
    public String dataKeyNameMatchesFieldName;

    // uses data key name of "some_other_name"
    &#64;Key("some_other_name")
    private String dataKeyNameIsOverriden;

    // not a data key
    private String notADataKey;
  }
 </code></pre>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.Key -->
  <!-- start class com.google.api.client.util.Lists -->
  <class name="Lists" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="newArrayList" return="java.util.ArrayList&lt;E&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new mutable, empty {@code ArrayList} instance.]]>
      </doc>
    </method>
    <method name="newArrayListWithCapacity" return="java.util.ArrayList&lt;E&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="initialArraySize" type="int"/>
      <doc>
      <![CDATA[Creates an {@code ArrayList} instance backed by an array of the <i>exact</i> size specified;
 equivalent to {@link ArrayList#ArrayList(int)}.

 @param initialArraySize the exact size of the initial backing array for the returned array list
        ({@code ArrayList} documentation calls this value the "capacity")
 @return a new, empty {@code ArrayList} which is guaranteed not to resize itself unless its size
         reaches {@code initialArraySize + 1}
 @throws IllegalArgumentException if {@code initialArraySize} is negative]]>
      </doc>
    </method>
    <method name="newArrayList" return="java.util.ArrayList&lt;E&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elements" type="java.lang.Iterable&lt;? extends E&gt;"/>
      <doc>
      <![CDATA[Returns a new mutable {@code ArrayList} instance containing the given elements.

 @param elements the elements that the list should contain, in order
 @return a new {@code ArrayList} containing those elements]]>
      </doc>
    </method>
    <method name="newArrayList" return="java.util.ArrayList&lt;E&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elements" type="java.util.Iterator&lt;? extends E&gt;"/>
      <doc>
      <![CDATA[Returns a new mutable {@code ArrayList} instance containing the given elements.

 @param elements the elements that the list should contain, in order
 @return a new {@code ArrayList} containing those elements]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Static utility methods pertaining to {@link List} instances.

 <p>
 NOTE: this is a copy of a subset of Guava's {@link com.google.common.collect.Lists}.
 </p>

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.Lists -->
  <!-- start class com.google.api.client.util.LoggingByteArrayOutputStream -->
  <class name="LoggingByteArrayOutputStream" extends="java.io.ByteArrayOutputStream"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LoggingByteArrayOutputStream" type="java.util.logging.Logger, java.util.logging.Level, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param logger logger
 @param loggingLevel logging level
 @param maximumBytesToLog maximum number of bytes to log (may be {@code 0} to avoid logging
        content)]]>
      </doc>
    </constructor>
    <method name="write"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="int"/>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <param name="off" type="int"/>
      <param name="len" type="int"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getMaximumBytesToLog" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the maximum number of bytes to log (may be {@code 0} to avoid logging content).]]>
      </doc>
    </method>
    <method name="getBytesWritten" return="int"
      abstract="false" native="false" synchronized="true"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the bytes written to the stream (may or may not have been logged).]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Thread-safe byte array output stream that logs what was written to it when the stream is closed.

 <p>
 Use this as a safe way to log a limited amount of content. As content is written to the stream,
 it is stored as a byte array, up to the maximum number of bytes limit that was set in the
 constructor. Note that if the maximum limit is set too high, it risks an {@link OutOfMemoryError}
 on low-memory devices. This class also keeps track of the total number of bytes written,
 regardless of whether they were logged. On {@link #close()}, it then logs two records to the
 specified logger and logging level: the total number of bytes written, and the bounded content
 logged (assuming charset "UTF-8"). Any control characters are stripped out of the content.
 </p>

 @since 1.9
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.LoggingByteArrayOutputStream -->
  <!-- start class com.google.api.client.util.LoggingInputStream -->
  <class name="LoggingInputStream" extends="java.io.FilterInputStream"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LoggingInputStream" type="java.io.InputStream, java.util.logging.Logger, java.util.logging.Level, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param inputStream input stream to forward all reads to
 @param logger logger
 @param loggingLevel logging level
 @param contentLoggingLimit maximum number of bytes to log (may be {@code 0} to avoid logging
        content)]]>
      </doc>
    </constructor>
    <method name="read" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="read" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <param name="off" type="int"/>
      <param name="len" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getLogStream" return="com.google.api.client.util.LoggingByteArrayOutputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the log stream.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Thread-safe input stream wrapper that forwards all reads to a given input stream, while logging
 all reads to a {@link LoggingByteArrayOutputStream}.

 @since 1.9
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.LoggingInputStream -->
  <!-- start class com.google.api.client.util.LoggingOutputStream -->
  <class name="LoggingOutputStream" extends="java.io.FilterOutputStream"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="LoggingOutputStream" type="java.io.OutputStream, java.util.logging.Logger, java.util.logging.Level, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param outputStream output stream to forward all writes to
 @param logger logger
 @param loggingLevel logging level
 @param contentLoggingLimit maximum number of bytes to log (may be {@code 0} to avoid logging
        content)]]>
      </doc>
    </constructor>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="write"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="b" type="byte[]"/>
      <param name="off" type="int"/>
      <param name="len" type="int"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="getLogStream" return="com.google.api.client.util.LoggingByteArrayOutputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the log stream.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Thread-safe output stream wrapper that forwards all writes to a given output stream, while
 logging all writes to a {@link LoggingByteArrayOutputStream}.

 @since 1.9
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.LoggingOutputStream -->
  <!-- start class com.google.api.client.util.LoggingStreamingContent -->
  <class name="LoggingStreamingContent" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.util.StreamingContent"/>
    <constructor name="LoggingStreamingContent" type="com.google.api.client.util.StreamingContent, java.util.logging.Logger, java.util.logging.Level, int"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param content streaming content
 @param logger logger
 @param loggingLevel logging level
 @param contentLoggingLimit maximum number of bytes to log or {@code 0} to avoid logging content]]>
      </doc>
    </constructor>
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[Wraps another streaming content without modifying the content, but also logging content using
 {@link LoggingOutputStream}.

 <p>
 Implementation is not thread-safe.
 </p>

 @author Yaniv Inbar
 @since 1.14]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.LoggingStreamingContent -->
  <!-- start class com.google.api.client.util.Maps -->
  <class name="Maps" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="newHashMap" return="java.util.HashMap&lt;K, V&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new mutable, empty {@code HashMap} instance.]]>
      </doc>
    </method>
    <method name="newLinkedHashMap" return="java.util.LinkedHashMap&lt;K, V&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new mutable, empty, insertion-ordered {@code LinkedHashMap} instance.]]>
      </doc>
    </method>
    <method name="newTreeMap" return="java.util.TreeMap&lt;K, V&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new mutable, empty {@code TreeMap} instance using the natural ordering of its
 elements.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Static utility methods pertaining to {@link Map} instances.

 <p>
 NOTE: this is a copy of a subset of Guava's {@link com.google.common.collect.Maps}.
 </p>

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.Maps -->
  <!-- start interface com.google.api.client.util.NanoClock -->
  <interface name="NanoClock"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="nanoTime" return="long"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the current value of the most precise available system timer, in nanoseconds for use to
 measure elapsed time, to match the behavior of {@link System#nanoTime()}.]]>
      </doc>
    </method>
    <field name="SYSTEM" type="com.google.api.client.util.NanoClock"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Provides the default System implementation of a nano clock by using {@link System#nanoTime()}.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Nano clock which can be used to measure elapsed time in nanoseconds.

 <p>
 The default system implementation can be accessed at {@link NanoClock#SYSTEM}. Primarily used for
 testing.
 </p>

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.util.NanoClock -->
  <!-- start class com.google.api.client.util.NullValue -->
  <class name="NullValue"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.annotation.Annotation"/>
    <doc>
    <![CDATA[Use this annotation to specify that an enum constant is the "null" data value to use for
 {@link Data#nullOf(Class)}.
 <p>
 See {@link Value} for an example.
 </p>

 @since 1.4
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.NullValue -->
  <!-- start interface com.google.api.client.util.ObjectParser -->
  <interface name="ObjectParser"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="parseAndClose" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <param name="charset" type="java.nio.charset.Charset"/>
      <param name="dataClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses the given input stream into a new instance of the the given data class of key/value
 pairs and closes the input stream.

 @param in input stream which contains the data to parse
 @param charset charset which should be used to decode the input stream or {@code null} if
        unknown
 @param dataClass class into which the data is parsed]]>
      </doc>
    </method>
    <method name="parseAndClose" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <param name="charset" type="java.nio.charset.Charset"/>
      <param name="dataType" type="java.lang.reflect.Type"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses the given input stream into a new instance of the the given data type of key/value pairs
 and closes the input stream.

 @param in input stream which contains the data to parse
 @param charset charset which should be used to decode the input stream or {@code null} if
        unknown
 @param dataType type into which the data is parsed]]>
      </doc>
    </method>
    <method name="parseAndClose" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <param name="dataClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses the given reader into a new instance of the the given data class of key/value pairs and
 closes the reader.

 @param reader reader which contains the text data to parse
 @param dataClass class into which the data is parsed]]>
      </doc>
    </method>
    <method name="parseAndClose" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <param name="dataType" type="java.lang.reflect.Type"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Parses the given reader into a new instance of the the given data type of key/value pairs and
 closes the reader.

 @param reader reader which contains the text data to parse
 @param dataType type into which the data is parsed]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Parses a data source into the specified data type.

 <p>
 Implementations should normally be thread-safe.
 </p>

 @author Yaniv Inbar
 @since 1.10]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.util.ObjectParser -->
  <!-- start class com.google.api.client.util.Objects -->
  <class name="Objects" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="equal" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="a" type="java.lang.Object"/>
      <param name="b" type="java.lang.Object"/>
      <doc>
      <![CDATA[Determines whether two possibly-null objects are equal. Returns:

 <ul>
 <li>{@code true} if {@code a} and {@code b} are both null.</li>
 <li>{@code true} if {@code a} and {@code b} are both non-null and they are equal according to
 {@link Object#equals(Object)}.</li>
 <li>{@code false} in all other situations.</li>
 </ul>

 <p>
 This assumes that any non-null objects passed to this function conform to the {@code equals()}
 contract.
 </p>]]>
      </doc>
    </method>
    <method name="toStringHelper" return="com.google.api.client.util.Objects.ToStringHelper"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="self" type="java.lang.Object"/>
      <doc>
      <![CDATA[Creates an instance of {@link ToStringHelper}.

 <p>
 This is helpful for implementing {@link Object#toString()}. Specification by example:
 </p>

 <pre>
   // Returns "ClassName{}"
   Objects.toStringHelper(this)
       .toString();

   // Returns "ClassName{x=1}"
   Objects.toStringHelper(this)
       .add("x", 1)
       .toString();

   // Returns "MyObject{x=1}"
   Objects.toStringHelper("MyObject")
       .add("x", 1)
       .toString();

   // Returns "ClassName{x=1, y=foo}"
   Objects.toStringHelper(this)
       .add("x", 1)
       .add("y", "foo")
       .toString();

   // Returns "ClassName{x=1}"
   Objects.toStringHelper(this)
       .omitNullValues()
       .add("x", 1)
       .add("y", null)
       .toString();
 </pre>

 @param self the object to generate the string for (typically {@code this}), used only for its
        class name]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Helper functions that can operate on any {@code Object}.

 <p>
 NOTE: proxy for the Guava implementation of {@link com.google.common.base.Objects}.
 </p>

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.Objects -->
  <!-- start class com.google.api.client.util.Objects.ToStringHelper -->
  <class name="Objects.ToStringHelper" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="omitNullValues" return="com.google.api.client.util.Objects.ToStringHelper"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Configures the {@link ToStringHelper} so {@link #toString()} will ignore properties with null
 value. The order of calling this method, relative to the {@code add()}/{@code addValue()}
 methods, is not significant.]]>
      </doc>
    </method>
    <method name="add" return="com.google.api.client.util.Objects.ToStringHelper"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="name" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[Adds a name/value pair to the formatted output in {@code name=value} format. If {@code value}
 is {@code null}, the string {@code "null"} is used, unless {@link #omitNullValues()} is
 called, in which case this name/value pair will not be added.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Support class for {@link Objects#toStringHelper}.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.Objects.ToStringHelper -->
  <!-- start class com.google.api.client.util.PemReader -->
  <class name="PemReader" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="PemReader" type="java.io.Reader"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param reader reader]]>
      </doc>
    </constructor>
    <method name="readNextSection" return="com.google.api.client.util.PemReader.Section"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Reads the next section in the PEM file or {@code null} for end of file.]]>
      </doc>
    </method>
    <method name="readNextSection" return="com.google.api.client.util.PemReader.Section"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="titleToLookFor" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Reads the next section in the PEM file, optionally based on a title to look for.

 @param titleToLookFor title to look for or {@code null} for any title
 @return next section or {@code null} for end of file]]>
      </doc>
    </method>
    <method name="readFirstSectionAndClose" return="com.google.api.client.util.PemReader.Section"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Reads the first section in the PEM file, and then closes the reader.

 @param reader reader
 @return first section found or {@code null} for none found]]>
      </doc>
    </method>
    <method name="readFirstSectionAndClose" return="com.google.api.client.util.PemReader.Section"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <param name="titleToLookFor" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Reads the first section in the PEM file, optionally based on a title to look for, and then
 closes the reader.

 @param titleToLookFor title to look for or {@code null} for any title
 @param reader reader
 @return first section found or {@code null} for none found]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Closes the reader.

 <p>
 To ensure that the stream is closed properly, call {@link #close()} in a finally block.
 </p>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[PEM file reader.

 <p>
 Supports reading any PEM stream that contains Base64 encoded content stored inside
 {@code "-----BEGIN ...-----"} and {@code "-----END ...-----"} tags. Each call to
 {@link #readNextSection()} parses the next section in the PEM file. If you need a section of a
 certain title use {@link #readNextSection(String)}, for example
 {@code readNextSection("PRIVATE KEY")}. To ensure that the stream is closed properly, call
 {@link #close()} in a finally block.
 </p>

 <p>
 As a convenience, use {@link #readFirstSectionAndClose(Reader)} or
 {@link #readFirstSectionAndClose(Reader, String)} for the common case of only a single section in
 a PEM file (or only a single section of a given title).
 </p>

 <p>
 Limitations:
 <p>

 <ul>
 <li>Assumes the PEM file section content is not encrypted and cannot handle the case of any
 headers inside the BEGIN and END tag.</li>
 <li>It also ignores any attributes associated with any PEM file section.</li>
 </ul>

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.PemReader -->
  <!-- start class com.google.api.client.util.PemReader.Section -->
  <class name="PemReader.Section" extends="java.lang.Object"
    abstract="false"
    static="true" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getTitle" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the title.]]>
      </doc>
    </method>
    <method name="getBase64DecodedBytes" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the base64-decoded bytes (modifiable array).]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Section in the PEM file.]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.PemReader.Section -->
  <!-- start class com.google.api.client.util.Preconditions -->
  <class name="Preconditions" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="checkArgument"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="expression" type="boolean"/>
      <doc>
      <![CDATA[Ensures the truth of an expression involving one or more parameters to the calling method.

 @param expression a boolean expression
 @throws IllegalArgumentException if {@code expression} is false]]>
      </doc>
    </method>
    <method name="checkArgument"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="expression" type="boolean"/>
      <param name="errorMessage" type="java.lang.Object"/>
      <doc>
      <![CDATA[Ensures the truth of an expression involving one or more parameters to the calling method.

 @param expression a boolean expression
 @param errorMessage the exception message to use if the check fails; will be converted to a
        string using {@link String#valueOf(Object)}
 @throws IllegalArgumentException if {@code expression} is false]]>
      </doc>
    </method>
    <method name="checkArgument"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="expression" type="boolean"/>
      <param name="errorMessageTemplate" type="java.lang.String"/>
      <param name="errorMessageArgs" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[Ensures the truth of an expression involving one or more parameters to the calling method.

 @param expression a boolean expression
 @param errorMessageTemplate a template for the exception message should the check fail. The
        message is formed by replacing each {@code %s} placeholder in the template with an
        argument. These are matched by position - the first {@code %s} gets
        {@code errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted
        message in square braces. Unmatched placeholders will be left as-is.
 @param errorMessageArgs the arguments to be substituted into the message template. Arguments
        are converted to strings using {@link String#valueOf(Object)}.
 @throws IllegalArgumentException if {@code expression} is false
 @throws NullPointerException if the check fails and either {@code errorMessageTemplate} or
         {@code errorMessageArgs} is null (don't let this happen)]]>
      </doc>
    </method>
    <method name="checkState"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="expression" type="boolean"/>
      <doc>
      <![CDATA[Ensures the truth of an expression involving the state of the calling instance, but not
 involving any parameters to the calling method.

 @param expression a boolean expression
 @throws IllegalStateException if {@code expression} is false]]>
      </doc>
    </method>
    <method name="checkState"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="expression" type="boolean"/>
      <param name="errorMessage" type="java.lang.Object"/>
      <doc>
      <![CDATA[Ensures the truth of an expression involving the state of the calling instance, but not
 involving any parameters to the calling method.

 @param expression a boolean expression
 @param errorMessage the exception message to use if the check fails; will be converted to a
        string using {@link String#valueOf(Object)}
 @throws IllegalStateException if {@code expression} is false]]>
      </doc>
    </method>
    <method name="checkState"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="expression" type="boolean"/>
      <param name="errorMessageTemplate" type="java.lang.String"/>
      <param name="errorMessageArgs" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[Ensures the truth of an expression involving the state of the calling instance, but not
 involving any parameters to the calling method.

 @param expression a boolean expression
 @param errorMessageTemplate a template for the exception message should the check fail. The
        message is formed by replacing each {@code %s} placeholder in the template with an
        argument. These are matched by position - the first {@code %s} gets
        {@code errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted
        message in square braces. Unmatched placeholders will be left as-is.
 @param errorMessageArgs the arguments to be substituted into the message template. Arguments
        are converted to strings using {@link String#valueOf(Object)}.
 @throws IllegalStateException if {@code expression} is false
 @throws NullPointerException if the check fails and either {@code errorMessageTemplate} or
         {@code errorMessageArgs} is null (don't let this happen)]]>
      </doc>
    </method>
    <method name="checkNotNull" return="T"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reference" type="T"/>
      <doc>
      <![CDATA[Ensures that an object reference passed as a parameter to the calling method is not null.

 @param reference an object reference
 @return the non-null reference that was validated
 @throws NullPointerException if {@code reference} is null]]>
      </doc>
    </method>
    <method name="checkNotNull" return="T"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reference" type="T"/>
      <param name="errorMessage" type="java.lang.Object"/>
      <doc>
      <![CDATA[Ensures that an object reference passed as a parameter to the calling method is not null.

 @param reference an object reference
 @param errorMessage the exception message to use if the check fails; will be converted to a
        string using {@link String#valueOf(Object)}
 @return the non-null reference that was validated
 @throws NullPointerException if {@code reference} is null]]>
      </doc>
    </method>
    <method name="checkNotNull" return="T"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reference" type="T"/>
      <param name="errorMessageTemplate" type="java.lang.String"/>
      <param name="errorMessageArgs" type="java.lang.Object[]"/>
      <doc>
      <![CDATA[Ensures that an object reference passed as a parameter to the calling method is not null.

 @param reference an object reference
 @param errorMessageTemplate a template for the exception message should the check fail. The
        message is formed by replacing each {@code %s} placeholder in the template with an
        argument. These are matched by position - the first {@code %s} gets
        {@code errorMessageArgs[0]}, etc. Unmatched arguments will be appended to the formatted
        message in square braces. Unmatched placeholders will be left as-is.
 @param errorMessageArgs the arguments to be substituted into the message template. Arguments
        are converted to strings using {@link String#valueOf(Object)}.
 @return the non-null reference that was validated
 @throws NullPointerException if {@code reference} is null]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Simple static methods to be called at the start of your own methods to verify correct arguments
 and state.

 <p>
 NOTE: proxy for the Guava implementation of {@link com.google.common.base.Preconditions}.
 </p>

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.Preconditions -->
  <!-- start class com.google.api.client.util.SecurityUtils -->
  <class name="SecurityUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getDefaultKeyStore" return="java.security.KeyStore"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="KeyStoreException" type="java.security.KeyStoreException"/>
      <doc>
      <![CDATA[Returns the default key store using {@link KeyStore#getDefaultType()}.]]>
      </doc>
    </method>
    <method name="getJavaKeyStore" return="java.security.KeyStore"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="KeyStoreException" type="java.security.KeyStoreException"/>
      <doc>
      <![CDATA[Returns the Java KeyStore (JKS).]]>
      </doc>
    </method>
    <method name="getPkcs12KeyStore" return="java.security.KeyStore"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="KeyStoreException" type="java.security.KeyStoreException"/>
      <doc>
      <![CDATA[Returns the PKCS12 key store.]]>
      </doc>
    </method>
    <method name="loadKeyStore"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keyStore" type="java.security.KeyStore"/>
      <param name="keyStream" type="java.io.InputStream"/>
      <param name="storePass" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <doc>
      <![CDATA[Loads a key store from a stream.


 <p>
 Example usage:
 </p>

 <pre>
    KeyStore keyStore = SecurityUtils.getJavaKeyStore();
    SecurityUtils.loadKeyStore(keyStore, new FileInputStream("certs.jks"), "password");
 </pre>

 @param keyStore key store
 @param keyStream input stream to the key store stream (closed at the end of this method in a
        finally block)
 @param storePass password protecting the key store file]]>
      </doc>
    </method>
    <method name="getPrivateKey" return="java.security.PrivateKey"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keyStore" type="java.security.KeyStore"/>
      <param name="alias" type="java.lang.String"/>
      <param name="keyPass" type="java.lang.String"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <doc>
      <![CDATA[Returns the private key from the key store.

 @param keyStore key store
 @param alias alias under which the key is stored
 @param keyPass password protecting the key
 @return private key]]>
      </doc>
    </method>
    <method name="loadPrivateKeyFromKeyStore" return="java.security.PrivateKey"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keyStore" type="java.security.KeyStore"/>
      <param name="keyStream" type="java.io.InputStream"/>
      <param name="storePass" type="java.lang.String"/>
      <param name="alias" type="java.lang.String"/>
      <param name="keyPass" type="java.lang.String"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <doc>
      <![CDATA[Retrieves a private key from the specified key store stream and specified key store.

 @param keyStore key store
 @param keyStream input stream to the key store (closed at the end of this method in a finally
        block)
 @param storePass password protecting the key store file
 @param alias alias under which the key is stored
 @param keyPass password protecting the key
 @return key from the key store]]>
      </doc>
    </method>
    <method name="getRsaKeyFactory" return="java.security.KeyFactory"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="NoSuchAlgorithmException" type="java.security.NoSuchAlgorithmException"/>
      <doc>
      <![CDATA[Returns the RSA key factory.]]>
      </doc>
    </method>
    <method name="getSha1WithRsaSignatureAlgorithm" return="java.security.Signature"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="NoSuchAlgorithmException" type="java.security.NoSuchAlgorithmException"/>
      <doc>
      <![CDATA[Returns the SHA-1 with RSA signature algorithm.]]>
      </doc>
    </method>
    <method name="getSha256WithRsaSignatureAlgorithm" return="java.security.Signature"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="NoSuchAlgorithmException" type="java.security.NoSuchAlgorithmException"/>
      <doc>
      <![CDATA[Returns the SHA-256 with RSA signature algorithm.]]>
      </doc>
    </method>
    <method name="sign" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="signatureAlgorithm" type="java.security.Signature"/>
      <param name="privateKey" type="java.security.PrivateKey"/>
      <param name="contentBytes" type="byte[]"/>
      <exception name="InvalidKeyException" type="java.security.InvalidKeyException"/>
      <exception name="SignatureException" type="java.security.SignatureException"/>
      <doc>
      <![CDATA[Signs content using a private key.

 @param signatureAlgorithm signature algorithm
 @param privateKey private key
 @param contentBytes content to sign
 @return signed content]]>
      </doc>
    </method>
    <method name="verify" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="signatureAlgorithm" type="java.security.Signature"/>
      <param name="publicKey" type="java.security.PublicKey"/>
      <param name="signatureBytes" type="byte[]"/>
      <param name="contentBytes" type="byte[]"/>
      <exception name="InvalidKeyException" type="java.security.InvalidKeyException"/>
      <exception name="SignatureException" type="java.security.SignatureException"/>
      <doc>
      <![CDATA[Verifies the signature of signed content based on a public key.

 @param signatureAlgorithm signature algorithm
 @param publicKey public key
 @param signatureBytes signature bytes
 @param contentBytes content bytes
 @return whether the signature was verified]]>
      </doc>
    </method>
    <method name="getX509CertificateFactory" return="java.security.cert.CertificateFactory"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="CertificateException" type="java.security.cert.CertificateException"/>
      <doc>
      <![CDATA[Returns the X.509 certificate factory.]]>
      </doc>
    </method>
    <method name="loadKeyStoreFromCertificates"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="keyStore" type="java.security.KeyStore"/>
      <param name="certificateFactory" type="java.security.cert.CertificateFactory"/>
      <param name="certificateStream" type="java.io.InputStream"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <doc>
      <![CDATA[Loads a key store with certificates generated from the specified stream using
 {@link CertificateFactory#generateCertificates(InputStream)}.

 <p>
 For each certificate, {@link KeyStore#setCertificateEntry(String, Certificate)} is called with
 an alias that is the string form of incrementing non-negative integers starting with 0 (0, 1,
 2, 3, ...).
 </p>

 <p>
 Example usage:
 </p>

 <pre>
    KeyStore keyStore = SecurityUtils.getJavaKeyStore();
    SecurityUtils.loadKeyStoreFromCertificates(keyStore, SecurityUtils.getX509CertificateFactory(),
        new FileInputStream(pemFile));
 </pre>

 @param keyStore key store (for example {@link #getJavaKeyStore()})
 @param certificateFactory certificate factory (for example
        {@link #getX509CertificateFactory()})
 @param certificateStream certificate stream]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Utilities related to Java security.

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.SecurityUtils -->
  <!-- start class com.google.api.client.util.Sets -->
  <class name="Sets" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="newHashSet" return="java.util.HashSet&lt;E&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new mutable, empty {@code HashSet} instance.]]>
      </doc>
    </method>
    <method name="newTreeSet" return="java.util.TreeSet&lt;E&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new mutable, empty {@code TreeSet} instance sorted by the natural sort ordering of
 its elements.]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Static utility methods pertaining to {@link Set} instances.

 <p>
 NOTE: this is a copy of a subset of Guava's {@link com.google.common.collect.Sets}.
 </p>

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.Sets -->
  <!-- start class com.google.api.client.util.SslUtils -->
  <class name="SslUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="getSslContext" return="javax.net.ssl.SSLContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="NoSuchAlgorithmException" type="java.security.NoSuchAlgorithmException"/>
      <doc>
      <![CDATA[Returns the SSL context for "SSL" algorithm.

 @since 1.14]]>
      </doc>
    </method>
    <method name="getTlsSslContext" return="javax.net.ssl.SSLContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="NoSuchAlgorithmException" type="java.security.NoSuchAlgorithmException"/>
      <doc>
      <![CDATA[Returns the SSL context for "TLS" algorithm.

 @since 1.14]]>
      </doc>
    </method>
    <method name="getDefaultTrustManagerFactory" return="javax.net.ssl.TrustManagerFactory"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="NoSuchAlgorithmException" type="java.security.NoSuchAlgorithmException"/>
      <doc>
      <![CDATA[Returns the default trust manager factory.

 @since 1.14]]>
      </doc>
    </method>
    <method name="getPkixTrustManagerFactory" return="javax.net.ssl.TrustManagerFactory"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="NoSuchAlgorithmException" type="java.security.NoSuchAlgorithmException"/>
      <doc>
      <![CDATA[Returns the PKIX trust manager factory.

 @since 1.14]]>
      </doc>
    </method>
    <method name="getDefaultKeyManagerFactory" return="javax.net.ssl.KeyManagerFactory"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="NoSuchAlgorithmException" type="java.security.NoSuchAlgorithmException"/>
      <doc>
      <![CDATA[Returns the default key manager factory.

 @since 1.14]]>
      </doc>
    </method>
    <method name="getPkixKeyManagerFactory" return="javax.net.ssl.KeyManagerFactory"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="NoSuchAlgorithmException" type="java.security.NoSuchAlgorithmException"/>
      <doc>
      <![CDATA[Returns the PKIX key manager factory.

 @since 1.14]]>
      </doc>
    </method>
    <method name="initSslContext" return="javax.net.ssl.SSLContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="sslContext" type="javax.net.ssl.SSLContext"/>
      <param name="trustStore" type="java.security.KeyStore"/>
      <param name="trustManagerFactory" type="javax.net.ssl.TrustManagerFactory"/>
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <doc>
      <![CDATA[Initializes the SSL context to the trust managers supplied by the trust manager factory for the
 given trust store.

 @param sslContext SSL context (for example {@link SSLContext#getInstance})
 @param trustStore key store for certificates to trust (for example
        {@link SecurityUtils#getJavaKeyStore()})
 @param trustManagerFactory trust manager factory (for example
        {@link #getPkixTrustManagerFactory()})

 @since 1.14]]>
      </doc>
    </method>
    <method name="trustAllSSLContext" return="javax.net.ssl.SSLContext"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="GeneralSecurityException" type="java.security.GeneralSecurityException"/>
      <doc>
      <![CDATA[Returns an SSL context in which all X.509 certificates are trusted.

 <p>
 Be careful! Disabling SSL certificate validation is dangerous and should only be done in
 testing environments.
 </p>]]>
      </doc>
    </method>
    <method name="trustAllHostnameVerifier" return="javax.net.ssl.HostnameVerifier"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a verifier that trusts all host names.

 <p>
 Be careful! Disabling host name verification is dangerous and should only be done in testing
 environments.
 </p>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[SSL utilities.

 @since 1.13
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.SslUtils -->
  <!-- start interface com.google.api.client.util.StreamingContent -->
  <interface name="StreamingContent"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="writeTo"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="out" type="java.io.OutputStream"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Writes the byte content to the given output stream.

 <p>
 Implementations must not close the output stream, and instead should flush the output stream.
 Some callers may assume that the the output stream has not been closed, and will fail to work
 if it has been closed.
 </p>

 @param out output stream]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Streaming content interface to write bytes to an output stream.

 <p>
 Implementations don't need to be thread-safe.
 </p>

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </interface>
  <!-- end interface com.google.api.client.util.StreamingContent -->
  <!-- start class com.google.api.client.util.Strings -->
  <class name="Strings" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="isNullOrEmpty" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns {@code true} if the given string is null or is the empty string.

 @param string a string reference to check (may be {@code null})
 @return {@code true} if the string is null or is the empty string]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Static utility methods pertaining to {@code String} instances.

 <p>
 NOTE: proxy for the Guava implementation of {@link com.google.common.base.Strings}.
 </p>

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.Strings -->
  <!-- start class com.google.api.client.util.StringUtils -->
  <class name="StringUtils" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getBytesUtf8" return="byte[]"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="java.lang.String"/>
      <doc>
      <![CDATA[Encodes the given string into a sequence of bytes using the UTF-8 charset, storing the result
 into a new byte array.

 @param string the String to encode, may be <code>null</code>
 @return encoded bytes, or <code>null</code> if the input string was <code>null</code>
 @throws IllegalStateException Thrown when the charset is missing, which should be never
         according the the Java specification.
 @see <a href="http://download.oracle.com/javase/1.5.0/docs/api/java/nio/charset/Charset.html"
      >Standard charsets</a>
 @see org.apache.commons.codec.binary.StringUtils#getBytesUtf8(String)
 @since 1.8]]>
      </doc>
    </method>
    <method name="newStringUtf8" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="bytes" type="byte[]"/>
      <doc>
      <![CDATA[Constructs a new <code>String</code> by decoding the specified array of bytes using the UTF-8
 charset.

 @param bytes The bytes to be decoded into characters
 @return A new <code>String</code> decoded from the specified array of bytes using the UTF-8
         charset, or <code>null</code> if the input byte array was <code>null</code>.
 @throws IllegalStateException Thrown when a {@link UnsupportedEncodingException} is caught,
         which should never happen since the charset is required.
 @see org.apache.commons.codec.binary.StringUtils#newStringUtf8(byte[])
 @since 1.8]]>
      </doc>
    </method>
    <field name="LINE_SEPARATOR" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Line separator to use for this OS, i.e. {@code "\n"} or {@code "\r\n"}.

 @since 1.8]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Utilities for strings.

 <p>
 Some of these methods are a proxy for version 1.6 (or newer) of the Apache Commons Codec
 {@link StringUtils} implementation. This is needed in order to support platforms like Android
 which already include an older version of the Apache Commons Codec (Android includes version
 1.3). To avoid a dependency library conflict, this library includes a reduced private copy of
 version 1.6 (or newer) of the Apache Commons Codec (using a tool like jarjar).
 </p>

 @since 1.8
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.StringUtils -->
  <!-- start class com.google.api.client.util.Throwables -->
  <class name="Throwables" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="propagate" return="java.lang.RuntimeException"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="throwable" type="java.lang.Throwable"/>
      <doc>
      <![CDATA[Propagates {@code throwable} as-is if it is an instance of {@link RuntimeException} or
 {@link Error}, or else as a last resort, wraps it in a {@code RuntimeException} then
 propagates.
 <p>
 This method always throws an exception. The {@code RuntimeException} return type is only for
 client code to make Java type system happy in case a return value is required by the enclosing
 method. Example usage:
 </p>

 <pre>
    T doSomething() {
      try {
        return someMethodThatCouldThrowAnything();
      } catch (IKnowWhatToDoWithThisException e) {
        return handle(e);
      } catch (Throwable t) {
        throw Throwables.propagate(t);
      }
    }
</pre>

 @param throwable the Throwable to propagate
 @return nothing will ever be returned; this return type is only for your convenience, as
         illustrated in the example above]]>
      </doc>
    </method>
    <method name="propagateIfPossible"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="throwable" type="java.lang.Throwable"/>
      <doc>
      <![CDATA[Propagates {@code throwable} exactly as-is, if and only if it is an instance of
 {@link RuntimeException} or {@link Error}. Example usage:

 <pre>
    try {
      someMethodThatCouldThrowAnything();
    } catch (IKnowWhatToDoWithThisException e) {
      handle(e);
    } catch (Throwable t) {
      Throwables.propagateIfPossible(t);
      throw new RuntimeException("unexpected", t);
    }
 </pre>

 @param throwable throwable (may be {@code null})]]>
      </doc>
    </method>
    <method name="propagateIfPossible"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="throwable" type="java.lang.Throwable"/>
      <param name="declaredType" type="java.lang.Class&lt;X&gt;"/>
      <exception name="Throwable" type="java.lang.Throwable"/>
      <doc>
      <![CDATA[Propagates {@code throwable} exactly as-is, if and only if it is an instance of
 {@link RuntimeException}, {@link Error}, or {@code declaredType}. Example usage:

 <pre>
    try {
      someMethodThatCouldThrowAnything();
    } catch (IKnowWhatToDoWithThisException e) {
      handle(e);
    } catch (Throwable t) {
      Throwables.propagateIfPossible(t, OtherException.class);
      throw new RuntimeException("unexpected", t);
    }
</pre>

 @param throwable throwable (may be {@code null})
 @param declaredType the single checked exception type declared by the calling method]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Static utility methods pertaining to instances of {@link Throwable}.

 <p>
 NOTE: proxy for the Guava implementation of {@link com.google.common.base.Throwables}.
 </p>

 @since 1.14
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.Throwables -->
  <!-- start class com.google.api.client.util.Types -->
  <class name="Types" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="getSuperParameterizedType" return="java.lang.reflect.ParameterizedType"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
      <param name="superClass" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Returns the parameterized type that is or extends the given type that matches the given super
 class.

 <p>
 For example, if the input type is {@code HashMap<String,Integer>} and the input super class is
 {@code Map.class}, it will return the extended parameterized type {@link Map}, but which
 retains the actual type information from the original {@code HashMap}.
 </p>

 @param type class or parameterized type
 @param superClass super class
 @return matching parameterized type or {@code null}]]>
      </doc>
    </method>
    <method name="isAssignableToOrFrom" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="classToCheck" type="java.lang.Class&lt;?&gt;"/>
      <param name="anotherClass" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Returns whether a class is either assignable to or from another class.

 @param classToCheck class to check
 @param anotherClass another class]]>
      </doc>
    </method>
    <method name="newInstance" return="T"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="clazz" type="java.lang.Class&lt;T&gt;"/>
      <doc>
      <![CDATA[Creates a new instance of the given class by invoking its default constructor.

 <p>
 The given class must be public and must have a public default constructor, and must not be an
 array or an interface or be abstract. If an enclosing class, it must be static.
 </p>]]>
      </doc>
    </method>
    <method name="isArray" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="type" type="java.lang.reflect.Type"/>
      <doc>
      <![CDATA[Returns whether the given type is an array.]]>
      </doc>
    </method>
    <method name="getArrayComponentType" return="java.lang.reflect.Type"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="array" type="java.lang.reflect.Type"/>
      <doc>
      <![CDATA[Returns the component type of the given array type, assuming {@link #isArray(Type)}.

 <p>
 Return type will either be class, parameterized type, generic array type, or type variable, but
 not a wildcard type.
 </p>

 @throws ClassCastException if {@link #isArray(Type)} is false]]>
      </doc>
    </method>
    <method name="getRawClass" return="java.lang.Class&lt;?&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parameterType" type="java.lang.reflect.ParameterizedType"/>
      <doc>
      <![CDATA[Returns the raw class for the given parameter type as defined in
 {@link ParameterizedType#getRawType()}.

 @param parameterType parameter type
 @return raw class]]>
      </doc>
    </method>
    <method name="getBound" return="java.lang.reflect.Type"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="wildcardType" type="java.lang.reflect.WildcardType"/>
      <doc>
      <![CDATA[Returns the only bound of the given wildcard type.

 @param wildcardType wildcard type
 @return only bound or {@code Object.class} for none]]>
      </doc>
    </method>
    <method name="resolveTypeVariable" return="java.lang.reflect.Type"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="java.util.List&lt;java.lang.reflect.Type&gt;"/>
      <param name="typeVariable" type="java.lang.reflect.TypeVariable&lt;?&gt;"/>
      <doc>
      <![CDATA[Resolves the actual type of the given type variable that comes from a field type based on the
 given context list.
 <p>
 In case the type variable can be resolved partially, it will return the partially resolved type
 variable.
 </p>

 @param context context list, ordering from least specific to most specific type context, for
        example container class and then its field
 @param typeVariable type variable
 @return resolved or partially resolved actual type (type variable, class, parameterized type,
         or generic array type, but not wildcard type) or {@code null} if unable to resolve at
         all]]>
      </doc>
    </method>
    <method name="getRawArrayComponentType" return="java.lang.Class&lt;?&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="context" type="java.util.List&lt;java.lang.reflect.Type&gt;"/>
      <param name="componentType" type="java.lang.reflect.Type"/>
      <doc>
      <![CDATA[Returns the raw array component type to use -- for example for the first parameter of
 {@link Array#newInstance(Class, int)} -- for the given component type.

 @param context context list, ordering from least specific to most specific type context, for
        example container class and then its field
 @param componentType array component type or {@code null} for {@code Object.class} result
 @return raw array component type]]>
      </doc>
    </method>
    <method name="getIterableParameter" return="java.lang.reflect.Type"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="iterableType" type="java.lang.reflect.Type"/>
      <doc>
      <![CDATA[Returns the type parameter of {@link Iterable} that is assignable from the given iterable type.

 <p>
 For example, for the type {@code ArrayList<Integer>} -- or for a class that extends {@code
 ArrayList<Integer>} -- it will return {@code Integer}.
 </p>

 @param iterableType iterable type (must extend {@link Iterable})
 @return type parameter, which may be any type]]>
      </doc>
    </method>
    <method name="getMapValueParameter" return="java.lang.reflect.Type"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="mapType" type="java.lang.reflect.Type"/>
      <doc>
      <![CDATA[Returns the value type parameter of {@link Map} that is assignable from the given map type.

 <p>
 For example, for the type {@code Map<String, Integer>} -- or for a class that extends {@code
 Map<String, Integer>} -- it will return {@code Integer}.
 </p>

 @param mapType map type (must extend {@link Map})
 @return type parameter, which may be any type]]>
      </doc>
    </method>
    <method name="iterableOf" return="java.lang.Iterable&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.Object"/>
      <doc>
      <![CDATA[Returns an iterable for an input iterable or array value.

 <p>
 If the input value extends {@link Iterable}, it will just return the input value. Otherwise, it
 will return an iterable that can handle arrays of primitive and non-primitive component type.
 </p>

 @param value iterable (extends {@link Iterable}) or array value
 @return iterable]]>
      </doc>
    </method>
    <method name="toArray" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="collection" type="java.util.Collection&lt;?&gt;"/>
      <param name="componentType" type="java.lang.Class&lt;?&gt;"/>
      <doc>
      <![CDATA[Returns a new array of the given component type (possibly a Java primitive) that is a copy of
 the content of the given collection.

 @param collection collection
 @param componentType component type (possibly a Java primitive)
 @return new array]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Utilities for working with Java types.

 @since 1.4
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.Types -->
  <!-- start class com.google.api.client.util.Value -->
  <class name="Value"    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.annotation.Annotation"/>
    <doc>
    <![CDATA[Use this annotation to specify that an enum constant is a string data value, optionally providing
 the string data value to use.
 <p>
 If the string data value is not specified, the default is the Java field's name. For example:
 </p>

 <pre>
  public enum A {

    // value is "USE_FIELD_NAME"
    &#64;Value
    USE_FIELD_NAME,

    // value is "specifiedValue"
    &#64;Value("specifiedValue")
    USE_SPECIFIED_VALUE, 

    // value is null
    &#64;NullValue
    NULL_VALUE

    // not a value
    NOT_A_VALUE
  }
 </pre>

 @since 1.4
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.Value -->
</package>
<package name="com.google.api.client.util.escape">
  <!-- start class com.google.api.client.util.escape.CharEscapers -->
  <class name="CharEscapers" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="escapeUri" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Escapes the string value so it can be safely included in URIs. For details on escaping URIs,
 see section 2.4 of <a href="http://www.ietf.org/rfc/rfc2396.txt">RFC 2396</a>.

 <p>
 When encoding a String, the following rules apply:
 <ul>
 <li>The alphanumeric characters "a" through "z", "A" through "Z" and "0" through "9" remain the
 same.
 <li>The special characters ".", "-", "*", and "_" remain the same.
 <li>The space character " " is converted into a plus sign "+".
 <li>All other characters are converted into one or more bytes using UTF-8 encoding and each
 byte is then represented by the 3-character string "%XY", where "XY" is the two-digit,
 uppercase, hexadecimal representation of the byte value.
 </ul>

 <p>
 <b>Note</b>: Unlike other escapers, URI escapers produce uppercase hexadecimal sequences. From
 <a href="http://www.ietf.org/rfc/rfc3986.txt"> RFC 3986</a>:<br> <i>"URI producers and
 normalizers should use uppercase hexadecimal digits for all percent-encodings."</i>

 <p>
 This escaper has identical behavior to (but is potentially much faster than):
 <ul>
 <li>{@link java.net.URLEncoder#encode(String, String)} with the encoding name "UTF-8"
 </ul>]]>
      </doc>
    </method>
    <method name="decodeUri" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.lang.String"/>
      <doc>
      <![CDATA[Percent-decodes a US-ASCII string into a Unicode string. UTF-8 encoding is used to determine
 what characters are represented by any consecutive sequences of the form "%<i>XX</i>".

 <p>
 This replaces each occurrence of '+' with a space, ' '. So this method should not be used for
 non application/x-www-form-urlencoded strings such as host and path.

 @param uri a percent-encoded US-ASCII string
 @return a Unicode string]]>
      </doc>
    </method>
    <method name="escapeUriPath" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Escapes the string value so it can be safely included in URI path segments. For details on
 escaping URIs, see section 2.4 of <a href="http://www.ietf.org/rfc/rfc3986.txt">RFC 3986</a>.

 <p>
 When encoding a String, the following rules apply:
 <ul>
 <li>The alphanumeric characters "a" through "z", "A" through "Z" and "0" through "9" remain the
 same.
 <li>The unreserved characters ".", "-", "~", and "_" remain the same.
 <li>The general delimiters "@" and ":" remain the same.
 <li>The subdelimiters "!", "$", "&amp;", "'", "(", ")", "*", ",", ";", and "=" remain the same.
 <li>The space character " " is converted into %20.
 <li>All other characters are converted into one or more bytes using UTF-8 encoding and each
 byte is then represented by the 3-character string "%XY", where "XY" is the two-digit,
 uppercase, hexadecimal representation of the byte value.
 </ul>

 <p>
 <b>Note</b>: Unlike other escapers, URI escapers produce uppercase hexadecimal sequences. From
 <a href="http://www.ietf.org/rfc/rfc3986.txt"> RFC 3986</a>:<br> <i>"URI producers and
 normalizers should use uppercase hexadecimal digits for all percent-encodings."</i>]]>
      </doc>
    </method>
    <method name="escapeUriQuery" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Escapes the string value so it can be safely included in URI query string segments. When the
 query string consists of a sequence of name=value pairs separated by &amp;, the names and
 values should be individually encoded. If you escape an entire query string in one pass with
 this escaper, then the "=" and "&amp;" characters used as separators will also be escaped.

 <p>
 This escaper is also suitable for escaping fragment identifiers.

 <p>
 For details on escaping URIs, see section 2.4 of <a
 href="http://www.ietf.org/rfc/rfc3986.txt">RFC 3986</a>.

 <p>
 When encoding a String, the following rules apply:
 <ul>
 <li>The alphanumeric characters "a" through "z", "A" through "Z" and "0" through "9" remain the
 same.
 <li>The unreserved characters ".", "-", "~", and "_" remain the same.
 <li>The general delimiters "@" and ":" remain the same.
 <li>The path delimiters "/" and "?" remain the same.
 <li>The subdelimiters "!", "$", "'", "(", ")", "*", ",", and ";", remain the same.
 <li>The space character " " is converted into %20.
 <li>The equals sign "=" is converted into %3D.
 <li>The ampersand "&amp;" is converted into %26.
 <li>All other characters are converted into one or more bytes using UTF-8 encoding and each
 byte is then represented by the 3-character string "%XY", where "XY" is the two-digit,
 uppercase, hexadecimal representation of the byte value.
 </ul>

 <p>
 <b>Note</b>: Unlike other escapers, URI escapers produce uppercase hexadecimal sequences. From
 <a href="http://www.ietf.org/rfc/rfc3986.txt"> RFC 3986</a>:<br> <i>"URI producers and
 normalizers should use uppercase hexadecimal digits for all percent-encodings."</i>]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Utility functions for dealing with {@code CharEscaper}s, and some commonly used {@code
 CharEscaper} instances.

 @since 1.0]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.escape.CharEscapers -->
  <!-- start class com.google.api.client.util.escape.Escaper -->
  <class name="Escaper" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Escaper"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="escape" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the escaped form of a given literal string.

 <p>
 Note that this method may treat input characters differently depending on the specific escaper
 implementation.
 <ul>
 <li>{@link UnicodeEscaper} handles <a href="http://en.wikipedia.org/wiki/UTF-16">UTF-16</a>
 correctly, including surrogate character pairs. If the input is badly formed the escaper should
 throw {@link IllegalArgumentException}.
 </ul>

 @param string the literal string to be escaped
 @return the escaped form of {@code string}
 @throws NullPointerException if {@code string} is null
 @throws IllegalArgumentException if {@code string} contains badly formed UTF-16 or cannot be
         escaped for any other reason]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An object that converts literal text into a format safe for inclusion in a particular context
 (such as an XML document). Typically (but not always), the inverse process of "unescaping" the
 text is performed automatically by the relevant parser.

 <p>
 For example, an XML escaper would convert the literal string {@code "Foo<Bar>"} into {@code
 "Foo&lt;Bar&gt;"} to prevent {@code "<Bar>"} from being confused with an XML tag. When the
 resulting XML document is parsed, the parser API will return this text as the original literal
 string {@code "Foo<Bar>"}.

 <p>
 An {@code Escaper} instance is required to be stateless, and safe when used concurrently by
 multiple threads.

 <p>
 Several popular escapers are defined as constants in the class {@link CharEscapers}.

 @since 1.0]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.escape.Escaper -->
  <!-- start class com.google.api.client.util.escape.PercentEscaper -->
  <class name="PercentEscaper" extends="com.google.api.client.util.escape.UnicodeEscaper"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="PercentEscaper" type="java.lang.String, boolean"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Constructs a URI escaper with the specified safe characters and optional handling of the space
 character.

 @param safeChars a non null string specifying additional safe characters for this escaper (the
        ranges 0..9, a..z and A..Z are always safe and should not be specified here)
 @param plusForSpace true if ASCII space should be escaped to {@code +} rather than {@code %20}
 @throws IllegalArgumentException if any of the parameters were invalid]]>
      </doc>
    </constructor>
    <method name="nextEscapeIndex" return="int"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="csq" type="java.lang.CharSequence"/>
      <param name="index" type="int"/>
      <param name="end" type="int"/>
    </method>
    <method name="escape" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="s" type="java.lang.String"/>
    </method>
    <method name="escape" return="char[]"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cp" type="int"/>
      <doc>
      <![CDATA[Escapes the given Unicode code point in UTF-8.]]>
      </doc>
    </method>
    <field name="SAFECHARS_URLENCODER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A string of safe characters that mimics the behavior of {@link java.net.URLEncoder}.]]>
      </doc>
    </field>
    <field name="SAFEPATHCHARS_URLENCODER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A string of characters that do not need to be encoded when used in URI path segments, as
 specified in RFC 3986. Note that some of these characters do need to be escaped when used in
 other parts of the URI.]]>
      </doc>
    </field>
    <field name="SAFEQUERYSTRINGCHARS_URLENCODER" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[A string of characters that do not need to be encoded when used in URI query strings, as
 specified in RFC 3986. Note that some of these characters do need to be escaped when used in
 other parts of the URI.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[A {@code UnicodeEscaper} that escapes some set of Java characters using the URI percent encoding
 scheme. The set of safe characters (those which remain unescaped) can be specified on
 construction.

 <p>
 For details on escaping URIs for use in web pages, see section 2.4 of <a
 href="http://www.ietf.org/rfc/rfc3986.txt">RFC 3986</a>.

 <p>
 When encoding a String, the following rules apply:
 <ul>
 <li>The alphanumeric characters "a" through "z", "A" through "Z" and "0" through "9" remain the
 same.
 <li>Any additionally specified safe characters remain the same.
 <li>If {@code plusForSpace} was specified, the space character " " is converted into a plus sign
 "+".
 <li>All other characters are converted into one or more bytes using UTF-8 encoding and each byte
 is then represented by the 3-character string "%XY", where "XY" is the two-digit, uppercase,
 hexadecimal representation of the byte value.
 </ul>

 <p>
 RFC 2396 specifies the set of unreserved characters as "-", "_", ".", "!", "~", "*", "'", "(" and
 ")". It goes on to state:

 <p>
 <i>Unreserved characters can be escaped without changing the semantics of the URI, but this
 should not be done unless the URI is being used in a context that does not allow the unescaped
 character to appear.</i>

 <p>
 For performance reasons the only currently supported character encoding of this class is UTF-8.

 <p>
 <b>Note</b>: This escaper produces uppercase hexadecimal sequences. From <a
 href="http://www.ietf.org/rfc/rfc3986.txt">RFC 3986</a>:<br> <i>"URI producers and normalizers
 should use uppercase hexadecimal digits for all percent-encodings."</i>

 @since 1.0]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.escape.PercentEscaper -->
  <!-- start class com.google.api.client.util.escape.UnicodeEscaper -->
  <class name="UnicodeEscaper" extends="com.google.api.client.util.escape.Escaper"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="UnicodeEscaper"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="escape" return="char[]"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="cp" type="int"/>
      <doc>
      <![CDATA[Returns the escaped form of the given Unicode code point, or {@code null} if this code point
 does not need to be escaped. When called as part of an escaping operation, the given code point
 is guaranteed to be in the range {@code 0 <= cp <= Character#MAX_CODE_POINT}.

 <p>
 If an empty array is returned, this effectively strips the input character from the resulting
 text.

 <p>
 If the character does not need to be escaped, this method should return {@code null}, rather
 than an array containing the character representation of the code point. This enables the
 escaping algorithm to perform more efficiently.

 <p>
 If the implementation of this method cannot correctly handle a particular code point then it
 should either throw an appropriate runtime exception or return a suitable replacement
 character. It must never silently discard invalid input as this may constitute a security risk.

 @param cp the Unicode code point to escape if necessary
 @return the replacement characters, or {@code null} if no escaping was needed]]>
      </doc>
    </method>
    <method name="nextEscapeIndex" return="int"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="csq" type="java.lang.CharSequence"/>
      <param name="start" type="int"/>
      <param name="end" type="int"/>
      <doc>
      <![CDATA[Scans a sub-sequence of characters from a given {@link CharSequence}, returning the index of
 the next character that requires escaping.

 <p>
 <b>Note:</b> When implementing an escaper, it is a good idea to override this method for
 efficiency. The base class implementation determines successive Unicode code points and invokes
 {@link #escape(int)} for each of them. If the semantics of your escaper are such that code
 points in the supplementary range are either all escaped or all unescaped, this method can be
 implemented more efficiently using {@link CharSequence#charAt(int)}.

 <p>
 Note however that if your escaper does not escape characters in the supplementary range, you
 should either continue to validate the correctness of any surrogate characters encountered or
 provide a clear warning to users that your escaper does not validate its input.

 <p>
 See {@link PercentEscaper} for an example.

 @param csq a sequence of characters
 @param start the index of the first character to be scanned
 @param end the index immediately after the last character to be scanned
 @throws IllegalArgumentException if the scanned sub-sequence of {@code csq} contains invalid
         surrogate pairs]]>
      </doc>
    </method>
    <method name="escape" return="java.lang.String"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="string" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the escaped form of a given literal string.

 <p>
 If you are escaping input in arbitrary successive chunks, then it is not generally safe to use
 this method. If an input string ends with an unmatched high surrogate character, then this
 method will throw {@link IllegalArgumentException}. You should ensure your input is valid <a
 href="http://en.wikipedia.org/wiki/UTF-16">UTF-16</a> before calling this method.

 @param string the literal string to be escaped
 @return the escaped form of {@code string}
 @throws NullPointerException if {@code string} is null
 @throws IllegalArgumentException if invalid surrogate characters are encountered]]>
      </doc>
    </method>
    <method name="escapeSlow" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="protected"
      deprecated="not deprecated">
      <param name="s" type="java.lang.String"/>
      <param name="index" type="int"/>
      <doc>
      <![CDATA[Returns the escaped form of a given literal string, starting at the given index. This method is
 called by the {@link #escape(String)} method when it discovers that escaping is required. It is
 protected to allow subclasses to override the fastpath escaping function to inline their
 escaping test.

 <p>
 This method is not reentrant and may only be invoked by the top level {@link #escape(String)}
 method.

 @param s the literal string to be escaped
 @param index the index to start escaping from
 @return the escaped form of {@code string}
 @throws NullPointerException if {@code string} is null
 @throws IllegalArgumentException if invalid surrogate characters are encountered]]>
      </doc>
    </method>
    <method name="codePointAt" return="int"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="protected"
      deprecated="not deprecated">
      <param name="seq" type="java.lang.CharSequence"/>
      <param name="index" type="int"/>
      <param name="end" type="int"/>
      <doc>
      <![CDATA[Returns the Unicode code point of the character at the given index.

 <p>
 Unlike {@link Character#codePointAt(CharSequence, int)} or {@link String#codePointAt(int)} this
 method will never fail silently when encountering an invalid surrogate pair.

 <p>
 The behaviour of this method is as follows:
 <ol>
 <li>If {@code index >= end}, {@link IndexOutOfBoundsException} is thrown.
 <li><b>If the character at the specified index is not a surrogate, it is returned.</b>
 <li>If the first character was a high surrogate value, then an attempt is made to read the next
 character.
 <ol>
 <li><b>If the end of the sequence was reached, the negated value of the trailing high surrogate
 is returned.</b>
 <li><b>If the next character was a valid low surrogate, the code point value of the high/low
 surrogate pair is returned.</b>
 <li>If the next character was not a low surrogate value, then {@link IllegalArgumentException}
 is thrown.
 </ol>
 <li>If the first character was a low surrogate value, {@link IllegalArgumentException} is
 thrown.
 </ol>

 @param seq the sequence of characters from which to decode the code point
 @param index the index of the first character to decode
 @param end the index beyond the last valid character to decode
 @return the Unicode code point for the given index or the negated value of the trailing high
         surrogate character at the end of the sequence]]>
      </doc>
    </method>
    <doc>
    <![CDATA[An {@link Escaper} that converts literal text into a format safe for inclusion in a particular
 context (such as an XML document). Typically (but not always), the inverse process of
 "unescaping" the text is performed automatically by the relevant parser.

 <p>
 For example, an XML escaper would convert the literal string {@code "Foo<Bar>"} into {@code
 "Foo&lt;Bar&gt;"} to prevent {@code "<Bar>"} from being confused with an XML tag. When the
 resulting XML document is parsed, the parser API will return this text as the original literal
 string {@code "Foo<Bar>"}.

 <p>
 As there are important reasons, including potential security issues, to handle Unicode correctly
 if you are considering implementing a new escaper you should favor using UnicodeEscaper wherever
 possible.

 <p>
 A {@code UnicodeEscaper} instance is required to be stateless, and safe when used concurrently by
 multiple threads.

 <p>
 Several popular escapers are defined as constants in the class {@link CharEscapers}. To create
 your own escapers extend this class and implement the {@link #escape(int)} method.

 @since 1.0]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.util.escape.UnicodeEscaper -->
</package>
<package name="com.google.api.client.xml">
  <!-- start class com.google.api.client.xml.GenericXml -->
  <class name="GenericXml" extends="com.google.api.client.util.GenericData"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="java.lang.Cloneable"/>
    <constructor name="GenericXml"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="clone" return="com.google.api.client.xml.GenericXml"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="toString" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </method>
    <method name="set" return="com.google.api.client.xml.GenericXml"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="fieldName" type="java.lang.String"/>
      <param name="value" type="java.lang.Object"/>
    </method>
    <field name="name" type="java.lang.String"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Optional XML element local name prefixed by its namespace alias -- for example {@code
 "atom:entry"} -- or {@code null} if not set.]]>
      </doc>
    </field>
    <field name="namespaceDictionary" type="com.google.api.client.xml.XmlNamespaceDictionary"
      transient="false" volatile="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Optional namespace dictionary or {@code null} if not set.]]>
      </doc>
    </field>
    <doc>
    <![CDATA[Generic XML data that stores all unknown key name/value pairs.

 <p>
 Each data key name maps into the name of the XPath expression value for the XML element,
 attribute, or text content (using {@code "text()"}). Subclasses can declare fields for known XML
 content using the {@link Key} annotation. Each field can be of any visibility (private, package
 private, protected, or public) and must not be static. {@code null} unknown data key names are
 not allowed, but {@code null} data values are allowed.
 </p>

 <p>
 Implementation is not thread-safe. For a thread-safe choice instead use an implementation of
 {@link ConcurrentMap}.
 </p>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.xml.GenericXml -->
  <!-- start class com.google.api.client.xml.Xml -->
  <class name="Xml" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <method name="createSerializer" return="XmlSerializer"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns a new XML serializer.

 @throws IllegalArgumentException if encountered an {@link XmlPullParserException}]]>
      </doc>
    </method>
    <method name="createParser" return="XmlPullParser"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
      <doc>
      <![CDATA[Returns a new XML pull parser.]]>
      </doc>
    </method>
    <method name="toStringOf" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="element" type="java.lang.Object"/>
      <doc>
      <![CDATA[Shows a debug string representation of an element data object of key/value pairs.
 <p>
 It will make up something for the element name and XML namespaces. If those are known, it is
 better to use {@link XmlNamespaceDictionary#toStringOf(String, Object)}.

 @param element element data object of key/value pairs ({@link GenericXml}, {@link Map}, or any
        object with public fields)]]>
      </doc>
    </method>
    <method name="parseElement"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="parser" type="XmlPullParser"/>
      <param name="destination" type="java.lang.Object"/>
      <param name="namespaceDictionary" type="com.google.api.client.xml.XmlNamespaceDictionary"/>
      <param name="customizeParser" type="com.google.api.client.xml.Xml.CustomizeParser"/>
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
      <doc>
      <![CDATA[Parses an XML element using the given XML pull parser into the given destination object.

 <p>
 Requires the the current event be {@link XmlPullParser#START_TAG} (skipping any initial
 {@link XmlPullParser#START_DOCUMENT}) of the element being parsed. At normal parsing
 completion, the current event will either be {@link XmlPullParser#END_TAG} of the element being
 parsed, or the {@link XmlPullParser#START_TAG} of the requested {@code atom:entry}.
 </p>

 @param parser XML pull parser
 @param destination optional destination object to parser into or {@code null} to ignore XML
        content
 @param namespaceDictionary XML namespace dictionary to store unknown namespaces
 @param customizeParser optional parser customizer or {@code null} for none]]>
      </doc>
    </method>
    <field name="MEDIA_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "application/xml; charset=utf-8"} media type used as a default for XML parsing.

 <p>
 Use {@link HttpMediaType#equalsIgnoreParameters} for comparing media types.
 </p>

 @since 1.10]]>
      </doc>
    </field>
    <doc>
    <![CDATA[XML utilities.

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.xml.Xml -->
  <!-- start class com.google.api.client.xml.Xml.CustomizeParser -->
  <class name="Xml.CustomizeParser" extends="java.lang.Object"
    abstract="false"
    static="true" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="Xml.CustomizeParser"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="stopBeforeStartTag" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="namespace" type="java.lang.String"/>
      <param name="localName" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns whether to stop parsing when reaching the start tag of an XML element before it has
 been processed. Only called if the element is actually being processed. By default, returns
 {@code false}, but subclasses may override.

 @param namespace XML element's namespace URI
 @param localName XML element's local name]]>
      </doc>
    </method>
    <method name="stopAfterEndTag" return="boolean"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="namespace" type="java.lang.String"/>
      <param name="localName" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns whether to stop parsing when reaching the end tag of an XML element after it has been
 processed. Only called if the element is actually being processed. By default, returns {@code
 false}, but subclasses may override.

 @param namespace XML element's namespace URI
 @param localName XML element's local name]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Customizes the behavior of XML parsing. Subclasses may override any methods they need to
 customize behavior.

 <p>
 Implementation has no fields and therefore thread-safe, but sub-classes are not necessarily
 thread-safe.
 </p>]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.xml.Xml.CustomizeParser -->
  <!-- start class com.google.api.client.xml.XmlNamespaceDictionary -->
  <class name="XmlNamespaceDictionary" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <constructor name="XmlNamespaceDictionary"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
    </constructor>
    <method name="getAliasForUri" return="java.lang.String"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="uri" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the namespace alias (or {@code ""} for the default namespace) for the given namespace
 URI.

 @param uri namespace URI
 @since 1.3]]>
      </doc>
    </method>
    <method name="getUriForAlias" return="java.lang.String"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="alias" type="java.lang.String"/>
      <doc>
      <![CDATA[Returns the namespace URI for the given namespace alias (or {@code ""} for the default
 namespace).

 @param alias namespace alias (or {@code ""} for the default namespace)
 @since 1.3]]>
      </doc>
    </method>
    <method name="getAliasToUriMap" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an unmodified set of map entries for the map from namespace alias (or {@code ""} for
 the default namespace) to namespace URI.

 @since 1.3]]>
      </doc>
    </method>
    <method name="getUriToAliasMap" return="java.util.Map&lt;java.lang.String, java.lang.String&gt;"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns an unmodified set of map entries for the map from namespace URI to namespace alias (or
 {@code ""} for the default namespace).

 @since 1.3]]>
      </doc>
    </method>
    <method name="set" return="com.google.api.client.xml.XmlNamespaceDictionary"
      abstract="false" native="false" synchronized="true"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="alias" type="java.lang.String"/>
      <param name="uri" type="java.lang.String"/>
      <doc>
      <![CDATA[Adds a namespace of the given alias and URI.

 <p>
 If the uri is {@code null}, the namespace alias will be removed. Similarly, if the alias is
 {@code null}, the namespace URI will be removed. Otherwise, if the alias is already mapped to a
 different URI, it will be remapped to the new URI. Similarly, if a URI is already mapped to a
 different alias, it will be remapped to the new alias.
 </p>

 @param alias alias or {@code null} to remove the namespace URI
 @param uri namespace URI or {@code null} to remove the namespace alias
 @return this namespace dictionary
 @since 1.3]]>
      </doc>
    </method>
    <method name="toStringOf" return="java.lang.String"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="elementName" type="java.lang.String"/>
      <param name="element" type="java.lang.Object"/>
      <doc>
      <![CDATA[Shows a debug string representation of an element data object of key/value pairs.

 @param element element data object ({@link GenericXml}, {@link Map}, or any object with public
        fields)
 @param elementName optional XML element local name prefixed by its namespace alias -- for
        example {@code "atom:entry"} -- or {@code null} to make up something]]>
      </doc>
    </method>
    <method name="serialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="serializer" type="XmlSerializer"/>
      <param name="elementNamespaceUri" type="java.lang.String"/>
      <param name="elementLocalName" type="java.lang.String"/>
      <param name="element" type="java.lang.Object"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Shows a debug string representation of an element data object of key/value pairs.

 @param element element data object ({@link GenericXml}, {@link Map}, or any object with public
        fields)
 @param elementNamespaceUri XML namespace URI or {@code null} for no namespace
 @param elementLocalName XML local name
 @throws IOException I/O exception]]>
      </doc>
    </method>
    <method name="serialize"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="serializer" type="XmlSerializer"/>
      <param name="elementName" type="java.lang.String"/>
      <param name="element" type="java.lang.Object"/>
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Shows a debug string representation of an element data object of key/value pairs.

 @param element element data object ({@link GenericXml}, {@link Map}, or any object with public
        fields)
 @param elementName XML element local name prefixed by its namespace alias
 @throws IOException I/O exception]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Thread-safe XML namespace dictionary that provides a one-to-one map of namespace alias to URI.

 <p>
 Implementation is thread-safe. For maximum efficiency, applications should use a single
 globally-shared instance of the XML namespace dictionary.
 </p>

 <p>
 A namespace alias is uniquely mapped to a single namespace URI, and a namespace URI is uniquely
 mapped to a single namespace alias. In other words, it is not possible to have duplicates.
 </p>

 <p>
 Sample usage:
 </p>

 <pre>{@code
  static final XmlNamespaceDictionary DICTIONARY = new XmlNamespaceDictionary()
      .set("", "http://www.w3.org/2005/Atom")
      .set("activity", "http://activitystrea.ms/spec/1.0/")
      .set("georss", "http://www.georss.org/georss")
      .set("media", "http://search.yahoo.com/mrss/")
      .set("thr", "http://purl.org/syndication/thread/1.0");
}</pre>

 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.xml.XmlNamespaceDictionary -->
  <!-- start class com.google.api.client.xml.XmlObjectParser -->
  <class name="XmlObjectParser" extends="java.lang.Object"
    abstract="false"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <implements name="com.google.api.client.util.ObjectParser"/>
    <constructor name="XmlObjectParser" type="com.google.api.client.xml.XmlNamespaceDictionary"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Creates an XmlObjectParser using the specified non-null namespace dictionary.

 @param namespaceDictionary XML namespace dictionary]]>
      </doc>
    </constructor>
    <method name="getNamespaceDictionary" return="com.google.api.client.xml.XmlNamespaceDictionary"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the XML namespace dictionary.]]>
      </doc>
    </method>
    <method name="parseAndClose" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <param name="charset" type="java.nio.charset.Charset"/>
      <param name="dataClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="parseAndClose" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="in" type="java.io.InputStream"/>
      <param name="charset" type="java.nio.charset.Charset"/>
      <param name="dataType" type="java.lang.reflect.Type"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="parseAndClose" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <param name="dataClass" type="java.lang.Class&lt;T&gt;"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <method name="parseAndClose" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="reader" type="java.io.Reader"/>
      <param name="dataType" type="java.lang.reflect.Type"/>
      <exception name="IOException" type="java.io.IOException"/>
    </method>
    <doc>
    <![CDATA[XML HTTP parser into an data class of key/value pairs.

 <p>
 Implementation is thread-safe.
 </p>

 <p>
 Sample usage:
 </p>

 <pre>
  static void setParser(HttpRequest request, XmlNamespaceDictionary namespaceDictionary) {
    request.setParser(new XmlObjectParser(namespaceDictionary));
  }
 </pre>

 @since 1.10
 @author Matthias Linder (mlinder)]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.xml.XmlObjectParser -->
</package>
<package name="com.google.api.client.xml.atom">
  <!-- start class com.google.api.client.xml.atom.AbstractAtomFeedParser -->
  <class name="AbstractAtomFeedParser" extends="java.lang.Object"
    abstract="true"
    static="false" final="false" visibility="public"
    deprecated="not deprecated">
    <constructor name="AbstractAtomFeedParser" type="com.google.api.client.xml.XmlNamespaceDictionary, XmlPullParser, java.io.InputStream, java.lang.Class&lt;T&gt;"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <doc>
      <![CDATA[@param namespaceDictionary XML namespace dictionary
 @param parser XML pull parser to use
 @param inputStream input stream to read
 @param feedClass feed class to parse
 @since 1.5]]>
      </doc>
    </constructor>
    <method name="getParser" return="XmlPullParser"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the XML pull parser to use.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getInputStream" return="java.io.InputStream"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the input stream to read.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getFeedClass" return="java.lang.Class&lt;T&gt;"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the feed class to parse.

 @since 1.5]]>
      </doc>
    </method>
    <method name="getNamespaceDictionary" return="com.google.api.client.xml.XmlNamespaceDictionary"
      abstract="false" native="false" synchronized="false"
      static="false" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Returns the XML namespace dictionary.

 @since 1.5]]>
      </doc>
    </method>
    <method name="parseFeed" return="T"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
      <doc>
      <![CDATA[Parse the feed and return a new parsed instance of the feed type. This method can be skipped if
 all you want are the items.

 @throws IOException I/O exception
 @throws XmlPullParserException XML pull parser exception]]>
      </doc>
    </method>
    <method name="parseNextEntry" return="java.lang.Object"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
      <doc>
      <![CDATA[Parse the next item in the feed and return a new parsed instance of the item type. If there is
 no item to parse, it will return {@code null} and automatically close the parser (in which case
 there is no need to call {@link #close()}.

 @throws IOException I/O exception
 @throws XmlPullParserException XML pull parser exception]]>
      </doc>
    </method>
    <method name="close"
      abstract="false" native="false" synchronized="false"
      static="false" final="false" visibility="public"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <doc>
      <![CDATA[Closes the underlying parser.]]>
      </doc>
    </method>
    <method name="parseEntryInternal" return="java.lang.Object"
      abstract="true" native="false" synchronized="false"
      static="false" final="false" visibility="protected"
      deprecated="not deprecated">
      <exception name="IOException" type="java.io.IOException"/>
      <exception name="XmlPullParserException" type="XmlPullParserException"/>
      <doc>
      <![CDATA[Parses a single entry.

 @return object representing the entry
 @throws IOException I/O exception
 @throws XmlPullParserException XML pull parser exception]]>
      </doc>
    </method>
    <doc>
    <![CDATA[Abstract base class for an Atom feed parser when the feed type is known in advance.

 <p>
 Implementation is not thread-safe.
 </p>

 @param <T> feed type
 @since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.xml.atom.AbstractAtomFeedParser -->
  <!-- start class com.google.api.client.xml.atom.Atom -->
  <class name="Atom" extends="java.lang.Object"
    abstract="false"
    static="false" final="true" visibility="public"
    deprecated="not deprecated">
    <method name="checkContentType"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="contentType" type="java.lang.String"/>
      <doc>
      <![CDATA[Checks the given content type matches the Atom content type specified in {@link #MEDIA_TYPE}.

 @throws IllegalArgumentException if content type doesn't match]]>
      </doc>
    </method>
    <method name="setSlugHeader"
      abstract="false" native="false" synchronized="false"
      static="true" final="false" visibility="public"
      deprecated="not deprecated">
      <param name="headers" type="com.google.api.client.http.HttpHeaders"/>
      <param name="value" type="java.lang.String"/>
      <doc>
      <![CDATA[Sets the {@code "Slug"} header, properly escaping the header value. See <a
 href="http://tools.ietf.org/html/rfc5023#section-9.7">The Slug Header</a>.

 @since 1.14]]>
      </doc>
    </method>
    <field name="ATOM_NAMESPACE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[Atom namespace.]]>
      </doc>
    </field>
    <field name="MEDIA_TYPE" type="java.lang.String"
      transient="false" volatile="false"
      static="true" final="true" visibility="public"
      deprecated="not deprecated">
      <doc>
      <![CDATA[{@code "application/atom+xml; charset=utf-8"} media type used as a default for Atom parsing.

 <p>
 Use {@link HttpMediaType#equalsIgnoreParameters} for comparing media types.
 </p>

 @since 1.10]]>
      </doc>
    </field>
    <doc>
    <![CDATA[@since 1.0
 @author Yaniv Inbar]]>
    </doc>
  </class>
  <!-- end class com.google.api.client.xml.atom.Atom -->
</package>

</api>
